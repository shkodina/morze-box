
09.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000187c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010c  00800060  0000187c  00001910  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  0080016c  0080016c  00001a1c  2**0
                  ALLOC
  3 .stab         00000c84  00000000  00000000  00001a1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001b6  00000000  00000000  000026a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000188  00000000  00000000  00002856  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000043d  00000000  00000000  000029de  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000022f9  00000000  00000000  00002e1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000e91  00000000  00000000  00005114  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001e4b  00000000  00000000  00005fa5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000380  00000000  00000000  00007df0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000b58  00000000  00000000  00008170  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000154a  00000000  00000000  00008cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000039d  00000000  00000000  0000a212  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000070  00000000  00000000  0000a5af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e7       	ldi	r30, 0x7C	; 124
      68:	f8 e1       	ldi	r31, 0x18	; 24
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e6       	ldi	r26, 0x6C	; 108
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 37       	cpi	r26, 0x7C	; 124
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <main>
      8a:	0c 94 3c 0c 	jmp	0x1878	; 0x1878 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <uart_print>:
#ifdef SERIAL_DEBUG 
//============================ SERIAL DEBUG ROUTINES =================================//
FILE uart_out = FDEV_SETUP_STREAM ( uart_print, NULL, _FDEV_SETUP_WRITE );

int uart_print ( char c, FILE *stream )
{
      92:	1f 93       	push	r17
      94:	18 2f       	mov	r17, r24
  if ( c == '\n' )
      96:	8a 30       	cpi	r24, 0x0A	; 10
      98:	19 f4       	brne	.+6      	; 0xa0 <uart_print+0xe>
    uart_print ( '\r', stream );
      9a:	8d e0       	ldi	r24, 0x0D	; 13
      9c:	0e 94 49 00 	call	0x92	; 0x92 <uart_print>
  loop_until_bit_is_set ( UCSRA, UDRE );
      a0:	5d 9b       	sbis	0x0b, 5	; 11
      a2:	fe cf       	rjmp	.-4      	; 0xa0 <uart_print+0xe>
  UDR = c;
      a4:	1c b9       	out	0x0c, r17	; 12
  return 0;
}
      a6:	80 e0       	ldi	r24, 0x00	; 0
      a8:	90 e0       	ldi	r25, 0x00	; 0
      aa:	1f 91       	pop	r17
      ac:	08 95       	ret

000000ae <usart_init>:

#ifdef USART 
//================================ USART ROUTINES ===================================//
void usart_init ( void )
{
	UCSRB |= ( 1 << RXCIE ) | ( 1 << RXEN ) | ( 1 << TXEN );   	// Turn on the transmission reception ..
      ae:	8a b1       	in	r24, 0x0a	; 10
      b0:	88 69       	ori	r24, 0x98	; 152
      b2:	8a b9       	out	0x0a, r24	; 10
								// circuitry and receiver interrupt
	UCSRC |= ( 1 << URSEL ) | ( 1 << UCSZ0 ) | ( 1 << UCSZ1 ); // Use 8-bit character sizes
      b4:	80 b5       	in	r24, 0x20	; 32
      b6:	86 68       	ori	r24, 0x86	; 134
      b8:	80 bd       	out	0x20, r24	; 32

	UBRRL = BAUD_PRESCALE; 	// Load lower 8-bits of the baud rate value..
      ba:	85 e0       	ldi	r24, 0x05	; 5
      bc:	89 b9       	out	0x09, r24	; 9
				// into the low byte of the UBRR register
	UBRRH = ( BAUD_PRESCALE >> 8 ); 	// Load upper 8-bits of the baud rate value..
      be:	10 bc       	out	0x20, r1	; 32
					// into the high byte of the UBRR register
	
	#ifdef SERIAL_DEBUG 
	stdout = &uart_out;
      c0:	80 e6       	ldi	r24, 0x60	; 96
      c2:	90 e0       	ldi	r25, 0x00	; 0
      c4:	90 93 79 01 	sts	0x0179, r25
      c8:	80 93 78 01 	sts	0x0178, r24
	#endif
}
      cc:	08 95       	ret

000000ce <usart_putch>:
 
void usart_putch ( unsigned char send )
{
	while ( ( UCSRA & ( 1 << UDRE ) ) == 0 ); // Do nothing until UDR is ready..
      ce:	5d 9b       	sbis	0x0b, 5	; 11
      d0:	fe cf       	rjmp	.-4      	; 0xce <usart_putch>
	// for more data to be written to it
	UDR = send; // Send the byte 
      d2:	8c b9       	out	0x0c, r24	; 12
}
      d4:	08 95       	ret

000000d6 <usart_getch>:
 
unsigned int usart_getch ( void )
{
	while ( ( UCSRA & ( 1 << RXC ) ) == 0 );
      d6:	5f 9b       	sbis	0x0b, 7	; 11
      d8:	fe cf       	rjmp	.-4      	; 0xd6 <usart_getch>
	// Do nothing until data have been received and is ready to be read from UDR
	return ( UDR ); // return the byte
      da:	8c b1       	in	r24, 0x0c	; 12
}
      dc:	90 e0       	ldi	r25, 0x00	; 0
      de:	08 95       	ret

000000e0 <usart_send_string>:

void usart_send_string ( const char* data )
{
      e0:	ef 92       	push	r14
      e2:	ff 92       	push	r15
      e4:	cf 93       	push	r28
      e6:	df 93       	push	r29
      e8:	e8 2e       	mov	r14, r24
      ea:	e7 01       	movw	r28, r14
      ec:	7e 01       	movw	r14, r28
      ee:	f9 2e       	mov	r15, r25
      f0:	e7 01       	movw	r28, r14
	for( ; *data; data ++ )
      f2:	02 c0       	rjmp	.+4      	; 0xf8 <usart_send_string+0x18>
		usart_putch ( *data );
      f4:	0e 94 67 00 	call	0xce	; 0xce <usart_putch>
	return ( UDR ); // return the byte
}

void usart_send_string ( const char* data )
{
	for( ; *data; data ++ )
      f8:	89 91       	ld	r24, Y+
      fa:	88 23       	and	r24, r24
      fc:	d9 f7       	brne	.-10     	; 0xf4 <usart_send_string+0x14>
		usart_putch ( *data );
}
      fe:	df 91       	pop	r29
     100:	cf 91       	pop	r28
     102:	ff 90       	pop	r15
     104:	ef 90       	pop	r14
     106:	08 95       	ret

00000108 <avr_lcd_port_init>:

#ifdef LCD 
//================================= LCD ROUTINES ===================================//
void avr_lcd_port_init ( void )
{
	DDRA = 0xFF;
     108:	8f ef       	ldi	r24, 0xFF	; 255
     10a:	8a bb       	out	0x1a, r24	; 26
}
     10c:	08 95       	ret

0000010e <spi_tx>:
	ms_delay ( 10 );
}

void spi_tx ( unsigned char data )
{
	SPDR = data;
     10e:	8f b9       	out	0x0f, r24	; 15
	while ( ! (SPSR & ( 1 << SPIF ) ) );
     110:	77 9b       	sbis	0x0e, 7	; 14
     112:	fe cf       	rjmp	.-4      	; 0x110 <spi_tx+0x2>
}
     114:	08 95       	ret

00000116 <spi_rx>:

unsigned char spi_rx ( void )
{
	SPDR = 0xff;
     116:	8f ef       	ldi	r24, 0xFF	; 255
     118:	8f b9       	out	0x0f, r24	; 15
	while ( ! ( SPSR & ( 1 << SPIF ) ) );
     11a:	77 9b       	sbis	0x0e, 7	; 14
     11c:	fe cf       	rjmp	.-4      	; 0x11a <spi_rx+0x4>
	return SPDR;
     11e:	8f b1       	in	r24, 0x0f	; 15
}
     120:	08 95       	ret

00000122 <sdsc_pin_assert>:

#ifdef SDSC
//================================= SDSC ROUTINES ==================================//
void sdsc_pin_assert ( void )
{
	PORTB &= ~0x02;
     122:	c1 98       	cbi	0x18, 1	; 24
}
     124:	08 95       	ret

00000126 <sdsc_pin_deassert>:

void sdsc_pin_deassert ( void )
{
	PORTB |= 0x02;
     126:	c1 9a       	sbi	0x18, 1	; 24
}
     128:	08 95       	ret

0000012a <ms_delay>:
//================================= SDSC ROUTINES ==================================//
#endif

void ms_delay ( double delay )
{
     12a:	df 93       	push	r29
     12c:	cf 93       	push	r28
     12e:	00 d0       	rcall	.+0      	; 0x130 <ms_delay+0x6>
     130:	00 d0       	rcall	.+0      	; 0x132 <ms_delay+0x8>
     132:	cd b7       	in	r28, 0x3d	; 61
     134:	de b7       	in	r29, 0x3e	; 62
	volatile int ms = delay;
     136:	0e 94 05 07 	call	0xe0a	; 0xe0a <__fixsfsi>
     13a:	7a 83       	std	Y+2, r23	; 0x02
     13c:	69 83       	std	Y+1, r22	; 0x01
	volatile int i;

	for ( ; ms; ms -- )
     13e:	13 c0       	rjmp	.+38     	; 0x166 <ms_delay+0x3c>
		for ( i = 0; i < 400; i ++ );
     140:	1c 82       	std	Y+4, r1	; 0x04
     142:	1b 82       	std	Y+3, r1	; 0x03
     144:	05 c0       	rjmp	.+10     	; 0x150 <ms_delay+0x26>
     146:	8b 81       	ldd	r24, Y+3	; 0x03
     148:	9c 81       	ldd	r25, Y+4	; 0x04
     14a:	01 96       	adiw	r24, 0x01	; 1
     14c:	9c 83       	std	Y+4, r25	; 0x04
     14e:	8b 83       	std	Y+3, r24	; 0x03
     150:	8b 81       	ldd	r24, Y+3	; 0x03
     152:	9c 81       	ldd	r25, Y+4	; 0x04
     154:	21 e0       	ldi	r18, 0x01	; 1
     156:	80 39       	cpi	r24, 0x90	; 144
     158:	92 07       	cpc	r25, r18
     15a:	ac f3       	brlt	.-22     	; 0x146 <ms_delay+0x1c>
void ms_delay ( double delay )
{
	volatile int ms = delay;
	volatile int i;

	for ( ; ms; ms -- )
     15c:	89 81       	ldd	r24, Y+1	; 0x01
     15e:	9a 81       	ldd	r25, Y+2	; 0x02
     160:	01 97       	sbiw	r24, 0x01	; 1
     162:	9a 83       	std	Y+2, r25	; 0x02
     164:	89 83       	std	Y+1, r24	; 0x01
     166:	89 81       	ldd	r24, Y+1	; 0x01
     168:	9a 81       	ldd	r25, Y+2	; 0x02
     16a:	00 97       	sbiw	r24, 0x00	; 0
     16c:	49 f7       	brne	.-46     	; 0x140 <ms_delay+0x16>
		for ( i = 0; i < 400; i ++ );
}
     16e:	0f 90       	pop	r0
     170:	0f 90       	pop	r0
     172:	0f 90       	pop	r0
     174:	0f 90       	pop	r0
     176:	cf 91       	pop	r28
     178:	df 91       	pop	r29
     17a:	08 95       	ret

0000017c <spi_init_2x>:
	ms_delay ( 10 );
}

void spi_init_2x ( void )
{
	SPCR = 0x50; 
     17c:	80 e5       	ldi	r24, 0x50	; 80
     17e:	8d b9       	out	0x0d, r24	; 13
	SPSR |= ( 1 << SPI2X );
     180:	70 9a       	sbi	0x0e, 0	; 14

	ms_delay ( 10 );
     182:	60 e0       	ldi	r22, 0x00	; 0
     184:	70 e0       	ldi	r23, 0x00	; 0
     186:	80 e2       	ldi	r24, 0x20	; 32
     188:	91 e4       	ldi	r25, 0x41	; 65
     18a:	0e 94 95 00 	call	0x12a	; 0x12a <ms_delay>
}
     18e:	08 95       	ret

00000190 <spi_init>:
#ifdef SPI
//================================= SPI ROUTINES ===================================//
void spi_init ( void )
{
//master,little endian, SCK phase low, SCK idle low//
	DDRB  = 0xBF; 
     190:	8f eb       	ldi	r24, 0xBF	; 191
     192:	87 bb       	out	0x17, r24	; 23
	SPCR = 0x52; 
     194:	82 e5       	ldi	r24, 0x52	; 82
     196:	8d b9       	out	0x0d, r24	; 13
	SPSR = 0x00;
     198:	1e b8       	out	0x0e, r1	; 14

	ms_delay ( 10 );
     19a:	60 e0       	ldi	r22, 0x00	; 0
     19c:	70 e0       	ldi	r23, 0x00	; 0
     19e:	80 e2       	ldi	r24, 0x20	; 32
     1a0:	91 e4       	ldi	r25, 0x41	; 65
     1a2:	0e 94 95 00 	call	0x12a	; 0x12a <ms_delay>
}
     1a6:	08 95       	ret

000001a8 <avr_lcddata>:
	PORTA &= ~ ( 1 << en );
}
 
void avr_lcddata ( char dataout )
{
	PORTA = dataout;
     1a8:	8b bb       	out	0x1b, r24	; 27
	PORTA |= ( 1 << rs );
     1aa:	d8 9a       	sbi	0x1b, 0	; 27
	PORTA &= ~ ( 1 << rw );
     1ac:	d9 98       	cbi	0x1b, 1	; 27
	PORTA |= ( 1 << en );
     1ae:	da 9a       	sbi	0x1b, 2	; 27
	ms_delay ( 1 );
     1b0:	60 e0       	ldi	r22, 0x00	; 0
     1b2:	70 e0       	ldi	r23, 0x00	; 0
     1b4:	80 e8       	ldi	r24, 0x80	; 128
     1b6:	9f e3       	ldi	r25, 0x3F	; 63
     1b8:	0e 94 95 00 	call	0x12a	; 0x12a <ms_delay>
	PORTA &= ~ ( 1 << en );
     1bc:	da 98       	cbi	0x1b, 2	; 27
}
     1be:	08 95       	ret

000001c0 <avr_lcdcmd>:
	DDRA = 0xFF;
}

void avr_lcdcmd ( char cmdout )
{
	PORTA = cmdout;
     1c0:	8b bb       	out	0x1b, r24	; 27
	PORTA &= ~ ( 1 << rs );
     1c2:	d8 98       	cbi	0x1b, 0	; 27
	PORTA &= ~ ( 1 << rw );
     1c4:	d9 98       	cbi	0x1b, 1	; 27
	PORTA |= ( 1<< en );
     1c6:	da 9a       	sbi	0x1b, 2	; 27
	ms_delay ( 1 );
     1c8:	60 e0       	ldi	r22, 0x00	; 0
     1ca:	70 e0       	ldi	r23, 0x00	; 0
     1cc:	80 e8       	ldi	r24, 0x80	; 128
     1ce:	9f e3       	ldi	r25, 0x3F	; 63
     1d0:	0e 94 95 00 	call	0x12a	; 0x12a <ms_delay>
	PORTA &= ~ ( 1 << en );
     1d4:	da 98       	cbi	0x1b, 2	; 27
}
     1d6:	08 95       	ret

000001d8 <us_delay>:
	for ( ; ms; ms -- )
		for ( i = 0; i < 400; i ++ );
}

void us_delay ( double delay )
{
     1d8:	df 93       	push	r29
     1da:	cf 93       	push	r28
     1dc:	00 d0       	rcall	.+0      	; 0x1de <us_delay+0x6>
     1de:	00 d0       	rcall	.+0      	; 0x1e0 <us_delay+0x8>
     1e0:	cd b7       	in	r28, 0x3d	; 61
     1e2:	de b7       	in	r29, 0x3e	; 62
	volatile int us = delay;
     1e4:	0e 94 05 07 	call	0xe0a	; 0xe0a <__fixsfsi>
     1e8:	7a 83       	std	Y+2, r23	; 0x02
     1ea:	69 83       	std	Y+1, r22	; 0x01
	volatile int i;

	for ( ; us; us -- )
     1ec:	12 c0       	rjmp	.+36     	; 0x212 <us_delay+0x3a>
		for ( i = 0; i < 4; i ++ );
     1ee:	1c 82       	std	Y+4, r1	; 0x04
     1f0:	1b 82       	std	Y+3, r1	; 0x03
     1f2:	05 c0       	rjmp	.+10     	; 0x1fe <us_delay+0x26>
     1f4:	8b 81       	ldd	r24, Y+3	; 0x03
     1f6:	9c 81       	ldd	r25, Y+4	; 0x04
     1f8:	01 96       	adiw	r24, 0x01	; 1
     1fa:	9c 83       	std	Y+4, r25	; 0x04
     1fc:	8b 83       	std	Y+3, r24	; 0x03
     1fe:	8b 81       	ldd	r24, Y+3	; 0x03
     200:	9c 81       	ldd	r25, Y+4	; 0x04
     202:	84 30       	cpi	r24, 0x04	; 4
     204:	91 05       	cpc	r25, r1
     206:	b4 f3       	brlt	.-20     	; 0x1f4 <us_delay+0x1c>
void us_delay ( double delay )
{
	volatile int us = delay;
	volatile int i;

	for ( ; us; us -- )
     208:	89 81       	ldd	r24, Y+1	; 0x01
     20a:	9a 81       	ldd	r25, Y+2	; 0x02
     20c:	01 97       	sbiw	r24, 0x01	; 1
     20e:	9a 83       	std	Y+2, r25	; 0x02
     210:	89 83       	std	Y+1, r24	; 0x01
     212:	89 81       	ldd	r24, Y+1	; 0x01
     214:	9a 81       	ldd	r25, Y+2	; 0x02
     216:	00 97       	sbiw	r24, 0x00	; 0
     218:	51 f7       	brne	.-44     	; 0x1ee <us_delay+0x16>
		for ( i = 0; i < 4; i ++ );
}
     21a:	0f 90       	pop	r0
     21c:	0f 90       	pop	r0
     21e:	0f 90       	pop	r0
     220:	0f 90       	pop	r0
     222:	cf 91       	pop	r28
     224:	df 91       	pop	r29
     226:	08 95       	ret

00000228 <read_sector>:

#include "fat32.h"
#include <stdlib.h>

void * read_sector ( unsigned long sector_address, void *buf )
{
     228:	0f 93       	push	r16
     22a:	1f 93       	push	r17
     22c:	8a 01       	movw	r16, r20
	fat -> read_single_block ( sector_address, ( unsigned char * ) buf );
     22e:	e0 91 6c 01 	lds	r30, 0x016C
     232:	f0 91 6d 01 	lds	r31, 0x016D
     236:	02 88       	ldd	r0, Z+18	; 0x12
     238:	f3 89       	ldd	r31, Z+19	; 0x13
     23a:	e0 2d       	mov	r30, r0
     23c:	09 95       	icall
	return buf;
}
     23e:	c8 01       	movw	r24, r16
     240:	1f 91       	pop	r17
     242:	0f 91       	pop	r16
     244:	08 95       	ret

00000246 <fat32_init>:

unsigned char fat32_init ( void )
{
     246:	cf 92       	push	r12
     248:	df 92       	push	r13
     24a:	ef 92       	push	r14
     24c:	ff 92       	push	r15
     24e:	0f 93       	push	r16
     250:	1f 93       	push	r17
     252:	cf 93       	push	r28
     254:	df 93       	push	r29
	boot_sector *bpb;
	partition_info *mbr;
	first_partition_info *partition;

	bpb = ( boot_sector * ) read_sector ( 0, malloc ( 512 ) );
     256:	80 e0       	ldi	r24, 0x00	; 0
     258:	92 e0       	ldi	r25, 0x02	; 2
     25a:	0e 94 38 08 	call	0x1070	; 0x1070 <malloc>
     25e:	ac 01       	movw	r20, r24
     260:	60 e0       	ldi	r22, 0x00	; 0
     262:	70 e0       	ldi	r23, 0x00	; 0
     264:	cb 01       	movw	r24, r22
     266:	0e 94 14 01 	call	0x228	; 0x228 <read_sector>
     26a:	e8 2e       	mov	r14, r24
     26c:	e7 01       	movw	r28, r14
     26e:	7e 01       	movw	r14, r28
     270:	f9 2e       	mov	r15, r25
     272:	e7 01       	movw	r28, r14

	if ( ( bpb -> jumpboot [ 0 ] != 0xE9 ) && ( bpb -> jumpboot [ 0 ] != 0xEB ) )   //check if it is boot sector
     274:	88 81       	ld	r24, Y
     276:	89 3e       	cpi	r24, 0xE9	; 233
     278:	19 f1       	breq	.+70     	; 0x2c0 <fat32_init+0x7a>
     27a:	8b 3e       	cpi	r24, 0xEB	; 235
     27c:	09 f1       	breq	.+66     	; 0x2c0 <fat32_init+0x7a>
	{																			    //otherwise it must be mbr
		mbr = ( partition_info * ) bpb;
  		
		if ( mbr -> signature != 0xaa55 ) 
     27e:	f7 01       	movw	r30, r14
     280:	e2 50       	subi	r30, 0x02	; 2
     282:	fe 4f       	sbci	r31, 0xFE	; 254
     284:	80 81       	ld	r24, Z
     286:	91 81       	ldd	r25, Z+1	; 0x01
     288:	3a ea       	ldi	r19, 0xAA	; 170
     28a:	85 35       	cpi	r24, 0x55	; 85
     28c:	93 07       	cpc	r25, r19
     28e:	09 f0       	breq	.+2      	; 0x292 <fat32_init+0x4c>
     290:	54 c0       	rjmp	.+168    	; 0x33a <fat32_init+0xf4>
			return 1;       													     //not FAT32
		else;

		partition = ( first_partition_info * )( mbr -> partitiondata );			     //first partition
  		fat -> first_used_sector = partition -> firstsector; 								     //the unused sectors, hidden to the FAT	
     292:	f7 01       	movw	r30, r14
     294:	e2 54       	subi	r30, 0x42	; 66
     296:	fe 4f       	sbci	r31, 0xFE	; 254
     298:	60 85       	ldd	r22, Z+8	; 0x08
     29a:	71 85       	ldd	r23, Z+9	; 0x09
     29c:	82 85       	ldd	r24, Z+10	; 0x0a
     29e:	93 85       	ldd	r25, Z+11	; 0x0b
     2a0:	e0 91 6c 01 	lds	r30, 0x016C
     2a4:	f0 91 6d 01 	lds	r31, 0x016D
     2a8:	60 83       	st	Z, r22
     2aa:	71 83       	std	Z+1, r23	; 0x01
     2ac:	82 83       	std	Z+2, r24	; 0x02
     2ae:	93 83       	std	Z+3, r25	; 0x03
	
		read_sector ( fat -> first_used_sector, bpb );
     2b0:	a7 01       	movw	r20, r14
     2b2:	0e 94 14 01 	call	0x228	; 0x228 <read_sector>
		
		if ( ( bpb -> jumpboot [ 0 ] != 0xE9 ) && ( bpb -> jumpboot [ 0 ] != 0xEB ) ) 
     2b6:	88 81       	ld	r24, Y
     2b8:	89 3e       	cpi	r24, 0xE9	; 233
     2ba:	11 f0       	breq	.+4      	; 0x2c0 <fat32_init+0x7a>
     2bc:	8b 3e       	cpi	r24, 0xEB	; 235
     2be:	e9 f5       	brne	.+122    	; 0x33a <fat32_init+0xf4>
			return 1;
		else;
	}else;

	fat -> bytes_per_sector = bpb -> bytespersector;
     2c0:	00 91 6c 01 	lds	r16, 0x016C
     2c4:	10 91 6d 01 	lds	r17, 0x016D
     2c8:	8b 85       	ldd	r24, Y+11	; 0x0b
     2ca:	9c 85       	ldd	r25, Y+12	; 0x0c
     2cc:	f8 01       	movw	r30, r16
     2ce:	95 87       	std	Z+13, r25	; 0x0d
     2d0:	84 87       	std	Z+12, r24	; 0x0c
	fat -> sector_per_cluster = bpb -> sectorpercluster;
     2d2:	8d 85       	ldd	r24, Y+13	; 0x0d
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	97 87       	std	Z+15, r25	; 0x0f
     2d8:	86 87       	std	Z+14, r24	; 0x0e
	fat -> reserved_sector_count = bpb -> reservedsectorcount;
     2da:	8e 85       	ldd	r24, Y+14	; 0x0e
     2dc:	9f 85       	ldd	r25, Y+15	; 0x0f
     2de:	91 8b       	std	Z+17, r25	; 0x11
     2e0:	80 8b       	std	Z+16, r24	; 0x10
	fat -> root_cluster = bpb -> rootcluster;
     2e2:	8c a5       	ldd	r24, Y+44	; 0x2c
     2e4:	9d a5       	ldd	r25, Y+45	; 0x2d
     2e6:	ae a5       	ldd	r26, Y+46	; 0x2e
     2e8:	bf a5       	ldd	r27, Y+47	; 0x2f
     2ea:	80 87       	std	Z+8, r24	; 0x08
     2ec:	91 87       	std	Z+9, r25	; 0x09
     2ee:	a2 87       	std	Z+10, r26	; 0x0a
     2f0:	b3 87       	std	Z+11, r27	; 0x0b
	fat -> first_data_sector = bpb -> hiddensectors + fat -> reserved_sector_count + ( bpb -> numberoffats * bpb -> fatsize_f32 );
     2f2:	c0 88       	ldd	r12, Z+16	; 0x10
     2f4:	d1 88       	ldd	r13, Z+17	; 0x11
     2f6:	ee 24       	eor	r14, r14
     2f8:	ff 24       	eor	r15, r15
     2fa:	8c 8d       	ldd	r24, Y+28	; 0x1c
     2fc:	9d 8d       	ldd	r25, Y+29	; 0x1d
     2fe:	ae 8d       	ldd	r26, Y+30	; 0x1e
     300:	bf 8d       	ldd	r27, Y+31	; 0x1f
     302:	c8 0e       	add	r12, r24
     304:	d9 1e       	adc	r13, r25
     306:	ea 1e       	adc	r14, r26
     308:	fb 1e       	adc	r15, r27
     30a:	68 89       	ldd	r22, Y+16	; 0x10
     30c:	70 e0       	ldi	r23, 0x00	; 0
     30e:	80 e0       	ldi	r24, 0x00	; 0
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	2c a1       	ldd	r18, Y+36	; 0x24
     314:	3d a1       	ldd	r19, Y+37	; 0x25
     316:	4e a1       	ldd	r20, Y+38	; 0x26
     318:	5f a1       	ldd	r21, Y+39	; 0x27
     31a:	0e 94 c0 07 	call	0xf80	; 0xf80 <__mulsi3>
     31e:	c6 0e       	add	r12, r22
     320:	d7 1e       	adc	r13, r23
     322:	e8 1e       	adc	r14, r24
     324:	f9 1e       	adc	r15, r25
     326:	f8 01       	movw	r30, r16
     328:	c4 82       	std	Z+4, r12	; 0x04
     32a:	d5 82       	std	Z+5, r13	; 0x05
     32c:	e6 82       	std	Z+6, r14	; 0x06
     32e:	f7 82       	std	Z+7, r15	; 0x07

	free ( bpb );
     330:	ce 01       	movw	r24, r28
     332:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <free>

	return 0;
     336:	80 e0       	ldi	r24, 0x00	; 0
     338:	01 c0       	rjmp	.+2      	; 0x33c <fat32_init+0xf6>
  		fat -> first_used_sector = partition -> firstsector; 								     //the unused sectors, hidden to the FAT	
	
		read_sector ( fat -> first_used_sector, bpb );
		
		if ( ( bpb -> jumpboot [ 0 ] != 0xE9 ) && ( bpb -> jumpboot [ 0 ] != 0xEB ) ) 
			return 1;
     33a:	81 e0       	ldi	r24, 0x01	; 1

	free ( bpb );

	return 0;

}
     33c:	df 91       	pop	r29
     33e:	cf 91       	pop	r28
     340:	1f 91       	pop	r17
     342:	0f 91       	pop	r16
     344:	ff 90       	pop	r15
     346:	ef 90       	pop	r14
     348:	df 90       	pop	r13
     34a:	cf 90       	pop	r12
     34c:	08 95       	ret

0000034e <first_sector_of_cluster>:

unsigned long first_sector_of_cluster ( unsigned long cluster_number )
{
     34e:	ef 92       	push	r14
     350:	ff 92       	push	r15
     352:	0f 93       	push	r16
     354:	1f 93       	push	r17
  return ( ( ( cluster_number - 2 ) * fat -> sector_per_cluster ) + fat -> first_data_sector );
     356:	e0 91 6c 01 	lds	r30, 0x016C
     35a:	f0 91 6d 01 	lds	r31, 0x016D
     35e:	26 85       	ldd	r18, Z+14	; 0x0e
     360:	37 85       	ldd	r19, Z+15	; 0x0f
     362:	e4 80       	ldd	r14, Z+4	; 0x04
     364:	f5 80       	ldd	r15, Z+5	; 0x05
     366:	06 81       	ldd	r16, Z+6	; 0x06
     368:	17 81       	ldd	r17, Z+7	; 0x07
     36a:	62 50       	subi	r22, 0x02	; 2
     36c:	70 40       	sbci	r23, 0x00	; 0
     36e:	80 40       	sbci	r24, 0x00	; 0
     370:	90 40       	sbci	r25, 0x00	; 0
     372:	40 e0       	ldi	r20, 0x00	; 0
     374:	50 e0       	ldi	r21, 0x00	; 0
     376:	0e 94 c0 07 	call	0xf80	; 0xf80 <__mulsi3>
     37a:	9b 01       	movw	r18, r22
     37c:	ac 01       	movw	r20, r24
     37e:	2e 0d       	add	r18, r14
     380:	3f 1d       	adc	r19, r15
     382:	40 1f       	adc	r20, r16
     384:	51 1f       	adc	r21, r17
}
     386:	b9 01       	movw	r22, r18
     388:	ca 01       	movw	r24, r20
     38a:	1f 91       	pop	r17
     38c:	0f 91       	pop	r16
     38e:	ff 90       	pop	r15
     390:	ef 90       	pop	r14
     392:	08 95       	ret

00000394 <next_cluster_number>:
	}
	return 0;
}

unsigned long next_cluster_number ( unsigned long current_cluster_number )
{
     394:	8f 92       	push	r8
     396:	9f 92       	push	r9
     398:	af 92       	push	r10
     39a:	bf 92       	push	r11
     39c:	cf 92       	push	r12
     39e:	df 92       	push	r13
     3a0:	ef 92       	push	r14
     3a2:	ff 92       	push	r15
     3a4:	0f 93       	push	r16
     3a6:	1f 93       	push	r17
     3a8:	cf 93       	push	r28
     3aa:	df 93       	push	r29
     3ac:	5b 01       	movw	r10, r22
     3ae:	6c 01       	movw	r12, r24
	unsigned int offset_of_current_cluster;
	unsigned char *sector_data;
	unsigned long *fat_sector_data;
	unsigned long next_cluster;

	fat_sector_for_current_cluster = fat -> first_used_sector + fat -> reserved_sector_count 
     3b0:	c0 91 6c 01 	lds	r28, 0x016C
     3b4:	d0 91 6d 01 	lds	r29, 0x016D
     3b8:	e8 88       	ldd	r14, Y+16	; 0x10
     3ba:	f9 88       	ldd	r15, Y+17	; 0x11
									 + ( ( current_cluster_number * 4 ) / fat -> bytes_per_sector );
     3bc:	82 e0       	ldi	r24, 0x02	; 2
     3be:	aa 0c       	add	r10, r10
     3c0:	bb 1c       	adc	r11, r11
     3c2:	cc 1c       	adc	r12, r12
     3c4:	dd 1c       	adc	r13, r13
     3c6:	8a 95       	dec	r24
     3c8:	d1 f7       	brne	.-12     	; 0x3be <next_cluster_number+0x2a>
     3ca:	2c 85       	ldd	r18, Y+12	; 0x0c
     3cc:	3d 85       	ldd	r19, Y+13	; 0x0d
	unsigned int offset_of_current_cluster;
	unsigned char *sector_data;
	unsigned long *fat_sector_data;
	unsigned long next_cluster;

	fat_sector_for_current_cluster = fat -> first_used_sector + fat -> reserved_sector_count 
     3ce:	00 e0       	ldi	r16, 0x00	; 0
     3d0:	10 e0       	ldi	r17, 0x00	; 0
     3d2:	88 81       	ld	r24, Y
     3d4:	99 81       	ldd	r25, Y+1	; 0x01
     3d6:	aa 81       	ldd	r26, Y+2	; 0x02
     3d8:	bb 81       	ldd	r27, Y+3	; 0x03
     3da:	e8 0e       	add	r14, r24
     3dc:	f9 1e       	adc	r15, r25
     3de:	0a 1f       	adc	r16, r26
     3e0:	1b 1f       	adc	r17, r27
									 + ( ( current_cluster_number * 4 ) / fat -> bytes_per_sector );
     3e2:	40 e0       	ldi	r20, 0x00	; 0
     3e4:	50 e0       	ldi	r21, 0x00	; 0
     3e6:	c6 01       	movw	r24, r12
     3e8:	b5 01       	movw	r22, r10
     3ea:	0e 94 df 07 	call	0xfbe	; 0xfbe <__udivmodsi4>
	unsigned int offset_of_current_cluster;
	unsigned char *sector_data;
	unsigned long *fat_sector_data;
	unsigned long next_cluster;

	fat_sector_for_current_cluster = fat -> first_used_sector + fat -> reserved_sector_count 
     3ee:	e2 0e       	add	r14, r18
     3f0:	f3 1e       	adc	r15, r19
     3f2:	04 1f       	adc	r16, r20
     3f4:	15 1f       	adc	r17, r21
									 + ( ( current_cluster_number * 4 ) / fat -> bytes_per_sector );
	offset_of_current_cluster = ( unsigned int ) ( ( current_cluster_number * 4 ) % fat -> bytes_per_sector );
     3f6:	8c 84       	ldd	r8, Y+12	; 0x0c
     3f8:	9d 84       	ldd	r9, Y+13	; 0x0d

	sector_data = ( unsigned char * ) read_sector ( 
     3fa:	8c 85       	ldd	r24, Y+12	; 0x0c
     3fc:	9d 85       	ldd	r25, Y+13	; 0x0d
     3fe:	0e 94 38 08 	call	0x1070	; 0x1070 <malloc>
     402:	ac 01       	movw	r20, r24
     404:	c8 01       	movw	r24, r16
     406:	b7 01       	movw	r22, r14
     408:	0e 94 14 01 	call	0x228	; 0x228 <read_sector>
     40c:	e8 2e       	mov	r14, r24
     40e:	e7 01       	movw	r28, r14
     410:	7e 01       	movw	r14, r28
     412:	f9 2e       	mov	r15, r25
     414:	e7 01       	movw	r28, r14
	unsigned long *fat_sector_data;
	unsigned long next_cluster;

	fat_sector_for_current_cluster = fat -> first_used_sector + fat -> reserved_sector_count 
									 + ( ( current_cluster_number * 4 ) / fat -> bytes_per_sector );
	offset_of_current_cluster = ( unsigned int ) ( ( current_cluster_number * 4 ) % fat -> bytes_per_sector );
     416:	94 01       	movw	r18, r8
     418:	40 e0       	ldi	r20, 0x00	; 0
     41a:	50 e0       	ldi	r21, 0x00	; 0
     41c:	c6 01       	movw	r24, r12
     41e:	b5 01       	movw	r22, r10
     420:	0e 94 df 07 	call	0xfbe	; 0xfbe <__udivmodsi4>
														    fat_sector_for_current_cluster,
															malloc ( fat -> bytes_per_sector )
							    		   		   );	
	fat_sector_data = ( unsigned long * ) &sector_data [ offset_of_current_cluster ];

	next_cluster = ( ( *fat_sector_data ) & 0x0fffffff );
     424:	6e 0d       	add	r22, r14
     426:	7f 1d       	adc	r23, r15
     428:	db 01       	movw	r26, r22
     42a:	ed 90       	ld	r14, X+
     42c:	fd 90       	ld	r15, X+
     42e:	0d 91       	ld	r16, X+
     430:	1c 91       	ld	r17, X
     432:	8f ef       	ldi	r24, 0xFF	; 255
     434:	9f ef       	ldi	r25, 0xFF	; 255
     436:	af ef       	ldi	r26, 0xFF	; 255
     438:	bf e0       	ldi	r27, 0x0F	; 15
     43a:	e8 22       	and	r14, r24
     43c:	f9 22       	and	r15, r25
     43e:	0a 23       	and	r16, r26
     440:	1b 23       	and	r17, r27

	free ( sector_data );
     442:	ce 01       	movw	r24, r28
     444:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <free>

	return next_cluster;

}
     448:	b7 01       	movw	r22, r14
     44a:	c8 01       	movw	r24, r16
     44c:	df 91       	pop	r29
     44e:	cf 91       	pop	r28
     450:	1f 91       	pop	r17
     452:	0f 91       	pop	r16
     454:	ff 90       	pop	r15
     456:	ef 90       	pop	r14
     458:	df 90       	pop	r13
     45a:	cf 90       	pop	r12
     45c:	bf 90       	pop	r11
     45e:	af 90       	pop	r10
     460:	9f 90       	pop	r9
     462:	8f 90       	pop	r8
     464:	08 95       	ret

00000466 <first_cluster_of_file>:
{
  return ( ( ( cluster_number - 2 ) * fat -> sector_per_cluster ) + fat -> first_data_sector );
}

unsigned long first_cluster_of_file ( char *f_name )
{
     466:	4f 92       	push	r4
     468:	5f 92       	push	r5
     46a:	6f 92       	push	r6
     46c:	7f 92       	push	r7
     46e:	8f 92       	push	r8
     470:	9f 92       	push	r9
     472:	af 92       	push	r10
     474:	bf 92       	push	r11
     476:	cf 92       	push	r12
     478:	df 92       	push	r13
     47a:	ef 92       	push	r14
     47c:	ff 92       	push	r15
     47e:	0f 93       	push	r16
     480:	1f 93       	push	r17
     482:	cf 93       	push	r28
     484:	df 93       	push	r29
     486:	58 2e       	mov	r5, r24
     488:	49 2e       	mov	r4, r25
	unsigned long cluster_number, sector_number;
	unsigned long first_cluster;
	int i, j;
	fs_dir *dir;

	cluster_number = fat -> root_cluster;
     48a:	e0 91 6c 01 	lds	r30, 0x016C
     48e:	f0 91 6d 01 	lds	r31, 0x016D
     492:	a0 84       	ldd	r10, Z+8	; 0x08
     494:	b1 84       	ldd	r11, Z+9	; 0x09
     496:	c2 84       	ldd	r12, Z+10	; 0x0a
     498:	d3 84       	ldd	r13, Z+11	; 0x0b

	while ( cluster_number < 0x0ffffff6 )
     49a:	5c c0       	rjmp	.+184    	; 0x554 <first_cluster_of_file+0xee>
	{	
		for ( sector_number = 0; sector_number < fat -> sector_per_cluster; sector_number ++ )
   		{	
			dir = ( fs_dir * ) read_sector ( 
												(
													first_sector_of_cluster ( cluster_number )
     49c:	c6 01       	movw	r24, r12
     49e:	b5 01       	movw	r22, r10
     4a0:	0e 94 a7 01 	call	0x34e	; 0x34e <first_sector_of_cluster>
     4a4:	3b 01       	movw	r6, r22
     4a6:	4c 01       	movw	r8, r24
													+ sector_number
												),
												malloc ( fat -> bytes_per_sector )
     4a8:	e0 91 6c 01 	lds	r30, 0x016C
     4ac:	f0 91 6d 01 	lds	r31, 0x016D

	while ( cluster_number < 0x0ffffff6 )
	{	
		for ( sector_number = 0; sector_number < fat -> sector_per_cluster; sector_number ++ )
   		{	
			dir = ( fs_dir * ) read_sector ( 
     4b0:	84 85       	ldd	r24, Z+12	; 0x0c
     4b2:	95 85       	ldd	r25, Z+13	; 0x0d
     4b4:	0e 94 38 08 	call	0x1070	; 0x1070 <malloc>
     4b8:	ac 01       	movw	r20, r24
     4ba:	c4 01       	movw	r24, r8
     4bc:	b3 01       	movw	r22, r6
     4be:	6e 0d       	add	r22, r14
     4c0:	7f 1d       	adc	r23, r15
     4c2:	80 1f       	adc	r24, r16
     4c4:	91 1f       	adc	r25, r17
     4c6:	0e 94 14 01 	call	0x228	; 0x228 <read_sector>
     4ca:	e8 2f       	mov	r30, r24
     4cc:	f9 2f       	mov	r31, r25
unsigned long first_sector_of_cluster ( unsigned long cluster_number )
{
  return ( ( ( cluster_number - 2 ) * fat -> sector_per_cluster ) + fat -> first_data_sector );
}

unsigned long first_cluster_of_file ( char *f_name )
     4ce:	9f 01       	movw	r18, r30
     4d0:	20 50       	subi	r18, 0x00	; 0
     4d2:	3e 4f       	sbci	r19, 0xFE	; 254
     4d4:	1c c0       	rjmp	.+56     	; 0x50e <first_cluster_of_file+0xa8>
												malloc ( fat -> bytes_per_sector )
							    		   );

			for ( i = 0; i < 16; i ++ )
		    {
				for ( j = 0; f_name [ j ] == dir [ i ] . name [ j ]; j ++ );
     4d6:	49 91       	ld	r20, Y+
     4d8:	5d 91       	ld	r21, X+
     4da:	45 17       	cp	r20, r21
     4dc:	e1 f3       	breq	.-8      	; 0x4d6 <first_cluster_of_file+0x70>

				if ( ! f_name [ j ] )
     4de:	44 23       	and	r20, r20
     4e0:	91 f4       	brne	.+36     	; 0x506 <first_cluster_of_file+0xa0>
				{
					first_cluster = ( ( ( ( unsigned long ) dir [ i ] . firstclusterhi ) << 16 ) | dir [ i ] . firstclusterlo );
     4e2:	e4 88       	ldd	r14, Z+20	; 0x14
     4e4:	f5 88       	ldd	r15, Z+21	; 0x15
     4e6:	00 e0       	ldi	r16, 0x00	; 0
     4e8:	10 e0       	ldi	r17, 0x00	; 0
     4ea:	87 01       	movw	r16, r14
     4ec:	ff 24       	eor	r15, r15
     4ee:	ee 24       	eor	r14, r14
     4f0:	22 8d       	ldd	r18, Z+26	; 0x1a
     4f2:	33 8d       	ldd	r19, Z+27	; 0x1b
     4f4:	40 e0       	ldi	r20, 0x00	; 0
     4f6:	50 e0       	ldi	r21, 0x00	; 0
     4f8:	e2 2a       	or	r14, r18
     4fa:	f3 2a       	or	r15, r19
     4fc:	04 2b       	or	r16, r20
     4fe:	15 2b       	or	r17, r21
					free ( dir );
     500:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <free>
					return first_cluster;
     504:	37 c0       	rjmp	.+110    	; 0x574 <first_cluster_of_file+0x10e>
     506:	b0 96       	adiw	r30, 0x20	; 32
													+ sector_number
												),
												malloc ( fat -> bytes_per_sector )
							    		   );

			for ( i = 0; i < 16; i ++ )
     508:	e2 17       	cp	r30, r18
     50a:	f3 07       	cpc	r31, r19
     50c:	41 f0       	breq	.+16     	; 0x51e <first_cluster_of_file+0xb8>
     50e:	a2 01       	movw	r20, r4
     510:	85 2e       	mov	r8, r21
     512:	e4 01       	movw	r28, r8
     514:	4e 01       	movw	r8, r28
     516:	94 2c       	mov	r9, r4
     518:	e4 01       	movw	r28, r8
{
  return ( ( ( cluster_number - 2 ) * fat -> sector_per_cluster ) + fat -> first_data_sector );
}

unsigned long first_cluster_of_file ( char *f_name )
{
     51a:	df 01       	movw	r26, r30
     51c:	dc cf       	rjmp	.-72     	; 0x4d6 <first_cluster_of_file+0x70>
					free ( dir );
					return first_cluster;
				}
				else;
			}
			free ( dir );
     51e:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <free>

	cluster_number = fat -> root_cluster;

	while ( cluster_number < 0x0ffffff6 )
	{	
		for ( sector_number = 0; sector_number < fat -> sector_per_cluster; sector_number ++ )
     522:	08 94       	sec
     524:	e1 1c       	adc	r14, r1
     526:	f1 1c       	adc	r15, r1
     528:	01 1d       	adc	r16, r1
     52a:	11 1d       	adc	r17, r1
     52c:	e0 91 6c 01 	lds	r30, 0x016C
     530:	f0 91 6d 01 	lds	r31, 0x016D
     534:	86 85       	ldd	r24, Z+14	; 0x0e
     536:	97 85       	ldd	r25, Z+15	; 0x0f
     538:	a0 e0       	ldi	r26, 0x00	; 0
     53a:	b0 e0       	ldi	r27, 0x00	; 0
     53c:	e8 16       	cp	r14, r24
     53e:	f9 06       	cpc	r15, r25
     540:	0a 07       	cpc	r16, r26
     542:	1b 07       	cpc	r17, r27
     544:	08 f4       	brcc	.+2      	; 0x548 <first_cluster_of_file+0xe2>
     546:	aa cf       	rjmp	.-172    	; 0x49c <first_cluster_of_file+0x36>
				}
				else;
			}
			free ( dir );
		}
		cluster_number = next_cluster_number ( cluster_number );
     548:	c6 01       	movw	r24, r12
     54a:	b5 01       	movw	r22, r10
     54c:	0e 94 ca 01 	call	0x394	; 0x394 <next_cluster_number>
     550:	5b 01       	movw	r10, r22
     552:	6c 01       	movw	r12, r24
	int i, j;
	fs_dir *dir;

	cluster_number = fat -> root_cluster;

	while ( cluster_number < 0x0ffffff6 )
     554:	66 ef       	ldi	r22, 0xF6	; 246
     556:	a6 16       	cp	r10, r22
     558:	6f ef       	ldi	r22, 0xFF	; 255
     55a:	b6 06       	cpc	r11, r22
     55c:	6f ef       	ldi	r22, 0xFF	; 255
     55e:	c6 06       	cpc	r12, r22
     560:	6f e0       	ldi	r22, 0x0F	; 15
     562:	d6 06       	cpc	r13, r22
     564:	20 f4       	brcc	.+8      	; 0x56e <first_cluster_of_file+0x108>
     566:	ee 24       	eor	r14, r14
     568:	ff 24       	eor	r15, r15
     56a:	87 01       	movw	r16, r14
     56c:	df cf       	rjmp	.-66     	; 0x52c <first_cluster_of_file+0xc6>
			}
			free ( dir );
		}
		cluster_number = next_cluster_number ( cluster_number );
	}
	return 0;
     56e:	ee 24       	eor	r14, r14
     570:	ff 24       	eor	r15, r15
     572:	87 01       	movw	r16, r14
}
     574:	b7 01       	movw	r22, r14
     576:	c8 01       	movw	r24, r16
     578:	df 91       	pop	r29
     57a:	cf 91       	pop	r28
     57c:	1f 91       	pop	r17
     57e:	0f 91       	pop	r16
     580:	ff 90       	pop	r15
     582:	ef 90       	pop	r14
     584:	df 90       	pop	r13
     586:	cf 90       	pop	r12
     588:	bf 90       	pop	r11
     58a:	af 90       	pop	r10
     58c:	9f 90       	pop	r9
     58e:	8f 90       	pop	r8
     590:	7f 90       	pop	r7
     592:	6f 90       	pop	r6
     594:	5f 90       	pop	r5
     596:	4f 90       	pop	r4
     598:	08 95       	ret

0000059a <read_file>:
	return next_cluster;

}

unsigned char read_file ( char *f_name )
{
     59a:	2f 92       	push	r2
     59c:	3f 92       	push	r3
     59e:	4f 92       	push	r4
     5a0:	5f 92       	push	r5
     5a2:	6f 92       	push	r6
     5a4:	7f 92       	push	r7
     5a6:	8f 92       	push	r8
     5a8:	9f 92       	push	r9
     5aa:	af 92       	push	r10
     5ac:	bf 92       	push	r11
     5ae:	cf 92       	push	r12
     5b0:	df 92       	push	r13
     5b2:	ef 92       	push	r14
     5b4:	ff 92       	push	r15
     5b6:	0f 93       	push	r16
     5b8:	1f 93       	push	r17
     5ba:	cf 93       	push	r28
     5bc:	df 93       	push	r29
	unsigned long cluster, first_sector;
	int i, j;
	char *data;

	cluster = first_cluster_of_file ( f_name );
     5be:	0e 94 33 02 	call	0x466	; 0x466 <first_cluster_of_file>
     5c2:	5b 01       	movw	r10, r22
     5c4:	6c 01       	movw	r12, r24

	while ( 1 )
	{
		first_sector = first_sector_of_cluster ( cluster );
     5c6:	0e 94 a7 01 	call	0x34e	; 0x34e <first_sector_of_cluster>
     5ca:	1b 01       	movw	r2, r22
     5cc:	2c 01       	movw	r4, r24
	
		for ( i = 0; i < fat -> sector_per_cluster; i ++ )
     5ce:	7b 01       	movw	r14, r22
     5d0:	8c 01       	movw	r16, r24
     5d2:	45 c0       	rjmp	.+138    	; 0x65e <read_file+0xc4>
	  	{
	    	data = ( char * ) read_sector ( first_sector + i, malloc ( fat -> bytes_per_sector ) );
     5d4:	84 85       	ldd	r24, Z+12	; 0x0c
     5d6:	95 85       	ldd	r25, Z+13	; 0x0d
     5d8:	0e 94 38 08 	call	0x1070	; 0x1070 <malloc>
     5dc:	ac 01       	movw	r20, r24
     5de:	c8 01       	movw	r24, r16
     5e0:	b7 01       	movw	r22, r14
     5e2:	0e 94 14 01 	call	0x228	; 0x228 <read_sector>
     5e6:	98 2e       	mov	r9, r24
     5e8:	89 2e       	mov	r8, r25
     5ea:	c4 01       	movw	r24, r8
     5ec:	69 2e       	mov	r6, r25
     5ee:	78 2e       	mov	r7, r24

			for ( j = 0; j < fat -> bytes_per_sector; j ++ )
     5f0:	c0 e0       	ldi	r28, 0x00	; 0
     5f2:	d0 e0       	ldi	r29, 0x00	; 0
     5f4:	22 c0       	rjmp	.+68     	; 0x63a <read_file+0xa0>
			{
				if ( 0 == data [ j ] )
     5f6:	d3 01       	movw	r26, r6
     5f8:	8d 91       	ld	r24, X+
     5fa:	3d 01       	movw	r6, r26
     5fc:	88 23       	and	r24, r24
     5fe:	c1 f4       	brne	.+48     	; 0x630 <read_file+0x96>
				{
					free ( data );
     600:	89 2d       	mov	r24, r9
     602:	98 2d       	mov	r25, r8
     604:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <free>
		}
		cluster = next_cluster_number ( cluster );

    }
	return 0;
}
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	df 91       	pop	r29
     60c:	cf 91       	pop	r28
     60e:	1f 91       	pop	r17
     610:	0f 91       	pop	r16
     612:	ff 90       	pop	r15
     614:	ef 90       	pop	r14
     616:	df 90       	pop	r13
     618:	cf 90       	pop	r12
     61a:	bf 90       	pop	r11
     61c:	af 90       	pop	r10
     61e:	9f 90       	pop	r9
     620:	8f 90       	pop	r8
     622:	7f 90       	pop	r7
     624:	6f 90       	pop	r6
     626:	5f 90       	pop	r5
     628:	4f 90       	pop	r4
     62a:	3f 90       	pop	r3
     62c:	2f 90       	pop	r2
     62e:	08 95       	ret
				if ( 0 == data [ j ] )
				{
					free ( data );
					return 0;
				}else;
				fat -> send_data_byte ( data [ j ] );
     630:	04 88       	ldd	r0, Z+20	; 0x14
     632:	f5 89       	ldd	r31, Z+21	; 0x15
     634:	e0 2d       	mov	r30, r0
     636:	09 95       	icall
	
		for ( i = 0; i < fat -> sector_per_cluster; i ++ )
	  	{
	    	data = ( char * ) read_sector ( first_sector + i, malloc ( fat -> bytes_per_sector ) );

			for ( j = 0; j < fat -> bytes_per_sector; j ++ )
     638:	21 96       	adiw	r28, 0x01	; 1
     63a:	e0 91 6c 01 	lds	r30, 0x016C
     63e:	f0 91 6d 01 	lds	r31, 0x016D
     642:	84 85       	ldd	r24, Z+12	; 0x0c
     644:	95 85       	ldd	r25, Z+13	; 0x0d
     646:	c8 17       	cp	r28, r24
     648:	d9 07       	cpc	r29, r25
     64a:	a8 f2       	brcs	.-86     	; 0x5f6 <read_file+0x5c>
					free ( data );
					return 0;
				}else;
				fat -> send_data_byte ( data [ j ] );
			}
			free ( data );
     64c:	89 2d       	mov	r24, r9
     64e:	98 2d       	mov	r25, r8
     650:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <free>
     654:	08 94       	sec
     656:	e1 1c       	adc	r14, r1
     658:	f1 1c       	adc	r15, r1
     65a:	01 1d       	adc	r16, r1
     65c:	11 1d       	adc	r17, r1

	while ( 1 )
	{
		first_sector = first_sector_of_cluster ( cluster );
	
		for ( i = 0; i < fat -> sector_per_cluster; i ++ )
     65e:	e0 91 6c 01 	lds	r30, 0x016C
     662:	f0 91 6d 01 	lds	r31, 0x016D
     666:	86 85       	ldd	r24, Z+14	; 0x0e
     668:	97 85       	ldd	r25, Z+15	; 0x0f
     66a:	97 01       	movw	r18, r14
     66c:	22 19       	sub	r18, r2
     66e:	33 09       	sbc	r19, r3
     670:	28 17       	cp	r18, r24
     672:	39 07       	cpc	r19, r25
     674:	08 f4       	brcc	.+2      	; 0x678 <read_file+0xde>
     676:	ae cf       	rjmp	.-164    	; 0x5d4 <read_file+0x3a>
				}else;
				fat -> send_data_byte ( data [ j ] );
			}
			free ( data );
		}
		cluster = next_cluster_number ( cluster );
     678:	c6 01       	movw	r24, r12
     67a:	b5 01       	movw	r22, r10
     67c:	0e 94 ca 01 	call	0x394	; 0x394 <next_cluster_number>
     680:	a0 cf       	rjmp	.-192    	; 0x5c2 <read_file+0x28>

00000682 <list_files>:
    }
	return 0;
}

unsigned char list_files ( void )
{
     682:	2f 92       	push	r2
     684:	3f 92       	push	r3
     686:	5f 92       	push	r5
     688:	6f 92       	push	r6
     68a:	7f 92       	push	r7
     68c:	8f 92       	push	r8
     68e:	9f 92       	push	r9
     690:	af 92       	push	r10
     692:	bf 92       	push	r11
     694:	cf 92       	push	r12
     696:	df 92       	push	r13
     698:	ef 92       	push	r14
     69a:	ff 92       	push	r15
     69c:	0f 93       	push	r16
     69e:	1f 93       	push	r17
     6a0:	df 93       	push	r29
     6a2:	cf 93       	push	r28
     6a4:	00 d0       	rcall	.+0      	; 0x6a6 <list_files+0x24>
     6a6:	0f 92       	push	r0
     6a8:	cd b7       	in	r28, 0x3d	; 61
     6aa:	de b7       	in	r29, 0x3e	; 62
	unsigned long cluster_number, sector_number;
	int i, j;
	fs_dir *dir;

	cluster_number = fat -> root_cluster;
     6ac:	e0 91 6c 01 	lds	r30, 0x016C
     6b0:	f0 91 6d 01 	lds	r31, 0x016D
     6b4:	a0 84       	ldd	r10, Z+8	; 0x08
     6b6:	b1 84       	ldd	r11, Z+9	; 0x09
     6b8:	c2 84       	ldd	r12, Z+10	; 0x0a
     6ba:	d3 84       	ldd	r13, Z+11	; 0x0b

	while ( cluster_number < 0x0ffffff6 )
     6bc:	77 c0       	rjmp	.+238    	; 0x7ac <list_files+0x12a>
	{	
		for ( sector_number = 0; sector_number < fat -> sector_per_cluster; sector_number ++ )
   		{	
			dir = ( fs_dir * ) read_sector ( 
												(
													first_sector_of_cluster ( cluster_number )
     6be:	c6 01       	movw	r24, r12
     6c0:	b5 01       	movw	r22, r10
     6c2:	0e 94 a7 01 	call	0x34e	; 0x34e <first_sector_of_cluster>
     6c6:	3b 01       	movw	r6, r22
     6c8:	4c 01       	movw	r8, r24
													+ sector_number
												),
												malloc ( fat -> bytes_per_sector )
     6ca:	e0 91 6c 01 	lds	r30, 0x016C
     6ce:	f0 91 6d 01 	lds	r31, 0x016D

	while ( cluster_number < 0x0ffffff6 )
	{	
		for ( sector_number = 0; sector_number < fat -> sector_per_cluster; sector_number ++ )
   		{	
			dir = ( fs_dir * ) read_sector ( 
     6d2:	84 85       	ldd	r24, Z+12	; 0x0c
     6d4:	95 85       	ldd	r25, Z+13	; 0x0d
     6d6:	0e 94 38 08 	call	0x1070	; 0x1070 <malloc>
     6da:	ac 01       	movw	r20, r24
     6dc:	c4 01       	movw	r24, r8
     6de:	b3 01       	movw	r22, r6
     6e0:	6e 0d       	add	r22, r14
     6e2:	7f 1d       	adc	r23, r15
     6e4:	80 1f       	adc	r24, r16
     6e6:	91 1f       	adc	r25, r17
     6e8:	0e 94 14 01 	call	0x228	; 0x228 <read_sector>
     6ec:	58 2e       	mov	r5, r24
     6ee:	65 2d       	mov	r22, r5
     6f0:	79 2f       	mov	r23, r25
     6f2:	9b 01       	movw	r18, r22

    }
	return 0;
}

unsigned char list_files ( void )
     6f4:	21 2c       	mov	r2, r1
     6f6:	42 e0       	ldi	r20, 0x02	; 2
     6f8:	34 2e       	mov	r3, r20
     6fa:	22 0e       	add	r2, r18
     6fc:	33 1e       	adc	r3, r19
												malloc ( fat -> bytes_per_sector )
							    		   );

			for ( i = 0; i < 16; i ++ )
		    {
				if ( 0x20 == dir [ i ] . attrib )
     6fe:	d9 01       	movw	r26, r18
     700:	1b 96       	adiw	r26, 0x0b	; 11
     702:	8c 91       	ld	r24, X
     704:	1b 97       	sbiw	r26, 0x0b	; 11
     706:	80 32       	cpi	r24, 0x20	; 32
     708:	81 f5       	brne	.+96     	; 0x76a <list_files+0xe8>
     70a:	39 01       	movw	r6, r18
     70c:	88 24       	eor	r8, r8
     70e:	99 24       	eor	r9, r9
				{
					for ( j = 0; j < 11; j ++ )
						fat -> send_data_byte ( dir [ i ] . name [ j ] );
     710:	e0 91 6c 01 	lds	r30, 0x016C
     714:	f0 91 6d 01 	lds	r31, 0x016D
     718:	04 88       	ldd	r0, Z+20	; 0x14
     71a:	f5 89       	ldd	r31, Z+21	; 0x15
     71c:	e0 2d       	mov	r30, r0
     71e:	d3 01       	movw	r26, r6
     720:	8d 91       	ld	r24, X+
     722:	3d 01       	movw	r6, r26
     724:	29 83       	std	Y+1, r18	; 0x01
     726:	3a 83       	std	Y+2, r19	; 0x02
     728:	9b 83       	std	Y+3, r25	; 0x03
     72a:	09 95       	icall

			for ( i = 0; i < 16; i ++ )
		    {
				if ( 0x20 == dir [ i ] . attrib )
				{
					for ( j = 0; j < 11; j ++ )
     72c:	08 94       	sec
     72e:	81 1c       	adc	r8, r1
     730:	91 1c       	adc	r9, r1
     732:	29 81       	ldd	r18, Y+1	; 0x01
     734:	3a 81       	ldd	r19, Y+2	; 0x02
     736:	9b 81       	ldd	r25, Y+3	; 0x03
     738:	bb e0       	ldi	r27, 0x0B	; 11
     73a:	8b 16       	cp	r8, r27
     73c:	91 04       	cpc	r9, r1
     73e:	41 f7       	brne	.-48     	; 0x710 <list_files+0x8e>
						fat -> send_data_byte ( dir [ i ] . name [ j ] );
					fat -> send_data_byte ( '\n' );
     740:	e0 91 6c 01 	lds	r30, 0x016C
     744:	f0 91 6d 01 	lds	r31, 0x016D
     748:	04 88       	ldd	r0, Z+20	; 0x14
     74a:	f5 89       	ldd	r31, Z+21	; 0x15
     74c:	e0 2d       	mov	r30, r0
     74e:	8a e0       	ldi	r24, 0x0A	; 10
     750:	09 95       	icall
					fat -> send_data_byte ( '\r' );
     752:	e0 91 6c 01 	lds	r30, 0x016C
     756:	f0 91 6d 01 	lds	r31, 0x016D
     75a:	04 88       	ldd	r0, Z+20	; 0x14
     75c:	f5 89       	ldd	r31, Z+21	; 0x15
     75e:	e0 2d       	mov	r30, r0
     760:	8d e0       	ldi	r24, 0x0D	; 13
     762:	09 95       	icall
     764:	9b 81       	ldd	r25, Y+3	; 0x03
     766:	3a 81       	ldd	r19, Y+2	; 0x02
     768:	29 81       	ldd	r18, Y+1	; 0x01
     76a:	20 5e       	subi	r18, 0xE0	; 224
     76c:	3f 4f       	sbci	r19, 0xFF	; 255
													+ sector_number
												),
												malloc ( fat -> bytes_per_sector )
							    		   );

			for ( i = 0; i < 16; i ++ )
     76e:	22 15       	cp	r18, r2
     770:	33 05       	cpc	r19, r3
     772:	29 f6       	brne	.-118    	; 0x6fe <list_files+0x7c>
					fat -> send_data_byte ( '\n' );
					fat -> send_data_byte ( '\r' );
				}
				else;
			}
			free ( dir );
     774:	85 2d       	mov	r24, r5
     776:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <free>

	cluster_number = fat -> root_cluster;

	while ( cluster_number < 0x0ffffff6 )
	{	
		for ( sector_number = 0; sector_number < fat -> sector_per_cluster; sector_number ++ )
     77a:	08 94       	sec
     77c:	e1 1c       	adc	r14, r1
     77e:	f1 1c       	adc	r15, r1
     780:	01 1d       	adc	r16, r1
     782:	11 1d       	adc	r17, r1
     784:	e0 91 6c 01 	lds	r30, 0x016C
     788:	f0 91 6d 01 	lds	r31, 0x016D
     78c:	86 85       	ldd	r24, Z+14	; 0x0e
     78e:	97 85       	ldd	r25, Z+15	; 0x0f
     790:	a0 e0       	ldi	r26, 0x00	; 0
     792:	b0 e0       	ldi	r27, 0x00	; 0
     794:	e8 16       	cp	r14, r24
     796:	f9 06       	cpc	r15, r25
     798:	0a 07       	cpc	r16, r26
     79a:	1b 07       	cpc	r17, r27
     79c:	08 f4       	brcc	.+2      	; 0x7a0 <list_files+0x11e>
     79e:	8f cf       	rjmp	.-226    	; 0x6be <list_files+0x3c>
				}
				else;
			}
			free ( dir );
		}
		cluster_number = next_cluster_number ( cluster_number );
     7a0:	c6 01       	movw	r24, r12
     7a2:	b5 01       	movw	r22, r10
     7a4:	0e 94 ca 01 	call	0x394	; 0x394 <next_cluster_number>
     7a8:	5b 01       	movw	r10, r22
     7aa:	6c 01       	movw	r12, r24
	int i, j;
	fs_dir *dir;

	cluster_number = fat -> root_cluster;

	while ( cluster_number < 0x0ffffff6 )
     7ac:	e6 ef       	ldi	r30, 0xF6	; 246
     7ae:	ae 16       	cp	r10, r30
     7b0:	ef ef       	ldi	r30, 0xFF	; 255
     7b2:	be 06       	cpc	r11, r30
     7b4:	ef ef       	ldi	r30, 0xFF	; 255
     7b6:	ce 06       	cpc	r12, r30
     7b8:	ef e0       	ldi	r30, 0x0F	; 15
     7ba:	de 06       	cpc	r13, r30
     7bc:	20 f4       	brcc	.+8      	; 0x7c6 <list_files+0x144>
     7be:	ee 24       	eor	r14, r14
     7c0:	ff 24       	eor	r15, r15
     7c2:	87 01       	movw	r16, r14
     7c4:	df cf       	rjmp	.-66     	; 0x784 <list_files+0x102>
			free ( dir );
		}
		cluster_number = next_cluster_number ( cluster_number );
	}
	return 0;
}
     7c6:	80 e0       	ldi	r24, 0x00	; 0
     7c8:	0f 90       	pop	r0
     7ca:	0f 90       	pop	r0
     7cc:	0f 90       	pop	r0
     7ce:	cf 91       	pop	r28
     7d0:	df 91       	pop	r29
     7d2:	1f 91       	pop	r17
     7d4:	0f 91       	pop	r16
     7d6:	ff 90       	pop	r15
     7d8:	ef 90       	pop	r14
     7da:	df 90       	pop	r13
     7dc:	cf 90       	pop	r12
     7de:	bf 90       	pop	r11
     7e0:	af 90       	pop	r10
     7e2:	9f 90       	pop	r9
     7e4:	8f 90       	pop	r8
     7e6:	7f 90       	pop	r7
     7e8:	6f 90       	pop	r6
     7ea:	5f 90       	pop	r5
     7ec:	3f 90       	pop	r3
     7ee:	2f 90       	pop	r2
     7f0:	08 95       	ret

000007f2 <dis_cmd>:
	dis_cmd ( 0x01 );
	lcd -> delay_ms ( 500 );
}
 
void dis_cmd ( char cmd_value )
{
     7f2:	1f 93       	push	r17
     7f4:	18 2f       	mov	r17, r24
	char cmd_value1;
	cmd_value1 = cmd_value & 0xF0; //mask lower nibble because PA4-PA7 pins are used. 
	lcd -> lcdcmd ( cmd_value1 ); // send to LCD
     7f6:	e0 91 6e 01 	lds	r30, 0x016E
     7fa:	f0 91 6f 01 	lds	r31, 0x016F
     7fe:	04 80       	ldd	r0, Z+4	; 0x04
     800:	f5 81       	ldd	r31, Z+5	; 0x05
     802:	e0 2d       	mov	r30, r0
     804:	80 7f       	andi	r24, 0xF0	; 240
     806:	09 95       	icall
 
	cmd_value1 = ( ( cmd_value <<4 ) & 0xF0 ); //shift 4-bit and mask
	lcd -> lcdcmd ( cmd_value1 ); // send to LCD
     808:	e0 91 6e 01 	lds	r30, 0x016E
     80c:	f0 91 6f 01 	lds	r31, 0x016F
     810:	04 80       	ldd	r0, Z+4	; 0x04
     812:	f5 81       	ldd	r31, Z+5	; 0x05
     814:	e0 2d       	mov	r30, r0
     816:	81 2f       	mov	r24, r17
     818:	82 95       	swap	r24
     81a:	80 7f       	andi	r24, 0xF0	; 240
     81c:	09 95       	icall
}
     81e:	1f 91       	pop	r17
     820:	08 95       	ret

00000822 <lcd_init>:
	lcd -> delay_ms ( 1 );
}

void lcd_init ( void ) // fuction for intialize 
{
	lcd -> lcd_port_init ();
     822:	e0 91 6e 01 	lds	r30, 0x016E
     826:	f0 91 6f 01 	lds	r31, 0x016F
     82a:	02 80       	ldd	r0, Z+2	; 0x02
     82c:	f3 81       	ldd	r31, Z+3	; 0x03
     82e:	e0 2d       	mov	r30, r0
     830:	09 95       	icall
	dis_cmd ( 0x02 ); // to initialize LCD in 4-bit mode.
     832:	82 e0       	ldi	r24, 0x02	; 2
     834:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <dis_cmd>
	dis_cmd ( 0x28 ); //to initialize LCD in 2 lines, 5X7 dots and 4bit mode.
     838:	88 e2       	ldi	r24, 0x28	; 40
     83a:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <dis_cmd>
	dis_cmd ( 0x0C );
     83e:	8c e0       	ldi	r24, 0x0C	; 12
     840:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <dis_cmd>
	dis_cmd ( 0x06 );
     844:	86 e0       	ldi	r24, 0x06	; 6
     846:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <dis_cmd>
	dis_cmd ( 0x80 );
     84a:	80 e8       	ldi	r24, 0x80	; 128
     84c:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <dis_cmd>
	dis_cmd ( 0x01 );
     850:	81 e0       	ldi	r24, 0x01	; 1
     852:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <dis_cmd>
	lcd -> delay_ms ( 500 );
     856:	e0 91 6e 01 	lds	r30, 0x016E
     85a:	f0 91 6f 01 	lds	r31, 0x016F
     85e:	01 90       	ld	r0, Z+
     860:	f0 81       	ld	r31, Z
     862:	e0 2d       	mov	r30, r0
     864:	60 e0       	ldi	r22, 0x00	; 0
     866:	70 e0       	ldi	r23, 0x00	; 0
     868:	8a ef       	ldi	r24, 0xFA	; 250
     86a:	93 e4       	ldi	r25, 0x43	; 67
     86c:	09 95       	icall
}
     86e:	08 95       	ret

00000870 <lcd_1st_line>:
	lcd -> delay_ms ( 1 );
}

void lcd_1st_line ( void )
{
	dis_cmd ( 0x80 );
     870:	80 e8       	ldi	r24, 0x80	; 128
     872:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <dis_cmd>
	lcd -> delay_ms ( 1 );
     876:	e0 91 6e 01 	lds	r30, 0x016E
     87a:	f0 91 6f 01 	lds	r31, 0x016F
     87e:	01 90       	ld	r0, Z+
     880:	f0 81       	ld	r31, Z
     882:	e0 2d       	mov	r30, r0
     884:	60 e0       	ldi	r22, 0x00	; 0
     886:	70 e0       	ldi	r23, 0x00	; 0
     888:	80 e8       	ldi	r24, 0x80	; 128
     88a:	9f e3       	ldi	r25, 0x3F	; 63
     88c:	09 95       	icall
}
     88e:	08 95       	ret

00000890 <lcd_2nd_line>:
	lcd -> delay_ms ( 10 );
}

void lcd_2nd_line ( void )
{
	dis_cmd ( 0xC0 );
     890:	80 ec       	ldi	r24, 0xC0	; 192
     892:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <dis_cmd>
	lcd -> delay_ms ( 1 );
     896:	e0 91 6e 01 	lds	r30, 0x016E
     89a:	f0 91 6f 01 	lds	r31, 0x016F
     89e:	01 90       	ld	r0, Z+
     8a0:	f0 81       	ld	r31, Z
     8a2:	e0 2d       	mov	r30, r0
     8a4:	60 e0       	ldi	r22, 0x00	; 0
     8a6:	70 e0       	ldi	r23, 0x00	; 0
     8a8:	80 e8       	ldi	r24, 0x80	; 128
     8aa:	9f e3       	ldi	r25, 0x3F	; 63
     8ac:	09 95       	icall
}
     8ae:	08 95       	ret

000008b0 <lcd_clear>:
		dis_data ( *data );
}

void lcd_clear ( void )
{
	dis_cmd ( 0x01 );
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <dis_cmd>
	lcd -> delay_ms ( 10 );
     8b6:	e0 91 6e 01 	lds	r30, 0x016E
     8ba:	f0 91 6f 01 	lds	r31, 0x016F
     8be:	01 90       	ld	r0, Z+
     8c0:	f0 81       	ld	r31, Z
     8c2:	e0 2d       	mov	r30, r0
     8c4:	60 e0       	ldi	r22, 0x00	; 0
     8c6:	70 e0       	ldi	r23, 0x00	; 0
     8c8:	80 e2       	ldi	r24, 0x20	; 32
     8ca:	91 e4       	ldi	r25, 0x41	; 65
     8cc:	09 95       	icall
}
     8ce:	08 95       	ret

000008d0 <dis_data>:
	lcd -> lcdcmd ( cmd_value1 ); // send to LCD
}
 
 
void dis_data ( char data_value )
{
     8d0:	1f 93       	push	r17
     8d2:	18 2f       	mov	r17, r24
	char data_value1;
	data_value1 = data_value & 0xF0;
	lcd -> lcddata ( data_value1 );
     8d4:	e0 91 6e 01 	lds	r30, 0x016E
     8d8:	f0 91 6f 01 	lds	r31, 0x016F
     8dc:	06 80       	ldd	r0, Z+6	; 0x06
     8de:	f7 81       	ldd	r31, Z+7	; 0x07
     8e0:	e0 2d       	mov	r30, r0
     8e2:	80 7f       	andi	r24, 0xF0	; 240
     8e4:	09 95       	icall
 
	data_value1 = ( ( data_value << 4 ) & 0xF0 );
	lcd -> lcddata ( data_value1 );
     8e6:	e0 91 6e 01 	lds	r30, 0x016E
     8ea:	f0 91 6f 01 	lds	r31, 0x016F
     8ee:	06 80       	ldd	r0, Z+6	; 0x06
     8f0:	f7 81       	ldd	r31, Z+7	; 0x07
     8f2:	e0 2d       	mov	r30, r0
     8f4:	81 2f       	mov	r24, r17
     8f6:	82 95       	swap	r24
     8f8:	80 7f       	andi	r24, 0xF0	; 240
     8fa:	09 95       	icall
}
     8fc:	1f 91       	pop	r17
     8fe:	08 95       	ret

00000900 <lcd_string>:

#include "lcd.h"

void lcd_string ( const char *data )
{
     900:	ef 92       	push	r14
     902:	ff 92       	push	r15
     904:	cf 93       	push	r28
     906:	df 93       	push	r29
     908:	e8 2e       	mov	r14, r24
     90a:	e7 01       	movw	r28, r14
     90c:	7e 01       	movw	r14, r28
     90e:	f9 2e       	mov	r15, r25
     910:	e7 01       	movw	r28, r14
	for ( ; *data; data ++)
     912:	02 c0       	rjmp	.+4      	; 0x918 <lcd_string+0x18>
		dis_data ( *data );
     914:	0e 94 68 04 	call	0x8d0	; 0x8d0 <dis_data>

#include "lcd.h"

void lcd_string ( const char *data )
{
	for ( ; *data; data ++)
     918:	89 91       	ld	r24, Y+
     91a:	88 23       	and	r24, r24
     91c:	d9 f7       	brne	.-10     	; 0x914 <lcd_string+0x14>
		dis_data ( *data );
}
     91e:	df 91       	pop	r29
     920:	cf 91       	pop	r28
     922:	ff 90       	pop	r15
     924:	ef 90       	pop	r14
     926:	08 95       	ret

00000928 <init_devices>:
#include "sdsc.h"
#include "fat32.h"

void init_devices ( void )
{
	lcd = ( lcd_interface * ) malloc ( sizeof ( lcd_interface ) );
     928:	88 e0       	ldi	r24, 0x08	; 8
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	0e 94 38 08 	call	0x1070	; 0x1070 <malloc>
     930:	fc 01       	movw	r30, r24
     932:	90 93 6f 01 	sts	0x016F, r25
     936:	80 93 6e 01 	sts	0x016E, r24
	lcd -> delay_ms = ms_delay;
     93a:	85 e9       	ldi	r24, 0x95	; 149
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	91 83       	std	Z+1, r25	; 0x01
     940:	80 83       	st	Z, r24
	lcd -> lcd_port_init = avr_lcd_port_init;
     942:	84 e8       	ldi	r24, 0x84	; 132
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	93 83       	std	Z+3, r25	; 0x03
     948:	82 83       	std	Z+2, r24	; 0x02
	lcd -> lcddata = avr_lcddata;
     94a:	84 ed       	ldi	r24, 0xD4	; 212
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	97 83       	std	Z+7, r25	; 0x07
     950:	86 83       	std	Z+6, r24	; 0x06
	lcd -> lcdcmd = avr_lcdcmd;
     952:	80 ee       	ldi	r24, 0xE0	; 224
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	95 83       	std	Z+5, r25	; 0x05
     958:	84 83       	std	Z+4, r24	; 0x04
	lcd_init ();
     95a:	0e 94 11 04 	call	0x822	; 0x822 <lcd_init>

	sdsc = ( sdsc_interface * ) malloc ( sizeof ( sdsc_interface ) );
     95e:	8c e0       	ldi	r24, 0x0C	; 12
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	0e 94 38 08 	call	0x1070	; 0x1070 <malloc>
     966:	fc 01       	movw	r30, r24
     968:	90 93 71 01 	sts	0x0171, r25
     96c:	80 93 70 01 	sts	0x0170, r24
	sdsc -> spi_tx = spi_tx;
     970:	87 e8       	ldi	r24, 0x87	; 135
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	95 83       	std	Z+5, r25	; 0x05
     976:	84 83       	std	Z+4, r24	; 0x04
	sdsc -> spi_rx = spi_rx;
     978:	8b e8       	ldi	r24, 0x8B	; 139
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	97 83       	std	Z+7, r25	; 0x07
     97e:	86 83       	std	Z+6, r24	; 0x06
	sdsc -> spi_init = spi_init;
     980:	88 ec       	ldi	r24, 0xC8	; 200
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	91 83       	std	Z+1, r25	; 0x01
     986:	80 83       	st	Z, r24
	sdsc -> spi_init_2x = spi_init_2x;
     988:	8e eb       	ldi	r24, 0xBE	; 190
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	93 83       	std	Z+3, r25	; 0x03
     98e:	82 83       	std	Z+2, r24	; 0x02
	sdsc -> sdsc_assert = sdsc_pin_assert;
     990:	81 e9       	ldi	r24, 0x91	; 145
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	91 87       	std	Z+9, r25	; 0x09
     996:	80 87       	std	Z+8, r24	; 0x08
	sdsc -> sdsc_deassert = sdsc_pin_deassert;
     998:	83 e9       	ldi	r24, 0x93	; 147
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	93 87       	std	Z+11, r25	; 0x0b
     99e:	82 87       	std	Z+10, r24	; 0x0a
	sdsc_init ();
     9a0:	0e 94 af 05 	call	0xb5e	; 0xb5e <sdsc_init>

	fat = ( fat32_interface * ) malloc ( sizeof ( fat32_interface ) );
     9a4:	86 e1       	ldi	r24, 0x16	; 22
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	0e 94 38 08 	call	0x1070	; 0x1070 <malloc>
     9ac:	fc 01       	movw	r30, r24
     9ae:	90 93 6d 01 	sts	0x016D, r25
     9b2:	80 93 6c 01 	sts	0x016C, r24
	fat -> read_single_block = read_single_block;
     9b6:	8a ef       	ldi	r24, 0xFA	; 250
     9b8:	95 e0       	ldi	r25, 0x05	; 5
     9ba:	93 8b       	std	Z+19, r25	; 0x13
     9bc:	82 8b       	std	Z+18, r24	; 0x12
	fat -> send_data_byte = usart_putch;
     9be:	87 e6       	ldi	r24, 0x67	; 103
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	95 8b       	std	Z+21, r25	; 0x15
     9c4:	84 8b       	std	Z+20, r24	; 0x14
	fat32_init ();
     9c6:	0e 94 23 01 	call	0x246	; 0x246 <fat32_init>

	usart_init ();
     9ca:	0e 94 57 00 	call	0xae	; 0xae <usart_init>
}
     9ce:	08 95       	ret

000009d0 <main>:

int main ( void )
{
     9d0:	df 92       	push	r13
     9d2:	ef 92       	push	r14
     9d4:	ff 92       	push	r15
     9d6:	0f 93       	push	r16
     9d8:	1f 93       	push	r17
     9da:	cf 93       	push	r28
     9dc:	df 93       	push	r29
	char x;
	int i;
	char *p = "         ";

	init_devices ();
     9de:	0e 94 94 04 	call	0x928	; 0x928 <init_devices>
	
	lcd_string ( "    ENGINEERS   " );
     9e2:	8e e6       	ldi	r24, 0x6E	; 110
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	0e 94 80 04 	call	0x900	; 0x900 <lcd_string>
	lcd_2nd_line ();
     9ea:	0e 94 48 04 	call	0x890	; 0x890 <lcd_2nd_line>
	lcd_string ( "     GARAGE     " );
     9ee:	8f e7       	ldi	r24, 0x7F	; 127
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	0e 94 80 04 	call	0x900	; 0x900 <lcd_string>

	printf ( "\n======== ENGINEERS GARAGE SDCARD INTERFACING =======\n" );
     9f6:	80 e9       	ldi	r24, 0x90	; 144
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	0e 94 80 09 	call	0x1300	; 0x1300 <puts>
	printf ( "\nSDSC card detected\n" );
     9fe:	86 ec       	ldi	r24, 0xC6	; 198
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	0e 94 80 09 	call	0x1300	; 0x1300 <puts>

MENU:
	printf ( "\nOPTIONS:\n" );
	printf ( "\n  1  : LIST ALL FILES\n" );
	printf ( "\n  2  : READ A FILE\n" );
	printf ( "\nEnter option : " );
     a06:	8f e0       	ldi	r24, 0x0F	; 15
     a08:	e8 2e       	mov	r14, r24
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	f8 2e       	mov	r15, r24
			lcd_string ( "LISTING FILES ..." );
			list_files ();
			break;

		case '2':
			printf ( "\nEnter the file name : " );
     a0e:	02 e3       	ldi	r16, 0x32	; 50
     a10:	11 e0       	ldi	r17, 0x01	; 1

	printf ( "\n======== ENGINEERS GARAGE SDCARD INTERFACING =======\n" );
	printf ( "\nSDSC card detected\n" );

MENU:
	printf ( "\nOPTIONS:\n" );
     a12:	8a ed       	ldi	r24, 0xDA	; 218
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	0e 94 80 09 	call	0x1300	; 0x1300 <puts>
	printf ( "\n  1  : LIST ALL FILES\n" );
     a1a:	84 ee       	ldi	r24, 0xE4	; 228
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	0e 94 80 09 	call	0x1300	; 0x1300 <puts>
	printf ( "\n  2  : READ A FILE\n" );
     a22:	8b ef       	ldi	r24, 0xFB	; 251
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	0e 94 80 09 	call	0x1300	; 0x1300 <puts>
	printf ( "\nEnter option : " );
     a2a:	00 d0       	rcall	.+0      	; 0xa2c <main+0x5c>
     a2c:	ed b7       	in	r30, 0x3d	; 61
     a2e:	fe b7       	in	r31, 0x3e	; 62
     a30:	f2 82       	std	Z+2, r15	; 0x02
     a32:	e1 82       	std	Z+1, r14	; 0x01
     a34:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <printf>

	switch ( usart_getch () )
     a38:	0f 90       	pop	r0
     a3a:	0f 90       	pop	r0
     a3c:	0e 94 6b 00 	call	0xd6	; 0xd6 <usart_getch>
     a40:	81 33       	cpi	r24, 0x31	; 49
     a42:	91 05       	cpc	r25, r1
     a44:	21 f0       	breq	.+8      	; 0xa4e <main+0x7e>
     a46:	82 33       	cpi	r24, 0x32	; 50
     a48:	91 05       	cpc	r25, r1
     a4a:	19 f7       	brne	.-58     	; 0xa12 <main+0x42>
     a4c:	09 c0       	rjmp	.+18     	; 0xa60 <main+0x90>
	{
		case '1':
			lcd_clear ();
     a4e:	0e 94 58 04 	call	0x8b0	; 0x8b0 <lcd_clear>
			lcd_string ( "LISTING FILES ..." );
     a52:	80 e2       	ldi	r24, 0x20	; 32
     a54:	91 e0       	ldi	r25, 0x01	; 1
     a56:	0e 94 80 04 	call	0x900	; 0x900 <lcd_string>
			list_files ();
     a5a:	0e 94 41 03 	call	0x682	; 0x682 <list_files>
			break;
     a5e:	d9 cf       	rjmp	.-78     	; 0xa12 <main+0x42>

		case '2':
			printf ( "\nEnter the file name : " );
     a60:	00 d0       	rcall	.+0      	; 0xa62 <main+0x92>
     a62:	ed b7       	in	r30, 0x3d	; 61
     a64:	fe b7       	in	r31, 0x3e	; 62
     a66:	12 83       	std	Z+2, r17	; 0x02
     a68:	01 83       	std	Z+1, r16	; 0x01
     a6a:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <printf>
     a6e:	0f 90       	pop	r0
     a70:	0f 90       	pop	r0
     a72:	c9 e0       	ldi	r28, 0x09	; 9
     a74:	d0 e0       	ldi	r29, 0x00	; 0

			for ( i = 0; i < 9; i ++ )	
			{
				x = usart_getch ();
     a76:	0e 94 6b 00 	call	0xd6	; 0xd6 <usart_getch>
     a7a:	d8 2e       	mov	r13, r24
				usart_putch ( x );
     a7c:	0e 94 67 00 	call	0xce	; 0xce <usart_putch>
				if ( '\r' == x )
     a80:	fd 2d       	mov	r31, r13
     a82:	fd 30       	cpi	r31, 0x0D	; 13
     a84:	11 f0       	breq	.+4      	; 0xa8a <main+0xba>
     a86:	21 97       	sbiw	r28, 0x01	; 1
			break;

		case '2':
			printf ( "\nEnter the file name : " );

			for ( i = 0; i < 9; i ++ )	
     a88:	b1 f7       	brne	.-20     	; 0xa76 <main+0xa6>
				else
					p [ i ] = x;
			}
			p [ i ] = '\0';
			
			lcd_clear ();
     a8a:	0e 94 58 04 	call	0x8b0	; 0x8b0 <lcd_clear>
			lcd_string ( "READING FILE ..." );
     a8e:	8a e4       	ldi	r24, 0x4A	; 74
     a90:	91 e0       	ldi	r25, 0x01	; 1
     a92:	0e 94 80 04 	call	0x900	; 0x900 <lcd_string>
			read_file ( p );
     a96:	8b e5       	ldi	r24, 0x5B	; 91
     a98:	91 e0       	ldi	r25, 0x01	; 1
     a9a:	0e 94 cd 02 	call	0x59a	; 0x59a <read_file>
     a9e:	b9 cf       	rjmp	.-142    	; 0xa12 <main+0x42>

00000aa0 <sdsc_command>:

#include "sdsc.h"

unsigned char sdsc_command ( unsigned char cmd, unsigned long arg )
{
     aa0:	1f 93       	push	r17
     aa2:	df 93       	push	r29
     aa4:	cf 93       	push	r28
     aa6:	00 d0       	rcall	.+0      	; 0xaa8 <sdsc_command+0x8>
     aa8:	00 d0       	rcall	.+0      	; 0xaaa <sdsc_command+0xa>
     aaa:	cd b7       	in	r28, 0x3d	; 61
     aac:	de b7       	in	r29, 0x3e	; 62
     aae:	18 2f       	mov	r17, r24
	unsigned char r1;

	sdsc -> spi_tx ( cmd | 0x40 ); 
     ab0:	e0 91 70 01 	lds	r30, 0x0170
     ab4:	f0 91 71 01 	lds	r31, 0x0171
     ab8:	04 80       	ldd	r0, Z+4	; 0x04
     aba:	f5 81       	ldd	r31, Z+5	; 0x05
     abc:	e0 2d       	mov	r30, r0
     abe:	80 64       	ori	r24, 0x40	; 64
     ac0:	4c 83       	std	Y+4, r20	; 0x04
     ac2:	5b 83       	std	Y+3, r21	; 0x03
     ac4:	6a 83       	std	Y+2, r22	; 0x02
     ac6:	79 83       	std	Y+1, r23	; 0x01
     ac8:	09 95       	icall
	sdsc -> spi_tx ( arg >> 24 );
     aca:	e0 91 70 01 	lds	r30, 0x0170
     ace:	f0 91 71 01 	lds	r31, 0x0171
     ad2:	04 80       	ldd	r0, Z+4	; 0x04
     ad4:	f5 81       	ldd	r31, Z+5	; 0x05
     ad6:	e0 2d       	mov	r30, r0
     ad8:	79 81       	ldd	r23, Y+1	; 0x01
     ada:	87 2f       	mov	r24, r23
     adc:	09 95       	icall
	sdsc -> spi_tx ( arg >> 16 );
     ade:	e0 91 70 01 	lds	r30, 0x0170
     ae2:	f0 91 71 01 	lds	r31, 0x0171
     ae6:	04 80       	ldd	r0, Z+4	; 0x04
     ae8:	f5 81       	ldd	r31, Z+5	; 0x05
     aea:	e0 2d       	mov	r30, r0
     aec:	6a 81       	ldd	r22, Y+2	; 0x02
     aee:	86 2f       	mov	r24, r22
     af0:	09 95       	icall
	sdsc -> spi_tx ( arg >> 8 );
     af2:	e0 91 70 01 	lds	r30, 0x0170
     af6:	f0 91 71 01 	lds	r31, 0x0171
     afa:	04 80       	ldd	r0, Z+4	; 0x04
     afc:	f5 81       	ldd	r31, Z+5	; 0x05
     afe:	e0 2d       	mov	r30, r0
     b00:	5b 81       	ldd	r21, Y+3	; 0x03
     b02:	85 2f       	mov	r24, r21
     b04:	09 95       	icall
	sdsc -> spi_tx ( arg );
     b06:	e0 91 70 01 	lds	r30, 0x0170
     b0a:	f0 91 71 01 	lds	r31, 0x0171
     b0e:	04 80       	ldd	r0, Z+4	; 0x04
     b10:	f5 81       	ldd	r31, Z+5	; 0x05
     b12:	e0 2d       	mov	r30, r0
     b14:	4c 81       	ldd	r20, Y+4	; 0x04
     b16:	84 2f       	mov	r24, r20
     b18:	09 95       	icall
     b1a:	e0 91 70 01 	lds	r30, 0x0170
     b1e:	f0 91 71 01 	lds	r31, 0x0171

	if ( cmd == SEND_IF_COND )
     b22:	18 30       	cpi	r17, 0x08	; 8
     b24:	29 f4       	brne	.+10     	; 0xb30 <sdsc_command+0x90>
	  sdsc -> spi_tx ( 0x87 );     
     b26:	04 80       	ldd	r0, Z+4	; 0x04
     b28:	f5 81       	ldd	r31, Z+5	; 0x05
     b2a:	e0 2d       	mov	r30, r0
     b2c:	87 e8       	ldi	r24, 0x87	; 135
     b2e:	04 c0       	rjmp	.+8      	; 0xb38 <sdsc_command+0x98>
	else 
	  sdsc -> spi_tx ( 0x95 ); 
     b30:	04 80       	ldd	r0, Z+4	; 0x04
     b32:	f5 81       	ldd	r31, Z+5	; 0x05
     b34:	e0 2d       	mov	r30, r0
     b36:	85 e9       	ldi	r24, 0x95	; 149
     b38:	09 95       	icall

	while ( ( r1 = sdsc -> spi_rx () ) == 0xff ); //wait response
     b3a:	e0 91 70 01 	lds	r30, 0x0170
     b3e:	f0 91 71 01 	lds	r31, 0x0171
     b42:	06 80       	ldd	r0, Z+6	; 0x06
     b44:	f7 81       	ldd	r31, Z+7	; 0x07
     b46:	e0 2d       	mov	r30, r0
     b48:	09 95       	icall
     b4a:	8f 3f       	cpi	r24, 0xFF	; 255
     b4c:	b1 f3       	breq	.-20     	; 0xb3a <sdsc_command+0x9a>

	return r1; 
}
     b4e:	0f 90       	pop	r0
     b50:	0f 90       	pop	r0
     b52:	0f 90       	pop	r0
     b54:	0f 90       	pop	r0
     b56:	cf 91       	pop	r28
     b58:	df 91       	pop	r29
     b5a:	1f 91       	pop	r17
     b5c:	08 95       	ret

00000b5e <sdsc_init>:

void sdsc_init ( void )
{
	sdsc -> spi_init ();
     b5e:	e0 91 70 01 	lds	r30, 0x0170
     b62:	f0 91 71 01 	lds	r31, 0x0171
     b66:	01 90       	ld	r0, Z+
     b68:	f0 81       	ld	r31, Z
     b6a:	e0 2d       	mov	r30, r0
     b6c:	09 95       	icall

	sdsc -> sdsc_assert ();
     b6e:	e0 91 70 01 	lds	r30, 0x0170
     b72:	f0 91 71 01 	lds	r31, 0x0171
     b76:	00 84       	ldd	r0, Z+8	; 0x08
     b78:	f1 85       	ldd	r31, Z+9	; 0x09
     b7a:	e0 2d       	mov	r30, r0
     b7c:	09 95       	icall
	while ( 0x01 != sdsc_command ( GO_IDLE_STATE, 0 ) );
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	40 e0       	ldi	r20, 0x00	; 0
     b82:	50 e0       	ldi	r21, 0x00	; 0
     b84:	ba 01       	movw	r22, r20
     b86:	0e 94 50 05 	call	0xaa0	; 0xaa0 <sdsc_command>
     b8a:	81 30       	cpi	r24, 0x01	; 1
     b8c:	c1 f7       	brne	.-16     	; 0xb7e <sdsc_init+0x20>
	while ( 0x01 != sdsc_command ( SEND_IF_COND, 0x000001AA ) );
     b8e:	88 e0       	ldi	r24, 0x08	; 8
     b90:	4a ea       	ldi	r20, 0xAA	; 170
     b92:	51 e0       	ldi	r21, 0x01	; 1
     b94:	60 e0       	ldi	r22, 0x00	; 0
     b96:	70 e0       	ldi	r23, 0x00	; 0
     b98:	0e 94 50 05 	call	0xaa0	; 0xaa0 <sdsc_command>
     b9c:	81 30       	cpi	r24, 0x01	; 1
     b9e:	b9 f7       	brne	.-18     	; 0xb8e <sdsc_init+0x30>
	while ( sdsc_command ( APP_CMD, 0 ) && sdsc_command ( SD_SEND_OP_COND, 0x40000000 ) );
     ba0:	87 e3       	ldi	r24, 0x37	; 55
     ba2:	40 e0       	ldi	r20, 0x00	; 0
     ba4:	50 e0       	ldi	r21, 0x00	; 0
     ba6:	ba 01       	movw	r22, r20
     ba8:	0e 94 50 05 	call	0xaa0	; 0xaa0 <sdsc_command>
     bac:	88 23       	and	r24, r24
     bae:	49 f0       	breq	.+18     	; 0xbc2 <sdsc_init+0x64>
     bb0:	89 e2       	ldi	r24, 0x29	; 41
     bb2:	40 e0       	ldi	r20, 0x00	; 0
     bb4:	50 e0       	ldi	r21, 0x00	; 0
     bb6:	60 e0       	ldi	r22, 0x00	; 0
     bb8:	70 e4       	ldi	r23, 0x40	; 64
     bba:	0e 94 50 05 	call	0xaa0	; 0xaa0 <sdsc_command>
     bbe:	88 23       	and	r24, r24
     bc0:	79 f7       	brne	.-34     	; 0xba0 <sdsc_init+0x42>
	while ( 0x00 != sdsc_command ( READ_OCR, 0 ) );
     bc2:	8a e3       	ldi	r24, 0x3A	; 58
     bc4:	40 e0       	ldi	r20, 0x00	; 0
     bc6:	50 e0       	ldi	r21, 0x00	; 0
     bc8:	ba 01       	movw	r22, r20
     bca:	0e 94 50 05 	call	0xaa0	; 0xaa0 <sdsc_command>
     bce:	88 23       	and	r24, r24
     bd0:	c1 f7       	brne	.-16     	; 0xbc2 <sdsc_init+0x64>
	sdsc -> sdsc_deassert ();
     bd2:	e0 91 70 01 	lds	r30, 0x0170
     bd6:	f0 91 71 01 	lds	r31, 0x0171
     bda:	02 84       	ldd	r0, Z+10	; 0x0a
     bdc:	f3 85       	ldd	r31, Z+11	; 0x0b
     bde:	e0 2d       	mov	r30, r0
     be0:	09 95       	icall
	
	sdsc -> spi_init_2x ();
     be2:	e0 91 70 01 	lds	r30, 0x0170
     be6:	f0 91 71 01 	lds	r31, 0x0171
     bea:	02 80       	ldd	r0, Z+2	; 0x02
     bec:	f3 81       	ldd	r31, Z+3	; 0x03
     bee:	e0 2d       	mov	r30, r0
     bf0:	09 95       	icall
}
     bf2:	08 95       	ret

00000bf4 <read_single_block>:

void read_single_block ( unsigned long block_address, unsigned char *buf )
{
     bf4:	cf 92       	push	r12
     bf6:	df 92       	push	r13
     bf8:	ef 92       	push	r14
     bfa:	ff 92       	push	r15
     bfc:	0f 93       	push	r16
     bfe:	1f 93       	push	r17
     c00:	cf 93       	push	r28
     c02:	df 93       	push	r29
     c04:	7b 01       	movw	r14, r22
     c06:	8c 01       	movw	r16, r24
     c08:	6a 01       	movw	r12, r20
	int i;

	block_address = block_address << 9;
     c0a:	89 e0       	ldi	r24, 0x09	; 9
     c0c:	ee 0c       	add	r14, r14
     c0e:	ff 1c       	adc	r15, r15
     c10:	00 1f       	adc	r16, r16
     c12:	11 1f       	adc	r17, r17
     c14:	8a 95       	dec	r24
     c16:	d1 f7       	brne	.-12     	; 0xc0c <read_single_block+0x18>

	sdsc -> sdsc_assert ();
     c18:	e0 91 70 01 	lds	r30, 0x0170
     c1c:	f0 91 71 01 	lds	r31, 0x0171
     c20:	00 84       	ldd	r0, Z+8	; 0x08
     c22:	f1 85       	ldd	r31, Z+9	; 0x09
     c24:	e0 2d       	mov	r30, r0
     c26:	09 95       	icall
	while ( 0x00 != sdsc_command ( READ_SINGLE_BLOCK, block_address ) );
     c28:	81 e1       	ldi	r24, 0x11	; 17
     c2a:	b8 01       	movw	r22, r16
     c2c:	a7 01       	movw	r20, r14
     c2e:	0e 94 50 05 	call	0xaa0	; 0xaa0 <sdsc_command>
     c32:	88 23       	and	r24, r24
     c34:	c9 f7       	brne	.-14     	; 0xc28 <read_single_block+0x34>
	while ( 0xfe != sdsc -> spi_rx () );
     c36:	e0 91 70 01 	lds	r30, 0x0170
     c3a:	f0 91 71 01 	lds	r31, 0x0171
     c3e:	06 80       	ldd	r0, Z+6	; 0x06
     c40:	f7 81       	ldd	r31, Z+7	; 0x07
     c42:	e0 2d       	mov	r30, r0
     c44:	09 95       	icall
     c46:	8e 3f       	cpi	r24, 0xFE	; 254
     c48:	b1 f7       	brne	.-20     	; 0xc36 <read_single_block+0x42>
     c4a:	ec 2c       	mov	r14, r12
     c4c:	fd 2c       	mov	r15, r13
     c4e:	c0 e0       	ldi	r28, 0x00	; 0
     c50:	d0 e0       	ldi	r29, 0x00	; 0
	for ( i = 0; i < 512; i ++ )
  		buf [ i ] = sdsc -> spi_rx ();
     c52:	e0 91 70 01 	lds	r30, 0x0170
     c56:	f0 91 71 01 	lds	r31, 0x0171
     c5a:	06 80       	ldd	r0, Z+6	; 0x06
     c5c:	f7 81       	ldd	r31, Z+7	; 0x07
     c5e:	e0 2d       	mov	r30, r0
     c60:	09 95       	icall
     c62:	f7 01       	movw	r30, r14
     c64:	81 93       	st	Z+, r24
     c66:	7f 01       	movw	r14, r30
	block_address = block_address << 9;

	sdsc -> sdsc_assert ();
	while ( 0x00 != sdsc_command ( READ_SINGLE_BLOCK, block_address ) );
	while ( 0xfe != sdsc -> spi_rx () );
	for ( i = 0; i < 512; i ++ )
     c68:	21 96       	adiw	r28, 0x01	; 1
     c6a:	f2 e0       	ldi	r31, 0x02	; 2
     c6c:	c0 30       	cpi	r28, 0x00	; 0
     c6e:	df 07       	cpc	r29, r31
     c70:	81 f7       	brne	.-32     	; 0xc52 <read_single_block+0x5e>
  		buf [ i ] = sdsc -> spi_rx ();
	sdsc -> spi_rx (); 
     c72:	e0 91 70 01 	lds	r30, 0x0170
     c76:	f0 91 71 01 	lds	r31, 0x0171
     c7a:	06 80       	ldd	r0, Z+6	; 0x06
     c7c:	f7 81       	ldd	r31, Z+7	; 0x07
     c7e:	e0 2d       	mov	r30, r0
     c80:	09 95       	icall
	sdsc -> spi_rx ();
     c82:	e0 91 70 01 	lds	r30, 0x0170
     c86:	f0 91 71 01 	lds	r31, 0x0171
     c8a:	06 80       	ldd	r0, Z+6	; 0x06
     c8c:	f7 81       	ldd	r31, Z+7	; 0x07
     c8e:	e0 2d       	mov	r30, r0
     c90:	09 95       	icall
	sdsc -> sdsc_deassert ();;
     c92:	e0 91 70 01 	lds	r30, 0x0170
     c96:	f0 91 71 01 	lds	r31, 0x0171
     c9a:	02 84       	ldd	r0, Z+10	; 0x0a
     c9c:	f3 85       	ldd	r31, Z+11	; 0x0b
     c9e:	e0 2d       	mov	r30, r0
     ca0:	09 95       	icall
}
     ca2:	df 91       	pop	r29
     ca4:	cf 91       	pop	r28
     ca6:	1f 91       	pop	r17
     ca8:	0f 91       	pop	r16
     caa:	ff 90       	pop	r15
     cac:	ef 90       	pop	r14
     cae:	df 90       	pop	r13
     cb0:	cf 90       	pop	r12
     cb2:	08 95       	ret

00000cb4 <write_single_block>:

unsigned char write_single_block ( unsigned long block_address, unsigned char *buf )
{
     cb4:	cf 92       	push	r12
     cb6:	df 92       	push	r13
     cb8:	ef 92       	push	r14
     cba:	ff 92       	push	r15
     cbc:	0f 93       	push	r16
     cbe:	1f 93       	push	r17
     cc0:	df 93       	push	r29
     cc2:	cf 93       	push	r28
     cc4:	0f 92       	push	r0
     cc6:	cd b7       	in	r28, 0x3d	; 61
     cc8:	de b7       	in	r29, 0x3e	; 62
     cca:	7b 01       	movw	r14, r22
     ccc:	8c 01       	movw	r16, r24
     cce:	6a 01       	movw	r12, r20
	int i;
	unsigned char r1;

	block_address = block_address << 9;
     cd0:	99 e0       	ldi	r25, 0x09	; 9
     cd2:	ee 0c       	add	r14, r14
     cd4:	ff 1c       	adc	r15, r15
     cd6:	00 1f       	adc	r16, r16
     cd8:	11 1f       	adc	r17, r17
     cda:	9a 95       	dec	r25
     cdc:	d1 f7       	brne	.-12     	; 0xcd2 <write_single_block+0x1e>

	sdsc -> sdsc_assert ();
     cde:	e0 91 70 01 	lds	r30, 0x0170
     ce2:	f0 91 71 01 	lds	r31, 0x0171
     ce6:	00 84       	ldd	r0, Z+8	; 0x08
     ce8:	f1 85       	ldd	r31, Z+9	; 0x09
     cea:	e0 2d       	mov	r30, r0
     cec:	09 95       	icall

	while ( 0x00 != sdsc_command ( WRITE_SINGLE_BLOCK, block_address ) );
     cee:	88 e1       	ldi	r24, 0x18	; 24
     cf0:	b8 01       	movw	r22, r16
     cf2:	a7 01       	movw	r20, r14
     cf4:	0e 94 50 05 	call	0xaa0	; 0xaa0 <sdsc_command>
     cf8:	88 23       	and	r24, r24
     cfa:	c9 f7       	brne	.-14     	; 0xcee <write_single_block+0x3a>
	sdsc -> spi_tx ( 0xfe );     
     cfc:	e0 91 70 01 	lds	r30, 0x0170
     d00:	f0 91 71 01 	lds	r31, 0x0171
     d04:	04 80       	ldd	r0, Z+4	; 0x04
     d06:	f5 81       	ldd	r31, Z+5	; 0x05
     d08:	e0 2d       	mov	r30, r0
     d0a:	8e ef       	ldi	r24, 0xFE	; 254
     d0c:	09 95       	icall
     d0e:	ec 2c       	mov	r14, r12
     d10:	fd 2c       	mov	r15, r13
	for ( i=0; i < 512; i++ )    
     d12:	00 e0       	ldi	r16, 0x00	; 0
     d14:	10 e0       	ldi	r17, 0x00	; 0
  		sdsc -> spi_tx ( buf [ i ] );
     d16:	e0 91 70 01 	lds	r30, 0x0170
     d1a:	f0 91 71 01 	lds	r31, 0x0171
     d1e:	04 80       	ldd	r0, Z+4	; 0x04
     d20:	f5 81       	ldd	r31, Z+5	; 0x05
     d22:	e0 2d       	mov	r30, r0
     d24:	d7 01       	movw	r26, r14
     d26:	8d 91       	ld	r24, X+
     d28:	7d 01       	movw	r14, r26
     d2a:	09 95       	icall

	sdsc -> sdsc_assert ();

	while ( 0x00 != sdsc_command ( WRITE_SINGLE_BLOCK, block_address ) );
	sdsc -> spi_tx ( 0xfe );     
	for ( i=0; i < 512; i++ )    
     d2c:	0f 5f       	subi	r16, 0xFF	; 255
     d2e:	1f 4f       	sbci	r17, 0xFF	; 255
     d30:	b2 e0       	ldi	r27, 0x02	; 2
     d32:	00 30       	cpi	r16, 0x00	; 0
     d34:	1b 07       	cpc	r17, r27
     d36:	79 f7       	brne	.-34     	; 0xd16 <write_single_block+0x62>
  		sdsc -> spi_tx ( buf [ i ] );
	sdsc -> spi_tx ( 0xff );     
     d38:	e0 91 70 01 	lds	r30, 0x0170
     d3c:	f0 91 71 01 	lds	r31, 0x0171
     d40:	04 80       	ldd	r0, Z+4	; 0x04
     d42:	f5 81       	ldd	r31, Z+5	; 0x05
     d44:	e0 2d       	mov	r30, r0
     d46:	8f ef       	ldi	r24, 0xFF	; 255
     d48:	09 95       	icall
	sdsc -> spi_tx ( 0xff );
     d4a:	e0 91 70 01 	lds	r30, 0x0170
     d4e:	f0 91 71 01 	lds	r31, 0x0171
     d52:	04 80       	ldd	r0, Z+4	; 0x04
     d54:	f5 81       	ldd	r31, Z+5	; 0x05
     d56:	e0 2d       	mov	r30, r0
     d58:	8f ef       	ldi	r24, 0xFF	; 255
     d5a:	09 95       	icall

	r1 = sdsc -> spi_rx ();
     d5c:	e0 91 70 01 	lds	r30, 0x0170
     d60:	f0 91 71 01 	lds	r31, 0x0171
     d64:	06 80       	ldd	r0, Z+6	; 0x06
     d66:	f7 81       	ldd	r31, Z+7	; 0x07
     d68:	e0 2d       	mov	r30, r0
     d6a:	09 95       	icall

	if( ( r1 & 0x1f) != 0x05 )  	   //r1 = 0bXXX0AAA1 ; AAA='010' - data accepted
     d6c:	98 2f       	mov	r25, r24
     d6e:	9f 71       	andi	r25, 0x1F	; 31
     d70:	95 30       	cpi	r25, 0x05	; 5
     d72:	59 f0       	breq	.+22     	; 0xd8a <write_single_block+0xd6>
	{                                  //AAA='101'-data rejected due to CRC error
  		sdsc -> sdsc_deassert ();;            	   //AAA='110'-data rejected due to write error
     d74:	e0 91 70 01 	lds	r30, 0x0170
     d78:	f0 91 71 01 	lds	r31, 0x0171
     d7c:	02 84       	ldd	r0, Z+10	; 0x0a
     d7e:	f3 85       	ldd	r31, Z+11	; 0x0b
     d80:	e0 2d       	mov	r30, r0
     d82:	89 83       	std	Y+1, r24	; 0x01
     d84:	09 95       	icall
  		return r1;
     d86:	89 81       	ldd	r24, Y+1	; 0x01
     d88:	36 c0       	rjmp	.+108    	; 0xdf6 <write_single_block+0x142>
	}else;

	while ( ! sdsc -> spi_rx () ); 				//wait till writing completed
     d8a:	e0 91 70 01 	lds	r30, 0x0170
     d8e:	f0 91 71 01 	lds	r31, 0x0171
     d92:	06 80       	ldd	r0, Z+6	; 0x06
     d94:	f7 81       	ldd	r31, Z+7	; 0x07
     d96:	e0 2d       	mov	r30, r0
     d98:	09 95       	icall
     d9a:	88 23       	and	r24, r24
     d9c:	b1 f3       	breq	.-20     	; 0xd8a <write_single_block+0xd6>

	sdsc -> sdsc_deassert ();;
     d9e:	e0 91 70 01 	lds	r30, 0x0170
     da2:	f0 91 71 01 	lds	r31, 0x0171
     da6:	02 84       	ldd	r0, Z+10	; 0x0a
     da8:	f3 85       	ldd	r31, Z+11	; 0x0b
     daa:	e0 2d       	mov	r30, r0
     dac:	09 95       	icall

	sdsc -> spi_tx ( 0xff );   					//confirm not in busy state
     dae:	e0 91 70 01 	lds	r30, 0x0170
     db2:	f0 91 71 01 	lds	r31, 0x0171
     db6:	04 80       	ldd	r0, Z+4	; 0x04
     db8:	f5 81       	ldd	r31, Z+5	; 0x05
     dba:	e0 2d       	mov	r30, r0
     dbc:	8f ef       	ldi	r24, 0xFF	; 255
     dbe:	09 95       	icall

	sdsc -> sdsc_assert ();
     dc0:	e0 91 70 01 	lds	r30, 0x0170
     dc4:	f0 91 71 01 	lds	r31, 0x0171
     dc8:	00 84       	ldd	r0, Z+8	; 0x08
     dca:	f1 85       	ldd	r31, Z+9	; 0x09
     dcc:	e0 2d       	mov	r30, r0
     dce:	09 95       	icall
	while ( ! sdsc -> spi_rx () );
     dd0:	e0 91 70 01 	lds	r30, 0x0170
     dd4:	f0 91 71 01 	lds	r31, 0x0171
     dd8:	06 80       	ldd	r0, Z+6	; 0x06
     dda:	f7 81       	ldd	r31, Z+7	; 0x07
     ddc:	e0 2d       	mov	r30, r0
     dde:	09 95       	icall
     de0:	88 23       	and	r24, r24
     de2:	b1 f3       	breq	.-20     	; 0xdd0 <write_single_block+0x11c>
	sdsc -> sdsc_deassert ();;
     de4:	e0 91 70 01 	lds	r30, 0x0170
     de8:	f0 91 71 01 	lds	r31, 0x0171
     dec:	02 84       	ldd	r0, Z+10	; 0x0a
     dee:	f3 85       	ldd	r31, Z+11	; 0x0b
     df0:	e0 2d       	mov	r30, r0
     df2:	09 95       	icall

	return 0;
     df4:	80 e0       	ldi	r24, 0x00	; 0
}
     df6:	0f 90       	pop	r0
     df8:	cf 91       	pop	r28
     dfa:	df 91       	pop	r29
     dfc:	1f 91       	pop	r17
     dfe:	0f 91       	pop	r16
     e00:	ff 90       	pop	r15
     e02:	ef 90       	pop	r14
     e04:	df 90       	pop	r13
     e06:	cf 90       	pop	r12
     e08:	08 95       	ret

00000e0a <__fixsfsi>:
     e0a:	ac e0       	ldi	r26, 0x0C	; 12
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	eb e0       	ldi	r30, 0x0B	; 11
     e10:	f7 e0       	ldi	r31, 0x07	; 7
     e12:	0c 94 11 08 	jmp	0x1022	; 0x1022 <__prologue_saves__+0x20>
     e16:	69 83       	std	Y+1, r22	; 0x01
     e18:	7a 83       	std	Y+2, r23	; 0x02
     e1a:	8b 83       	std	Y+3, r24	; 0x03
     e1c:	9c 83       	std	Y+4, r25	; 0x04
     e1e:	ce 01       	movw	r24, r28
     e20:	01 96       	adiw	r24, 0x01	; 1
     e22:	be 01       	movw	r22, r28
     e24:	6b 5f       	subi	r22, 0xFB	; 251
     e26:	7f 4f       	sbci	r23, 0xFF	; 255
     e28:	0e 94 57 07 	call	0xeae	; 0xeae <__unpack_f>
     e2c:	8d 81       	ldd	r24, Y+5	; 0x05
     e2e:	82 30       	cpi	r24, 0x02	; 2
     e30:	81 f1       	breq	.+96     	; 0xe92 <__fixsfsi+0x88>
     e32:	82 30       	cpi	r24, 0x02	; 2
     e34:	70 f1       	brcs	.+92     	; 0xe92 <__fixsfsi+0x88>
     e36:	84 30       	cpi	r24, 0x04	; 4
     e38:	21 f4       	brne	.+8      	; 0xe42 <__fixsfsi+0x38>
     e3a:	8e 81       	ldd	r24, Y+6	; 0x06
     e3c:	88 23       	and	r24, r24
     e3e:	69 f1       	breq	.+90     	; 0xe9a <__fixsfsi+0x90>
     e40:	0a c0       	rjmp	.+20     	; 0xe56 <__fixsfsi+0x4c>
     e42:	2f 81       	ldd	r18, Y+7	; 0x07
     e44:	38 85       	ldd	r19, Y+8	; 0x08
     e46:	37 fd       	sbrc	r19, 7
     e48:	24 c0       	rjmp	.+72     	; 0xe92 <__fixsfsi+0x88>
     e4a:	6e 81       	ldd	r22, Y+6	; 0x06
     e4c:	2f 31       	cpi	r18, 0x1F	; 31
     e4e:	31 05       	cpc	r19, r1
     e50:	3c f0       	brlt	.+14     	; 0xe60 <__fixsfsi+0x56>
     e52:	66 23       	and	r22, r22
     e54:	11 f1       	breq	.+68     	; 0xe9a <__fixsfsi+0x90>
     e56:	20 e0       	ldi	r18, 0x00	; 0
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	40 e0       	ldi	r20, 0x00	; 0
     e5c:	50 e8       	ldi	r21, 0x80	; 128
     e5e:	21 c0       	rjmp	.+66     	; 0xea2 <__fixsfsi+0x98>
     e60:	8e e1       	ldi	r24, 0x1E	; 30
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	82 1b       	sub	r24, r18
     e66:	93 0b       	sbc	r25, r19
     e68:	29 85       	ldd	r18, Y+9	; 0x09
     e6a:	3a 85       	ldd	r19, Y+10	; 0x0a
     e6c:	4b 85       	ldd	r20, Y+11	; 0x0b
     e6e:	5c 85       	ldd	r21, Y+12	; 0x0c
     e70:	04 c0       	rjmp	.+8      	; 0xe7a <__fixsfsi+0x70>
     e72:	56 95       	lsr	r21
     e74:	47 95       	ror	r20
     e76:	37 95       	ror	r19
     e78:	27 95       	ror	r18
     e7a:	8a 95       	dec	r24
     e7c:	d2 f7       	brpl	.-12     	; 0xe72 <__fixsfsi+0x68>
     e7e:	66 23       	and	r22, r22
     e80:	81 f0       	breq	.+32     	; 0xea2 <__fixsfsi+0x98>
     e82:	50 95       	com	r21
     e84:	40 95       	com	r20
     e86:	30 95       	com	r19
     e88:	21 95       	neg	r18
     e8a:	3f 4f       	sbci	r19, 0xFF	; 255
     e8c:	4f 4f       	sbci	r20, 0xFF	; 255
     e8e:	5f 4f       	sbci	r21, 0xFF	; 255
     e90:	08 c0       	rjmp	.+16     	; 0xea2 <__fixsfsi+0x98>
     e92:	20 e0       	ldi	r18, 0x00	; 0
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	a9 01       	movw	r20, r18
     e98:	04 c0       	rjmp	.+8      	; 0xea2 <__fixsfsi+0x98>
     e9a:	2f ef       	ldi	r18, 0xFF	; 255
     e9c:	3f ef       	ldi	r19, 0xFF	; 255
     e9e:	4f ef       	ldi	r20, 0xFF	; 255
     ea0:	5f e7       	ldi	r21, 0x7F	; 127
     ea2:	b9 01       	movw	r22, r18
     ea4:	ca 01       	movw	r24, r20
     ea6:	2c 96       	adiw	r28, 0x0c	; 12
     ea8:	e2 e0       	ldi	r30, 0x02	; 2
     eaa:	0c 94 2d 08 	jmp	0x105a	; 0x105a <__epilogue_restores__+0x20>

00000eae <__unpack_f>:
     eae:	dc 01       	movw	r26, r24
     eb0:	fb 01       	movw	r30, r22
     eb2:	2c 91       	ld	r18, X
     eb4:	11 96       	adiw	r26, 0x01	; 1
     eb6:	3c 91       	ld	r19, X
     eb8:	11 97       	sbiw	r26, 0x01	; 1
     eba:	12 96       	adiw	r26, 0x02	; 2
     ebc:	8c 91       	ld	r24, X
     ebe:	12 97       	sbiw	r26, 0x02	; 2
     ec0:	48 2f       	mov	r20, r24
     ec2:	4f 77       	andi	r20, 0x7F	; 127
     ec4:	50 e0       	ldi	r21, 0x00	; 0
     ec6:	98 2f       	mov	r25, r24
     ec8:	99 1f       	adc	r25, r25
     eca:	99 27       	eor	r25, r25
     ecc:	99 1f       	adc	r25, r25
     ece:	13 96       	adiw	r26, 0x03	; 3
     ed0:	6c 91       	ld	r22, X
     ed2:	13 97       	sbiw	r26, 0x03	; 3
     ed4:	86 2f       	mov	r24, r22
     ed6:	88 0f       	add	r24, r24
     ed8:	89 2b       	or	r24, r25
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	66 1f       	adc	r22, r22
     ede:	66 27       	eor	r22, r22
     ee0:	66 1f       	adc	r22, r22
     ee2:	61 83       	std	Z+1, r22	; 0x01
     ee4:	00 97       	sbiw	r24, 0x00	; 0
     ee6:	39 f5       	brne	.+78     	; 0xf36 <__unpack_f+0x88>
     ee8:	21 15       	cp	r18, r1
     eea:	31 05       	cpc	r19, r1
     eec:	41 05       	cpc	r20, r1
     eee:	51 05       	cpc	r21, r1
     ef0:	11 f4       	brne	.+4      	; 0xef6 <__unpack_f+0x48>
     ef2:	82 e0       	ldi	r24, 0x02	; 2
     ef4:	29 c0       	rjmp	.+82     	; 0xf48 <__unpack_f+0x9a>
     ef6:	82 e8       	ldi	r24, 0x82	; 130
     ef8:	9f ef       	ldi	r25, 0xFF	; 255
     efa:	93 83       	std	Z+3, r25	; 0x03
     efc:	82 83       	std	Z+2, r24	; 0x02
     efe:	67 e0       	ldi	r22, 0x07	; 7
     f00:	22 0f       	add	r18, r18
     f02:	33 1f       	adc	r19, r19
     f04:	44 1f       	adc	r20, r20
     f06:	55 1f       	adc	r21, r21
     f08:	6a 95       	dec	r22
     f0a:	d1 f7       	brne	.-12     	; 0xf00 <__unpack_f+0x52>
     f0c:	83 e0       	ldi	r24, 0x03	; 3
     f0e:	80 83       	st	Z, r24
     f10:	09 c0       	rjmp	.+18     	; 0xf24 <__unpack_f+0x76>
     f12:	22 0f       	add	r18, r18
     f14:	33 1f       	adc	r19, r19
     f16:	44 1f       	adc	r20, r20
     f18:	55 1f       	adc	r21, r21
     f1a:	82 81       	ldd	r24, Z+2	; 0x02
     f1c:	93 81       	ldd	r25, Z+3	; 0x03
     f1e:	01 97       	sbiw	r24, 0x01	; 1
     f20:	93 83       	std	Z+3, r25	; 0x03
     f22:	82 83       	std	Z+2, r24	; 0x02
     f24:	20 30       	cpi	r18, 0x00	; 0
     f26:	80 e0       	ldi	r24, 0x00	; 0
     f28:	38 07       	cpc	r19, r24
     f2a:	80 e0       	ldi	r24, 0x00	; 0
     f2c:	48 07       	cpc	r20, r24
     f2e:	80 e4       	ldi	r24, 0x40	; 64
     f30:	58 07       	cpc	r21, r24
     f32:	78 f3       	brcs	.-34     	; 0xf12 <__unpack_f+0x64>
     f34:	20 c0       	rjmp	.+64     	; 0xf76 <__unpack_f+0xc8>
     f36:	8f 3f       	cpi	r24, 0xFF	; 255
     f38:	91 05       	cpc	r25, r1
     f3a:	79 f4       	brne	.+30     	; 0xf5a <__unpack_f+0xac>
     f3c:	21 15       	cp	r18, r1
     f3e:	31 05       	cpc	r19, r1
     f40:	41 05       	cpc	r20, r1
     f42:	51 05       	cpc	r21, r1
     f44:	19 f4       	brne	.+6      	; 0xf4c <__unpack_f+0x9e>
     f46:	84 e0       	ldi	r24, 0x04	; 4
     f48:	80 83       	st	Z, r24
     f4a:	08 95       	ret
     f4c:	44 ff       	sbrs	r20, 4
     f4e:	03 c0       	rjmp	.+6      	; 0xf56 <__unpack_f+0xa8>
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	80 83       	st	Z, r24
     f54:	10 c0       	rjmp	.+32     	; 0xf76 <__unpack_f+0xc8>
     f56:	10 82       	st	Z, r1
     f58:	0e c0       	rjmp	.+28     	; 0xf76 <__unpack_f+0xc8>
     f5a:	8f 57       	subi	r24, 0x7F	; 127
     f5c:	90 40       	sbci	r25, 0x00	; 0
     f5e:	93 83       	std	Z+3, r25	; 0x03
     f60:	82 83       	std	Z+2, r24	; 0x02
     f62:	83 e0       	ldi	r24, 0x03	; 3
     f64:	80 83       	st	Z, r24
     f66:	87 e0       	ldi	r24, 0x07	; 7
     f68:	22 0f       	add	r18, r18
     f6a:	33 1f       	adc	r19, r19
     f6c:	44 1f       	adc	r20, r20
     f6e:	55 1f       	adc	r21, r21
     f70:	8a 95       	dec	r24
     f72:	d1 f7       	brne	.-12     	; 0xf68 <__unpack_f+0xba>
     f74:	50 64       	ori	r21, 0x40	; 64
     f76:	24 83       	std	Z+4, r18	; 0x04
     f78:	35 83       	std	Z+5, r19	; 0x05
     f7a:	46 83       	std	Z+6, r20	; 0x06
     f7c:	57 83       	std	Z+7, r21	; 0x07
     f7e:	08 95       	ret

00000f80 <__mulsi3>:
     f80:	62 9f       	mul	r22, r18
     f82:	d0 01       	movw	r26, r0
     f84:	73 9f       	mul	r23, r19
     f86:	f0 01       	movw	r30, r0
     f88:	82 9f       	mul	r24, r18
     f8a:	e0 0d       	add	r30, r0
     f8c:	f1 1d       	adc	r31, r1
     f8e:	64 9f       	mul	r22, r20
     f90:	e0 0d       	add	r30, r0
     f92:	f1 1d       	adc	r31, r1
     f94:	92 9f       	mul	r25, r18
     f96:	f0 0d       	add	r31, r0
     f98:	83 9f       	mul	r24, r19
     f9a:	f0 0d       	add	r31, r0
     f9c:	74 9f       	mul	r23, r20
     f9e:	f0 0d       	add	r31, r0
     fa0:	65 9f       	mul	r22, r21
     fa2:	f0 0d       	add	r31, r0
     fa4:	99 27       	eor	r25, r25
     fa6:	72 9f       	mul	r23, r18
     fa8:	b0 0d       	add	r27, r0
     faa:	e1 1d       	adc	r30, r1
     fac:	f9 1f       	adc	r31, r25
     fae:	63 9f       	mul	r22, r19
     fb0:	b0 0d       	add	r27, r0
     fb2:	e1 1d       	adc	r30, r1
     fb4:	f9 1f       	adc	r31, r25
     fb6:	bd 01       	movw	r22, r26
     fb8:	cf 01       	movw	r24, r30
     fba:	11 24       	eor	r1, r1
     fbc:	08 95       	ret

00000fbe <__udivmodsi4>:
     fbe:	a1 e2       	ldi	r26, 0x21	; 33
     fc0:	1a 2e       	mov	r1, r26
     fc2:	aa 1b       	sub	r26, r26
     fc4:	bb 1b       	sub	r27, r27
     fc6:	fd 01       	movw	r30, r26
     fc8:	0d c0       	rjmp	.+26     	; 0xfe4 <__udivmodsi4_ep>

00000fca <__udivmodsi4_loop>:
     fca:	aa 1f       	adc	r26, r26
     fcc:	bb 1f       	adc	r27, r27
     fce:	ee 1f       	adc	r30, r30
     fd0:	ff 1f       	adc	r31, r31
     fd2:	a2 17       	cp	r26, r18
     fd4:	b3 07       	cpc	r27, r19
     fd6:	e4 07       	cpc	r30, r20
     fd8:	f5 07       	cpc	r31, r21
     fda:	20 f0       	brcs	.+8      	; 0xfe4 <__udivmodsi4_ep>
     fdc:	a2 1b       	sub	r26, r18
     fde:	b3 0b       	sbc	r27, r19
     fe0:	e4 0b       	sbc	r30, r20
     fe2:	f5 0b       	sbc	r31, r21

00000fe4 <__udivmodsi4_ep>:
     fe4:	66 1f       	adc	r22, r22
     fe6:	77 1f       	adc	r23, r23
     fe8:	88 1f       	adc	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	1a 94       	dec	r1
     fee:	69 f7       	brne	.-38     	; 0xfca <__udivmodsi4_loop>
     ff0:	60 95       	com	r22
     ff2:	70 95       	com	r23
     ff4:	80 95       	com	r24
     ff6:	90 95       	com	r25
     ff8:	9b 01       	movw	r18, r22
     ffa:	ac 01       	movw	r20, r24
     ffc:	bd 01       	movw	r22, r26
     ffe:	cf 01       	movw	r24, r30
    1000:	08 95       	ret

00001002 <__prologue_saves__>:
    1002:	2f 92       	push	r2
    1004:	3f 92       	push	r3
    1006:	4f 92       	push	r4
    1008:	5f 92       	push	r5
    100a:	6f 92       	push	r6
    100c:	7f 92       	push	r7
    100e:	8f 92       	push	r8
    1010:	9f 92       	push	r9
    1012:	af 92       	push	r10
    1014:	bf 92       	push	r11
    1016:	cf 92       	push	r12
    1018:	df 92       	push	r13
    101a:	ef 92       	push	r14
    101c:	ff 92       	push	r15
    101e:	0f 93       	push	r16
    1020:	1f 93       	push	r17
    1022:	cf 93       	push	r28
    1024:	df 93       	push	r29
    1026:	cd b7       	in	r28, 0x3d	; 61
    1028:	de b7       	in	r29, 0x3e	; 62
    102a:	ca 1b       	sub	r28, r26
    102c:	db 0b       	sbc	r29, r27
    102e:	0f b6       	in	r0, 0x3f	; 63
    1030:	f8 94       	cli
    1032:	de bf       	out	0x3e, r29	; 62
    1034:	0f be       	out	0x3f, r0	; 63
    1036:	cd bf       	out	0x3d, r28	; 61
    1038:	09 94       	ijmp

0000103a <__epilogue_restores__>:
    103a:	2a 88       	ldd	r2, Y+18	; 0x12
    103c:	39 88       	ldd	r3, Y+17	; 0x11
    103e:	48 88       	ldd	r4, Y+16	; 0x10
    1040:	5f 84       	ldd	r5, Y+15	; 0x0f
    1042:	6e 84       	ldd	r6, Y+14	; 0x0e
    1044:	7d 84       	ldd	r7, Y+13	; 0x0d
    1046:	8c 84       	ldd	r8, Y+12	; 0x0c
    1048:	9b 84       	ldd	r9, Y+11	; 0x0b
    104a:	aa 84       	ldd	r10, Y+10	; 0x0a
    104c:	b9 84       	ldd	r11, Y+9	; 0x09
    104e:	c8 84       	ldd	r12, Y+8	; 0x08
    1050:	df 80       	ldd	r13, Y+7	; 0x07
    1052:	ee 80       	ldd	r14, Y+6	; 0x06
    1054:	fd 80       	ldd	r15, Y+5	; 0x05
    1056:	0c 81       	ldd	r16, Y+4	; 0x04
    1058:	1b 81       	ldd	r17, Y+3	; 0x03
    105a:	aa 81       	ldd	r26, Y+2	; 0x02
    105c:	b9 81       	ldd	r27, Y+1	; 0x01
    105e:	ce 0f       	add	r28, r30
    1060:	d1 1d       	adc	r29, r1
    1062:	0f b6       	in	r0, 0x3f	; 63
    1064:	f8 94       	cli
    1066:	de bf       	out	0x3e, r29	; 62
    1068:	0f be       	out	0x3f, r0	; 63
    106a:	cd bf       	out	0x3d, r28	; 61
    106c:	ed 01       	movw	r28, r26
    106e:	08 95       	ret

00001070 <malloc>:
    1070:	cf 93       	push	r28
    1072:	df 93       	push	r29
    1074:	82 30       	cpi	r24, 0x02	; 2
    1076:	91 05       	cpc	r25, r1
    1078:	10 f4       	brcc	.+4      	; 0x107e <malloc+0xe>
    107a:	82 e0       	ldi	r24, 0x02	; 2
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	e0 91 74 01 	lds	r30, 0x0174
    1082:	f0 91 75 01 	lds	r31, 0x0175
    1086:	40 e0       	ldi	r20, 0x00	; 0
    1088:	50 e0       	ldi	r21, 0x00	; 0
    108a:	20 e0       	ldi	r18, 0x00	; 0
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	26 c0       	rjmp	.+76     	; 0x10dc <malloc+0x6c>
    1090:	60 81       	ld	r22, Z
    1092:	71 81       	ldd	r23, Z+1	; 0x01
    1094:	68 17       	cp	r22, r24
    1096:	79 07       	cpc	r23, r25
    1098:	e0 f0       	brcs	.+56     	; 0x10d2 <malloc+0x62>
    109a:	68 17       	cp	r22, r24
    109c:	79 07       	cpc	r23, r25
    109e:	81 f4       	brne	.+32     	; 0x10c0 <malloc+0x50>
    10a0:	82 81       	ldd	r24, Z+2	; 0x02
    10a2:	93 81       	ldd	r25, Z+3	; 0x03
    10a4:	21 15       	cp	r18, r1
    10a6:	31 05       	cpc	r19, r1
    10a8:	31 f0       	breq	.+12     	; 0x10b6 <malloc+0x46>
    10aa:	d9 01       	movw	r26, r18
    10ac:	13 96       	adiw	r26, 0x03	; 3
    10ae:	9c 93       	st	X, r25
    10b0:	8e 93       	st	-X, r24
    10b2:	12 97       	sbiw	r26, 0x02	; 2
    10b4:	2b c0       	rjmp	.+86     	; 0x110c <malloc+0x9c>
    10b6:	90 93 75 01 	sts	0x0175, r25
    10ba:	80 93 74 01 	sts	0x0174, r24
    10be:	26 c0       	rjmp	.+76     	; 0x110c <malloc+0x9c>
    10c0:	41 15       	cp	r20, r1
    10c2:	51 05       	cpc	r21, r1
    10c4:	19 f0       	breq	.+6      	; 0x10cc <malloc+0x5c>
    10c6:	64 17       	cp	r22, r20
    10c8:	75 07       	cpc	r23, r21
    10ca:	18 f4       	brcc	.+6      	; 0x10d2 <malloc+0x62>
    10cc:	ab 01       	movw	r20, r22
    10ce:	e9 01       	movw	r28, r18
    10d0:	df 01       	movw	r26, r30
    10d2:	9f 01       	movw	r18, r30
    10d4:	72 81       	ldd	r23, Z+2	; 0x02
    10d6:	63 81       	ldd	r22, Z+3	; 0x03
    10d8:	e7 2f       	mov	r30, r23
    10da:	f6 2f       	mov	r31, r22
    10dc:	30 97       	sbiw	r30, 0x00	; 0
    10de:	c1 f6       	brne	.-80     	; 0x1090 <malloc+0x20>
    10e0:	41 15       	cp	r20, r1
    10e2:	51 05       	cpc	r21, r1
    10e4:	01 f1       	breq	.+64     	; 0x1126 <malloc+0xb6>
    10e6:	48 1b       	sub	r20, r24
    10e8:	59 0b       	sbc	r21, r25
    10ea:	44 30       	cpi	r20, 0x04	; 4
    10ec:	51 05       	cpc	r21, r1
    10ee:	80 f4       	brcc	.+32     	; 0x1110 <malloc+0xa0>
    10f0:	12 96       	adiw	r26, 0x02	; 2
    10f2:	8d 91       	ld	r24, X+
    10f4:	9c 91       	ld	r25, X
    10f6:	13 97       	sbiw	r26, 0x03	; 3
    10f8:	20 97       	sbiw	r28, 0x00	; 0
    10fa:	19 f0       	breq	.+6      	; 0x1102 <malloc+0x92>
    10fc:	9b 83       	std	Y+3, r25	; 0x03
    10fe:	8a 83       	std	Y+2, r24	; 0x02
    1100:	04 c0       	rjmp	.+8      	; 0x110a <malloc+0x9a>
    1102:	90 93 75 01 	sts	0x0175, r25
    1106:	80 93 74 01 	sts	0x0174, r24
    110a:	fd 01       	movw	r30, r26
    110c:	32 96       	adiw	r30, 0x02	; 2
    110e:	46 c0       	rjmp	.+140    	; 0x119c <malloc+0x12c>
    1110:	fd 01       	movw	r30, r26
    1112:	e4 0f       	add	r30, r20
    1114:	f5 1f       	adc	r31, r21
    1116:	81 93       	st	Z+, r24
    1118:	91 93       	st	Z+, r25
    111a:	42 50       	subi	r20, 0x02	; 2
    111c:	50 40       	sbci	r21, 0x00	; 0
    111e:	11 96       	adiw	r26, 0x01	; 1
    1120:	5c 93       	st	X, r21
    1122:	4e 93       	st	-X, r20
    1124:	3b c0       	rjmp	.+118    	; 0x119c <malloc+0x12c>
    1126:	20 91 72 01 	lds	r18, 0x0172
    112a:	30 91 73 01 	lds	r19, 0x0173
    112e:	21 15       	cp	r18, r1
    1130:	31 05       	cpc	r19, r1
    1132:	41 f4       	brne	.+16     	; 0x1144 <malloc+0xd4>
    1134:	20 91 67 01 	lds	r18, 0x0167
    1138:	30 91 68 01 	lds	r19, 0x0168
    113c:	30 93 73 01 	sts	0x0173, r19
    1140:	20 93 72 01 	sts	0x0172, r18
    1144:	20 91 69 01 	lds	r18, 0x0169
    1148:	30 91 6a 01 	lds	r19, 0x016A
    114c:	21 15       	cp	r18, r1
    114e:	31 05       	cpc	r19, r1
    1150:	41 f4       	brne	.+16     	; 0x1162 <malloc+0xf2>
    1152:	2d b7       	in	r18, 0x3d	; 61
    1154:	3e b7       	in	r19, 0x3e	; 62
    1156:	40 91 65 01 	lds	r20, 0x0165
    115a:	50 91 66 01 	lds	r21, 0x0166
    115e:	24 1b       	sub	r18, r20
    1160:	35 0b       	sbc	r19, r21
    1162:	e0 91 72 01 	lds	r30, 0x0172
    1166:	f0 91 73 01 	lds	r31, 0x0173
    116a:	e2 17       	cp	r30, r18
    116c:	f3 07       	cpc	r31, r19
    116e:	a0 f4       	brcc	.+40     	; 0x1198 <malloc+0x128>
    1170:	2e 1b       	sub	r18, r30
    1172:	3f 0b       	sbc	r19, r31
    1174:	28 17       	cp	r18, r24
    1176:	39 07       	cpc	r19, r25
    1178:	78 f0       	brcs	.+30     	; 0x1198 <malloc+0x128>
    117a:	ac 01       	movw	r20, r24
    117c:	4e 5f       	subi	r20, 0xFE	; 254
    117e:	5f 4f       	sbci	r21, 0xFF	; 255
    1180:	24 17       	cp	r18, r20
    1182:	35 07       	cpc	r19, r21
    1184:	48 f0       	brcs	.+18     	; 0x1198 <malloc+0x128>
    1186:	4e 0f       	add	r20, r30
    1188:	5f 1f       	adc	r21, r31
    118a:	50 93 73 01 	sts	0x0173, r21
    118e:	40 93 72 01 	sts	0x0172, r20
    1192:	81 93       	st	Z+, r24
    1194:	91 93       	st	Z+, r25
    1196:	02 c0       	rjmp	.+4      	; 0x119c <malloc+0x12c>
    1198:	e0 e0       	ldi	r30, 0x00	; 0
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	cf 01       	movw	r24, r30
    119e:	df 91       	pop	r29
    11a0:	cf 91       	pop	r28
    11a2:	08 95       	ret

000011a4 <free>:
    11a4:	cf 93       	push	r28
    11a6:	df 93       	push	r29
    11a8:	00 97       	sbiw	r24, 0x00	; 0
    11aa:	09 f4       	brne	.+2      	; 0x11ae <free+0xa>
    11ac:	91 c0       	rjmp	.+290    	; 0x12d0 <free+0x12c>
    11ae:	fc 01       	movw	r30, r24
    11b0:	32 97       	sbiw	r30, 0x02	; 2
    11b2:	13 82       	std	Z+3, r1	; 0x03
    11b4:	12 82       	std	Z+2, r1	; 0x02
    11b6:	60 91 74 01 	lds	r22, 0x0174
    11ba:	70 91 75 01 	lds	r23, 0x0175
    11be:	61 15       	cp	r22, r1
    11c0:	71 05       	cpc	r23, r1
    11c2:	81 f4       	brne	.+32     	; 0x11e4 <free+0x40>
    11c4:	20 81       	ld	r18, Z
    11c6:	31 81       	ldd	r19, Z+1	; 0x01
    11c8:	28 0f       	add	r18, r24
    11ca:	39 1f       	adc	r19, r25
    11cc:	80 91 72 01 	lds	r24, 0x0172
    11d0:	90 91 73 01 	lds	r25, 0x0173
    11d4:	82 17       	cp	r24, r18
    11d6:	93 07       	cpc	r25, r19
    11d8:	99 f5       	brne	.+102    	; 0x1240 <free+0x9c>
    11da:	f0 93 73 01 	sts	0x0173, r31
    11de:	e0 93 72 01 	sts	0x0172, r30
    11e2:	76 c0       	rjmp	.+236    	; 0x12d0 <free+0x12c>
    11e4:	db 01       	movw	r26, r22
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <free+0x4c>
    11ec:	cd 01       	movw	r24, r26
    11ee:	d9 01       	movw	r26, r18
    11f0:	ae 17       	cp	r26, r30
    11f2:	bf 07       	cpc	r27, r31
    11f4:	48 f4       	brcc	.+18     	; 0x1208 <free+0x64>
    11f6:	12 96       	adiw	r26, 0x02	; 2
    11f8:	2d 91       	ld	r18, X+
    11fa:	3c 91       	ld	r19, X
    11fc:	13 97       	sbiw	r26, 0x03	; 3
    11fe:	21 15       	cp	r18, r1
    1200:	31 05       	cpc	r19, r1
    1202:	a1 f7       	brne	.-24     	; 0x11ec <free+0x48>
    1204:	cd 01       	movw	r24, r26
    1206:	21 c0       	rjmp	.+66     	; 0x124a <free+0xa6>
    1208:	b3 83       	std	Z+3, r27	; 0x03
    120a:	a2 83       	std	Z+2, r26	; 0x02
    120c:	ef 01       	movw	r28, r30
    120e:	49 91       	ld	r20, Y+
    1210:	59 91       	ld	r21, Y+
    1212:	9e 01       	movw	r18, r28
    1214:	24 0f       	add	r18, r20
    1216:	35 1f       	adc	r19, r21
    1218:	a2 17       	cp	r26, r18
    121a:	b3 07       	cpc	r27, r19
    121c:	79 f4       	brne	.+30     	; 0x123c <free+0x98>
    121e:	2d 91       	ld	r18, X+
    1220:	3c 91       	ld	r19, X
    1222:	11 97       	sbiw	r26, 0x01	; 1
    1224:	24 0f       	add	r18, r20
    1226:	35 1f       	adc	r19, r21
    1228:	2e 5f       	subi	r18, 0xFE	; 254
    122a:	3f 4f       	sbci	r19, 0xFF	; 255
    122c:	31 83       	std	Z+1, r19	; 0x01
    122e:	20 83       	st	Z, r18
    1230:	12 96       	adiw	r26, 0x02	; 2
    1232:	2d 91       	ld	r18, X+
    1234:	3c 91       	ld	r19, X
    1236:	13 97       	sbiw	r26, 0x03	; 3
    1238:	33 83       	std	Z+3, r19	; 0x03
    123a:	22 83       	std	Z+2, r18	; 0x02
    123c:	00 97       	sbiw	r24, 0x00	; 0
    123e:	29 f4       	brne	.+10     	; 0x124a <free+0xa6>
    1240:	f0 93 75 01 	sts	0x0175, r31
    1244:	e0 93 74 01 	sts	0x0174, r30
    1248:	43 c0       	rjmp	.+134    	; 0x12d0 <free+0x12c>
    124a:	dc 01       	movw	r26, r24
    124c:	13 96       	adiw	r26, 0x03	; 3
    124e:	fc 93       	st	X, r31
    1250:	ee 93       	st	-X, r30
    1252:	12 97       	sbiw	r26, 0x02	; 2
    1254:	4d 91       	ld	r20, X+
    1256:	5d 91       	ld	r21, X+
    1258:	a4 0f       	add	r26, r20
    125a:	b5 1f       	adc	r27, r21
    125c:	ea 17       	cp	r30, r26
    125e:	fb 07       	cpc	r31, r27
    1260:	69 f4       	brne	.+26     	; 0x127c <free+0xd8>
    1262:	20 81       	ld	r18, Z
    1264:	31 81       	ldd	r19, Z+1	; 0x01
    1266:	24 0f       	add	r18, r20
    1268:	35 1f       	adc	r19, r21
    126a:	2e 5f       	subi	r18, 0xFE	; 254
    126c:	3f 4f       	sbci	r19, 0xFF	; 255
    126e:	ec 01       	movw	r28, r24
    1270:	39 83       	std	Y+1, r19	; 0x01
    1272:	28 83       	st	Y, r18
    1274:	22 81       	ldd	r18, Z+2	; 0x02
    1276:	33 81       	ldd	r19, Z+3	; 0x03
    1278:	3b 83       	std	Y+3, r19	; 0x03
    127a:	2a 83       	std	Y+2, r18	; 0x02
    127c:	e0 e0       	ldi	r30, 0x00	; 0
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <free+0xe2>
    1282:	fb 01       	movw	r30, r22
    1284:	bc 01       	movw	r22, r24
    1286:	db 01       	movw	r26, r22
    1288:	12 96       	adiw	r26, 0x02	; 2
    128a:	8d 91       	ld	r24, X+
    128c:	9c 91       	ld	r25, X
    128e:	13 97       	sbiw	r26, 0x03	; 3
    1290:	00 97       	sbiw	r24, 0x00	; 0
    1292:	b9 f7       	brne	.-18     	; 0x1282 <free+0xde>
    1294:	9b 01       	movw	r18, r22
    1296:	2e 5f       	subi	r18, 0xFE	; 254
    1298:	3f 4f       	sbci	r19, 0xFF	; 255
    129a:	8d 91       	ld	r24, X+
    129c:	9c 91       	ld	r25, X
    129e:	11 97       	sbiw	r26, 0x01	; 1
    12a0:	82 0f       	add	r24, r18
    12a2:	93 1f       	adc	r25, r19
    12a4:	40 91 72 01 	lds	r20, 0x0172
    12a8:	50 91 73 01 	lds	r21, 0x0173
    12ac:	48 17       	cp	r20, r24
    12ae:	59 07       	cpc	r21, r25
    12b0:	79 f4       	brne	.+30     	; 0x12d0 <free+0x12c>
    12b2:	30 97       	sbiw	r30, 0x00	; 0
    12b4:	29 f4       	brne	.+10     	; 0x12c0 <free+0x11c>
    12b6:	10 92 75 01 	sts	0x0175, r1
    12ba:	10 92 74 01 	sts	0x0174, r1
    12be:	02 c0       	rjmp	.+4      	; 0x12c4 <free+0x120>
    12c0:	13 82       	std	Z+3, r1	; 0x03
    12c2:	12 82       	std	Z+2, r1	; 0x02
    12c4:	22 50       	subi	r18, 0x02	; 2
    12c6:	30 40       	sbci	r19, 0x00	; 0
    12c8:	30 93 73 01 	sts	0x0173, r19
    12cc:	20 93 72 01 	sts	0x0172, r18
    12d0:	df 91       	pop	r29
    12d2:	cf 91       	pop	r28
    12d4:	08 95       	ret

000012d6 <printf>:
    12d6:	a0 e0       	ldi	r26, 0x00	; 0
    12d8:	b0 e0       	ldi	r27, 0x00	; 0
    12da:	e1 e7       	ldi	r30, 0x71	; 113
    12dc:	f9 e0       	ldi	r31, 0x09	; 9
    12de:	0c 94 11 08 	jmp	0x1022	; 0x1022 <__prologue_saves__+0x20>
    12e2:	fe 01       	movw	r30, r28
    12e4:	35 96       	adiw	r30, 0x05	; 5
    12e6:	61 91       	ld	r22, Z+
    12e8:	71 91       	ld	r23, Z+
    12ea:	80 91 78 01 	lds	r24, 0x0178
    12ee:	90 91 79 01 	lds	r25, 0x0179
    12f2:	af 01       	movw	r20, r30
    12f4:	0e 94 b5 09 	call	0x136a	; 0x136a <vfprintf>
    12f8:	20 96       	adiw	r28, 0x00	; 0
    12fa:	e2 e0       	ldi	r30, 0x02	; 2
    12fc:	0c 94 2d 08 	jmp	0x105a	; 0x105a <__epilogue_restores__+0x20>

00001300 <puts>:
    1300:	ef 92       	push	r14
    1302:	ff 92       	push	r15
    1304:	0f 93       	push	r16
    1306:	1f 93       	push	r17
    1308:	cf 93       	push	r28
    130a:	df 93       	push	r29
    130c:	8c 01       	movw	r16, r24
    130e:	e0 91 78 01 	lds	r30, 0x0178
    1312:	f0 91 79 01 	lds	r31, 0x0179
    1316:	83 81       	ldd	r24, Z+3	; 0x03
    1318:	81 ff       	sbrs	r24, 1
    131a:	1f c0       	rjmp	.+62     	; 0x135a <puts+0x5a>
    131c:	c0 e0       	ldi	r28, 0x00	; 0
    131e:	d0 e0       	ldi	r29, 0x00	; 0
    1320:	0a c0       	rjmp	.+20     	; 0x1336 <puts+0x36>
    1322:	db 01       	movw	r26, r22
    1324:	18 96       	adiw	r26, 0x08	; 8
    1326:	ed 91       	ld	r30, X+
    1328:	fc 91       	ld	r31, X
    132a:	19 97       	sbiw	r26, 0x09	; 9
    132c:	09 95       	icall
    132e:	00 97       	sbiw	r24, 0x00	; 0
    1330:	11 f0       	breq	.+4      	; 0x1336 <puts+0x36>
    1332:	cf ef       	ldi	r28, 0xFF	; 255
    1334:	df ef       	ldi	r29, 0xFF	; 255
    1336:	f8 01       	movw	r30, r16
    1338:	81 91       	ld	r24, Z+
    133a:	8f 01       	movw	r16, r30
    133c:	60 91 78 01 	lds	r22, 0x0178
    1340:	70 91 79 01 	lds	r23, 0x0179
    1344:	88 23       	and	r24, r24
    1346:	69 f7       	brne	.-38     	; 0x1322 <puts+0x22>
    1348:	db 01       	movw	r26, r22
    134a:	18 96       	adiw	r26, 0x08	; 8
    134c:	ed 91       	ld	r30, X+
    134e:	fc 91       	ld	r31, X
    1350:	19 97       	sbiw	r26, 0x09	; 9
    1352:	8a e0       	ldi	r24, 0x0A	; 10
    1354:	09 95       	icall
    1356:	00 97       	sbiw	r24, 0x00	; 0
    1358:	11 f0       	breq	.+4      	; 0x135e <puts+0x5e>
    135a:	cf ef       	ldi	r28, 0xFF	; 255
    135c:	df ef       	ldi	r29, 0xFF	; 255
    135e:	ce 01       	movw	r24, r28
    1360:	cd b7       	in	r28, 0x3d	; 61
    1362:	de b7       	in	r29, 0x3e	; 62
    1364:	e6 e0       	ldi	r30, 0x06	; 6
    1366:	0c 94 29 08 	jmp	0x1052	; 0x1052 <__epilogue_restores__+0x18>

0000136a <vfprintf>:
    136a:	ac e0       	ldi	r26, 0x0C	; 12
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	eb eb       	ldi	r30, 0xBB	; 187
    1370:	f9 e0       	ldi	r31, 0x09	; 9
    1372:	0c 94 01 08 	jmp	0x1002	; 0x1002 <__prologue_saves__>
    1376:	6c 01       	movw	r12, r24
    1378:	1b 01       	movw	r2, r22
    137a:	8a 01       	movw	r16, r20
    137c:	fc 01       	movw	r30, r24
    137e:	17 82       	std	Z+7, r1	; 0x07
    1380:	16 82       	std	Z+6, r1	; 0x06
    1382:	83 81       	ldd	r24, Z+3	; 0x03
    1384:	81 ff       	sbrs	r24, 1
    1386:	d1 c1       	rjmp	.+930    	; 0x172a <vfprintf+0x3c0>
    1388:	2e 01       	movw	r4, r28
    138a:	08 94       	sec
    138c:	41 1c       	adc	r4, r1
    138e:	51 1c       	adc	r5, r1
    1390:	f6 01       	movw	r30, r12
    1392:	93 81       	ldd	r25, Z+3	; 0x03
    1394:	f1 01       	movw	r30, r2
    1396:	93 fd       	sbrc	r25, 3
    1398:	85 91       	lpm	r24, Z+
    139a:	93 ff       	sbrs	r25, 3
    139c:	81 91       	ld	r24, Z+
    139e:	1f 01       	movw	r2, r30
    13a0:	88 23       	and	r24, r24
    13a2:	09 f4       	brne	.+2      	; 0x13a6 <vfprintf+0x3c>
    13a4:	be c1       	rjmp	.+892    	; 0x1722 <vfprintf+0x3b8>
    13a6:	85 32       	cpi	r24, 0x25	; 37
    13a8:	39 f4       	brne	.+14     	; 0x13b8 <vfprintf+0x4e>
    13aa:	93 fd       	sbrc	r25, 3
    13ac:	85 91       	lpm	r24, Z+
    13ae:	93 ff       	sbrs	r25, 3
    13b0:	81 91       	ld	r24, Z+
    13b2:	1f 01       	movw	r2, r30
    13b4:	85 32       	cpi	r24, 0x25	; 37
    13b6:	29 f4       	brne	.+10     	; 0x13c2 <vfprintf+0x58>
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	b6 01       	movw	r22, r12
    13bc:	0e 94 b2 0b 	call	0x1764	; 0x1764 <fputc>
    13c0:	e7 cf       	rjmp	.-50     	; 0x1390 <vfprintf+0x26>
    13c2:	ee 24       	eor	r14, r14
    13c4:	ff 24       	eor	r15, r15
    13c6:	20 e0       	ldi	r18, 0x00	; 0
    13c8:	20 32       	cpi	r18, 0x20	; 32
    13ca:	b0 f4       	brcc	.+44     	; 0x13f8 <vfprintf+0x8e>
    13cc:	8b 32       	cpi	r24, 0x2B	; 43
    13ce:	69 f0       	breq	.+26     	; 0x13ea <vfprintf+0x80>
    13d0:	8c 32       	cpi	r24, 0x2C	; 44
    13d2:	28 f4       	brcc	.+10     	; 0x13de <vfprintf+0x74>
    13d4:	80 32       	cpi	r24, 0x20	; 32
    13d6:	51 f0       	breq	.+20     	; 0x13ec <vfprintf+0x82>
    13d8:	83 32       	cpi	r24, 0x23	; 35
    13da:	71 f4       	brne	.+28     	; 0x13f8 <vfprintf+0x8e>
    13dc:	0b c0       	rjmp	.+22     	; 0x13f4 <vfprintf+0x8a>
    13de:	8d 32       	cpi	r24, 0x2D	; 45
    13e0:	39 f0       	breq	.+14     	; 0x13f0 <vfprintf+0x86>
    13e2:	80 33       	cpi	r24, 0x30	; 48
    13e4:	49 f4       	brne	.+18     	; 0x13f8 <vfprintf+0x8e>
    13e6:	21 60       	ori	r18, 0x01	; 1
    13e8:	2c c0       	rjmp	.+88     	; 0x1442 <vfprintf+0xd8>
    13ea:	22 60       	ori	r18, 0x02	; 2
    13ec:	24 60       	ori	r18, 0x04	; 4
    13ee:	29 c0       	rjmp	.+82     	; 0x1442 <vfprintf+0xd8>
    13f0:	28 60       	ori	r18, 0x08	; 8
    13f2:	27 c0       	rjmp	.+78     	; 0x1442 <vfprintf+0xd8>
    13f4:	20 61       	ori	r18, 0x10	; 16
    13f6:	25 c0       	rjmp	.+74     	; 0x1442 <vfprintf+0xd8>
    13f8:	27 fd       	sbrc	r18, 7
    13fa:	2c c0       	rjmp	.+88     	; 0x1454 <vfprintf+0xea>
    13fc:	38 2f       	mov	r19, r24
    13fe:	30 53       	subi	r19, 0x30	; 48
    1400:	3a 30       	cpi	r19, 0x0A	; 10
    1402:	98 f4       	brcc	.+38     	; 0x142a <vfprintf+0xc0>
    1404:	26 ff       	sbrs	r18, 6
    1406:	08 c0       	rjmp	.+16     	; 0x1418 <vfprintf+0xae>
    1408:	8e 2d       	mov	r24, r14
    140a:	88 0f       	add	r24, r24
    140c:	e8 2e       	mov	r14, r24
    140e:	ee 0c       	add	r14, r14
    1410:	ee 0c       	add	r14, r14
    1412:	e8 0e       	add	r14, r24
    1414:	e3 0e       	add	r14, r19
    1416:	15 c0       	rjmp	.+42     	; 0x1442 <vfprintf+0xd8>
    1418:	8f 2d       	mov	r24, r15
    141a:	88 0f       	add	r24, r24
    141c:	f8 2e       	mov	r15, r24
    141e:	ff 0c       	add	r15, r15
    1420:	ff 0c       	add	r15, r15
    1422:	f8 0e       	add	r15, r24
    1424:	f3 0e       	add	r15, r19
    1426:	20 62       	ori	r18, 0x20	; 32
    1428:	0c c0       	rjmp	.+24     	; 0x1442 <vfprintf+0xd8>
    142a:	8e 32       	cpi	r24, 0x2E	; 46
    142c:	21 f4       	brne	.+8      	; 0x1436 <vfprintf+0xcc>
    142e:	26 fd       	sbrc	r18, 6
    1430:	78 c1       	rjmp	.+752    	; 0x1722 <vfprintf+0x3b8>
    1432:	20 64       	ori	r18, 0x40	; 64
    1434:	06 c0       	rjmp	.+12     	; 0x1442 <vfprintf+0xd8>
    1436:	8c 36       	cpi	r24, 0x6C	; 108
    1438:	11 f4       	brne	.+4      	; 0x143e <vfprintf+0xd4>
    143a:	20 68       	ori	r18, 0x80	; 128
    143c:	02 c0       	rjmp	.+4      	; 0x1442 <vfprintf+0xd8>
    143e:	88 36       	cpi	r24, 0x68	; 104
    1440:	49 f4       	brne	.+18     	; 0x1454 <vfprintf+0xea>
    1442:	f1 01       	movw	r30, r2
    1444:	93 fd       	sbrc	r25, 3
    1446:	85 91       	lpm	r24, Z+
    1448:	93 ff       	sbrs	r25, 3
    144a:	81 91       	ld	r24, Z+
    144c:	1f 01       	movw	r2, r30
    144e:	88 23       	and	r24, r24
    1450:	09 f0       	breq	.+2      	; 0x1454 <vfprintf+0xea>
    1452:	ba cf       	rjmp	.-140    	; 0x13c8 <vfprintf+0x5e>
    1454:	98 2f       	mov	r25, r24
    1456:	95 54       	subi	r25, 0x45	; 69
    1458:	93 30       	cpi	r25, 0x03	; 3
    145a:	18 f0       	brcs	.+6      	; 0x1462 <vfprintf+0xf8>
    145c:	90 52       	subi	r25, 0x20	; 32
    145e:	93 30       	cpi	r25, 0x03	; 3
    1460:	28 f4       	brcc	.+10     	; 0x146c <vfprintf+0x102>
    1462:	0c 5f       	subi	r16, 0xFC	; 252
    1464:	1f 4f       	sbci	r17, 0xFF	; 255
    1466:	ff e3       	ldi	r31, 0x3F	; 63
    1468:	f9 83       	std	Y+1, r31	; 0x01
    146a:	0d c0       	rjmp	.+26     	; 0x1486 <vfprintf+0x11c>
    146c:	83 36       	cpi	r24, 0x63	; 99
    146e:	31 f0       	breq	.+12     	; 0x147c <vfprintf+0x112>
    1470:	83 37       	cpi	r24, 0x73	; 115
    1472:	71 f0       	breq	.+28     	; 0x1490 <vfprintf+0x126>
    1474:	83 35       	cpi	r24, 0x53	; 83
    1476:	09 f0       	breq	.+2      	; 0x147a <vfprintf+0x110>
    1478:	60 c0       	rjmp	.+192    	; 0x153a <vfprintf+0x1d0>
    147a:	22 c0       	rjmp	.+68     	; 0x14c0 <vfprintf+0x156>
    147c:	f8 01       	movw	r30, r16
    147e:	80 81       	ld	r24, Z
    1480:	89 83       	std	Y+1, r24	; 0x01
    1482:	0e 5f       	subi	r16, 0xFE	; 254
    1484:	1f 4f       	sbci	r17, 0xFF	; 255
    1486:	42 01       	movw	r8, r4
    1488:	71 e0       	ldi	r23, 0x01	; 1
    148a:	a7 2e       	mov	r10, r23
    148c:	b1 2c       	mov	r11, r1
    148e:	16 c0       	rjmp	.+44     	; 0x14bc <vfprintf+0x152>
    1490:	62 e0       	ldi	r22, 0x02	; 2
    1492:	66 2e       	mov	r6, r22
    1494:	71 2c       	mov	r7, r1
    1496:	60 0e       	add	r6, r16
    1498:	71 1e       	adc	r7, r17
    149a:	f8 01       	movw	r30, r16
    149c:	80 80       	ld	r8, Z
    149e:	91 80       	ldd	r9, Z+1	; 0x01
    14a0:	26 ff       	sbrs	r18, 6
    14a2:	03 c0       	rjmp	.+6      	; 0x14aa <vfprintf+0x140>
    14a4:	6e 2d       	mov	r22, r14
    14a6:	70 e0       	ldi	r23, 0x00	; 0
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <vfprintf+0x144>
    14aa:	6f ef       	ldi	r22, 0xFF	; 255
    14ac:	7f ef       	ldi	r23, 0xFF	; 255
    14ae:	c4 01       	movw	r24, r8
    14b0:	2c 87       	std	Y+12, r18	; 0x0c
    14b2:	0e 94 a7 0b 	call	0x174e	; 0x174e <strnlen>
    14b6:	5c 01       	movw	r10, r24
    14b8:	83 01       	movw	r16, r6
    14ba:	2c 85       	ldd	r18, Y+12	; 0x0c
    14bc:	2f 77       	andi	r18, 0x7F	; 127
    14be:	17 c0       	rjmp	.+46     	; 0x14ee <vfprintf+0x184>
    14c0:	52 e0       	ldi	r21, 0x02	; 2
    14c2:	65 2e       	mov	r6, r21
    14c4:	71 2c       	mov	r7, r1
    14c6:	60 0e       	add	r6, r16
    14c8:	71 1e       	adc	r7, r17
    14ca:	f8 01       	movw	r30, r16
    14cc:	80 80       	ld	r8, Z
    14ce:	91 80       	ldd	r9, Z+1	; 0x01
    14d0:	26 ff       	sbrs	r18, 6
    14d2:	03 c0       	rjmp	.+6      	; 0x14da <vfprintf+0x170>
    14d4:	6e 2d       	mov	r22, r14
    14d6:	70 e0       	ldi	r23, 0x00	; 0
    14d8:	02 c0       	rjmp	.+4      	; 0x14de <vfprintf+0x174>
    14da:	6f ef       	ldi	r22, 0xFF	; 255
    14dc:	7f ef       	ldi	r23, 0xFF	; 255
    14de:	c4 01       	movw	r24, r8
    14e0:	2c 87       	std	Y+12, r18	; 0x0c
    14e2:	0e 94 9c 0b 	call	0x1738	; 0x1738 <strnlen_P>
    14e6:	5c 01       	movw	r10, r24
    14e8:	2c 85       	ldd	r18, Y+12	; 0x0c
    14ea:	20 68       	ori	r18, 0x80	; 128
    14ec:	83 01       	movw	r16, r6
    14ee:	23 fd       	sbrc	r18, 3
    14f0:	20 c0       	rjmp	.+64     	; 0x1532 <vfprintf+0x1c8>
    14f2:	08 c0       	rjmp	.+16     	; 0x1504 <vfprintf+0x19a>
    14f4:	80 e2       	ldi	r24, 0x20	; 32
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	b6 01       	movw	r22, r12
    14fa:	2c 87       	std	Y+12, r18	; 0x0c
    14fc:	0e 94 b2 0b 	call	0x1764	; 0x1764 <fputc>
    1500:	fa 94       	dec	r15
    1502:	2c 85       	ldd	r18, Y+12	; 0x0c
    1504:	8f 2d       	mov	r24, r15
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	a8 16       	cp	r10, r24
    150a:	b9 06       	cpc	r11, r25
    150c:	98 f3       	brcs	.-26     	; 0x14f4 <vfprintf+0x18a>
    150e:	11 c0       	rjmp	.+34     	; 0x1532 <vfprintf+0x1c8>
    1510:	f4 01       	movw	r30, r8
    1512:	27 fd       	sbrc	r18, 7
    1514:	85 91       	lpm	r24, Z+
    1516:	27 ff       	sbrs	r18, 7
    1518:	81 91       	ld	r24, Z+
    151a:	4f 01       	movw	r8, r30
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	b6 01       	movw	r22, r12
    1520:	2c 87       	std	Y+12, r18	; 0x0c
    1522:	0e 94 b2 0b 	call	0x1764	; 0x1764 <fputc>
    1526:	2c 85       	ldd	r18, Y+12	; 0x0c
    1528:	f1 10       	cpse	r15, r1
    152a:	fa 94       	dec	r15
    152c:	08 94       	sec
    152e:	a1 08       	sbc	r10, r1
    1530:	b1 08       	sbc	r11, r1
    1532:	a1 14       	cp	r10, r1
    1534:	b1 04       	cpc	r11, r1
    1536:	61 f7       	brne	.-40     	; 0x1510 <vfprintf+0x1a6>
    1538:	f1 c0       	rjmp	.+482    	; 0x171c <vfprintf+0x3b2>
    153a:	84 36       	cpi	r24, 0x64	; 100
    153c:	11 f0       	breq	.+4      	; 0x1542 <vfprintf+0x1d8>
    153e:	89 36       	cpi	r24, 0x69	; 105
    1540:	49 f5       	brne	.+82     	; 0x1594 <vfprintf+0x22a>
    1542:	27 ff       	sbrs	r18, 7
    1544:	08 c0       	rjmp	.+16     	; 0x1556 <vfprintf+0x1ec>
    1546:	f8 01       	movw	r30, r16
    1548:	60 81       	ld	r22, Z
    154a:	71 81       	ldd	r23, Z+1	; 0x01
    154c:	82 81       	ldd	r24, Z+2	; 0x02
    154e:	93 81       	ldd	r25, Z+3	; 0x03
    1550:	0c 5f       	subi	r16, 0xFC	; 252
    1552:	1f 4f       	sbci	r17, 0xFF	; 255
    1554:	09 c0       	rjmp	.+18     	; 0x1568 <vfprintf+0x1fe>
    1556:	f8 01       	movw	r30, r16
    1558:	60 81       	ld	r22, Z
    155a:	71 81       	ldd	r23, Z+1	; 0x01
    155c:	88 27       	eor	r24, r24
    155e:	77 fd       	sbrc	r23, 7
    1560:	80 95       	com	r24
    1562:	98 2f       	mov	r25, r24
    1564:	0e 5f       	subi	r16, 0xFE	; 254
    1566:	1f 4f       	sbci	r17, 0xFF	; 255
    1568:	4f e6       	ldi	r20, 0x6F	; 111
    156a:	b4 2e       	mov	r11, r20
    156c:	b2 22       	and	r11, r18
    156e:	97 ff       	sbrs	r25, 7
    1570:	09 c0       	rjmp	.+18     	; 0x1584 <vfprintf+0x21a>
    1572:	90 95       	com	r25
    1574:	80 95       	com	r24
    1576:	70 95       	com	r23
    1578:	61 95       	neg	r22
    157a:	7f 4f       	sbci	r23, 0xFF	; 255
    157c:	8f 4f       	sbci	r24, 0xFF	; 255
    157e:	9f 4f       	sbci	r25, 0xFF	; 255
    1580:	f0 e8       	ldi	r31, 0x80	; 128
    1582:	bf 2a       	or	r11, r31
    1584:	a2 01       	movw	r20, r4
    1586:	2a e0       	ldi	r18, 0x0A	; 10
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	0e 94 de 0b 	call	0x17bc	; 0x17bc <__ultoa_invert>
    158e:	78 2e       	mov	r7, r24
    1590:	74 18       	sub	r7, r4
    1592:	45 c0       	rjmp	.+138    	; 0x161e <vfprintf+0x2b4>
    1594:	85 37       	cpi	r24, 0x75	; 117
    1596:	31 f4       	brne	.+12     	; 0x15a4 <vfprintf+0x23a>
    1598:	3f ee       	ldi	r19, 0xEF	; 239
    159a:	b3 2e       	mov	r11, r19
    159c:	b2 22       	and	r11, r18
    159e:	2a e0       	ldi	r18, 0x0A	; 10
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	25 c0       	rjmp	.+74     	; 0x15ee <vfprintf+0x284>
    15a4:	99 ef       	ldi	r25, 0xF9	; 249
    15a6:	b9 2e       	mov	r11, r25
    15a8:	b2 22       	and	r11, r18
    15aa:	8f 36       	cpi	r24, 0x6F	; 111
    15ac:	c1 f0       	breq	.+48     	; 0x15de <vfprintf+0x274>
    15ae:	80 37       	cpi	r24, 0x70	; 112
    15b0:	20 f4       	brcc	.+8      	; 0x15ba <vfprintf+0x250>
    15b2:	88 35       	cpi	r24, 0x58	; 88
    15b4:	09 f0       	breq	.+2      	; 0x15b8 <vfprintf+0x24e>
    15b6:	b5 c0       	rjmp	.+362    	; 0x1722 <vfprintf+0x3b8>
    15b8:	0d c0       	rjmp	.+26     	; 0x15d4 <vfprintf+0x26a>
    15ba:	80 37       	cpi	r24, 0x70	; 112
    15bc:	21 f0       	breq	.+8      	; 0x15c6 <vfprintf+0x25c>
    15be:	88 37       	cpi	r24, 0x78	; 120
    15c0:	09 f0       	breq	.+2      	; 0x15c4 <vfprintf+0x25a>
    15c2:	af c0       	rjmp	.+350    	; 0x1722 <vfprintf+0x3b8>
    15c4:	02 c0       	rjmp	.+4      	; 0x15ca <vfprintf+0x260>
    15c6:	20 e1       	ldi	r18, 0x10	; 16
    15c8:	b2 2a       	or	r11, r18
    15ca:	b4 fe       	sbrs	r11, 4
    15cc:	0b c0       	rjmp	.+22     	; 0x15e4 <vfprintf+0x27a>
    15ce:	84 e0       	ldi	r24, 0x04	; 4
    15d0:	b8 2a       	or	r11, r24
    15d2:	08 c0       	rjmp	.+16     	; 0x15e4 <vfprintf+0x27a>
    15d4:	b4 fe       	sbrs	r11, 4
    15d6:	09 c0       	rjmp	.+18     	; 0x15ea <vfprintf+0x280>
    15d8:	e6 e0       	ldi	r30, 0x06	; 6
    15da:	be 2a       	or	r11, r30
    15dc:	06 c0       	rjmp	.+12     	; 0x15ea <vfprintf+0x280>
    15de:	28 e0       	ldi	r18, 0x08	; 8
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	05 c0       	rjmp	.+10     	; 0x15ee <vfprintf+0x284>
    15e4:	20 e1       	ldi	r18, 0x10	; 16
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	02 c0       	rjmp	.+4      	; 0x15ee <vfprintf+0x284>
    15ea:	20 e1       	ldi	r18, 0x10	; 16
    15ec:	32 e0       	ldi	r19, 0x02	; 2
    15ee:	b7 fe       	sbrs	r11, 7
    15f0:	08 c0       	rjmp	.+16     	; 0x1602 <vfprintf+0x298>
    15f2:	f8 01       	movw	r30, r16
    15f4:	60 81       	ld	r22, Z
    15f6:	71 81       	ldd	r23, Z+1	; 0x01
    15f8:	82 81       	ldd	r24, Z+2	; 0x02
    15fa:	93 81       	ldd	r25, Z+3	; 0x03
    15fc:	0c 5f       	subi	r16, 0xFC	; 252
    15fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1600:	07 c0       	rjmp	.+14     	; 0x1610 <vfprintf+0x2a6>
    1602:	f8 01       	movw	r30, r16
    1604:	60 81       	ld	r22, Z
    1606:	71 81       	ldd	r23, Z+1	; 0x01
    1608:	80 e0       	ldi	r24, 0x00	; 0
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	0e 5f       	subi	r16, 0xFE	; 254
    160e:	1f 4f       	sbci	r17, 0xFF	; 255
    1610:	a2 01       	movw	r20, r4
    1612:	0e 94 de 0b 	call	0x17bc	; 0x17bc <__ultoa_invert>
    1616:	78 2e       	mov	r7, r24
    1618:	74 18       	sub	r7, r4
    161a:	ff e7       	ldi	r31, 0x7F	; 127
    161c:	bf 22       	and	r11, r31
    161e:	b6 fe       	sbrs	r11, 6
    1620:	0b c0       	rjmp	.+22     	; 0x1638 <vfprintf+0x2ce>
    1622:	2e ef       	ldi	r18, 0xFE	; 254
    1624:	b2 22       	and	r11, r18
    1626:	7e 14       	cp	r7, r14
    1628:	38 f4       	brcc	.+14     	; 0x1638 <vfprintf+0x2ce>
    162a:	b4 fe       	sbrs	r11, 4
    162c:	07 c0       	rjmp	.+14     	; 0x163c <vfprintf+0x2d2>
    162e:	b2 fc       	sbrc	r11, 2
    1630:	05 c0       	rjmp	.+10     	; 0x163c <vfprintf+0x2d2>
    1632:	8f ee       	ldi	r24, 0xEF	; 239
    1634:	b8 22       	and	r11, r24
    1636:	02 c0       	rjmp	.+4      	; 0x163c <vfprintf+0x2d2>
    1638:	a7 2c       	mov	r10, r7
    163a:	01 c0       	rjmp	.+2      	; 0x163e <vfprintf+0x2d4>
    163c:	ae 2c       	mov	r10, r14
    163e:	8b 2d       	mov	r24, r11
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	b4 fe       	sbrs	r11, 4
    1644:	0d c0       	rjmp	.+26     	; 0x1660 <vfprintf+0x2f6>
    1646:	fe 01       	movw	r30, r28
    1648:	e7 0d       	add	r30, r7
    164a:	f1 1d       	adc	r31, r1
    164c:	20 81       	ld	r18, Z
    164e:	20 33       	cpi	r18, 0x30	; 48
    1650:	19 f4       	brne	.+6      	; 0x1658 <vfprintf+0x2ee>
    1652:	e9 ee       	ldi	r30, 0xE9	; 233
    1654:	be 22       	and	r11, r30
    1656:	09 c0       	rjmp	.+18     	; 0x166a <vfprintf+0x300>
    1658:	a3 94       	inc	r10
    165a:	b2 fe       	sbrs	r11, 2
    165c:	06 c0       	rjmp	.+12     	; 0x166a <vfprintf+0x300>
    165e:	04 c0       	rjmp	.+8      	; 0x1668 <vfprintf+0x2fe>
    1660:	86 78       	andi	r24, 0x86	; 134
    1662:	90 70       	andi	r25, 0x00	; 0
    1664:	00 97       	sbiw	r24, 0x00	; 0
    1666:	09 f0       	breq	.+2      	; 0x166a <vfprintf+0x300>
    1668:	a3 94       	inc	r10
    166a:	8b 2c       	mov	r8, r11
    166c:	99 24       	eor	r9, r9
    166e:	b3 fc       	sbrc	r11, 3
    1670:	14 c0       	rjmp	.+40     	; 0x169a <vfprintf+0x330>
    1672:	b0 fe       	sbrs	r11, 0
    1674:	0f c0       	rjmp	.+30     	; 0x1694 <vfprintf+0x32a>
    1676:	af 14       	cp	r10, r15
    1678:	28 f4       	brcc	.+10     	; 0x1684 <vfprintf+0x31a>
    167a:	e7 2c       	mov	r14, r7
    167c:	ef 0c       	add	r14, r15
    167e:	ea 18       	sub	r14, r10
    1680:	af 2c       	mov	r10, r15
    1682:	08 c0       	rjmp	.+16     	; 0x1694 <vfprintf+0x32a>
    1684:	e7 2c       	mov	r14, r7
    1686:	06 c0       	rjmp	.+12     	; 0x1694 <vfprintf+0x32a>
    1688:	80 e2       	ldi	r24, 0x20	; 32
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	b6 01       	movw	r22, r12
    168e:	0e 94 b2 0b 	call	0x1764	; 0x1764 <fputc>
    1692:	a3 94       	inc	r10
    1694:	af 14       	cp	r10, r15
    1696:	c0 f3       	brcs	.-16     	; 0x1688 <vfprintf+0x31e>
    1698:	04 c0       	rjmp	.+8      	; 0x16a2 <vfprintf+0x338>
    169a:	af 14       	cp	r10, r15
    169c:	10 f4       	brcc	.+4      	; 0x16a2 <vfprintf+0x338>
    169e:	fa 18       	sub	r15, r10
    16a0:	01 c0       	rjmp	.+2      	; 0x16a4 <vfprintf+0x33a>
    16a2:	ff 24       	eor	r15, r15
    16a4:	84 fe       	sbrs	r8, 4
    16a6:	0f c0       	rjmp	.+30     	; 0x16c6 <vfprintf+0x35c>
    16a8:	80 e3       	ldi	r24, 0x30	; 48
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	b6 01       	movw	r22, r12
    16ae:	0e 94 b2 0b 	call	0x1764	; 0x1764 <fputc>
    16b2:	82 fe       	sbrs	r8, 2
    16b4:	1f c0       	rjmp	.+62     	; 0x16f4 <vfprintf+0x38a>
    16b6:	81 fe       	sbrs	r8, 1
    16b8:	03 c0       	rjmp	.+6      	; 0x16c0 <vfprintf+0x356>
    16ba:	88 e5       	ldi	r24, 0x58	; 88
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	10 c0       	rjmp	.+32     	; 0x16e0 <vfprintf+0x376>
    16c0:	88 e7       	ldi	r24, 0x78	; 120
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	0d c0       	rjmp	.+26     	; 0x16e0 <vfprintf+0x376>
    16c6:	c4 01       	movw	r24, r8
    16c8:	86 78       	andi	r24, 0x86	; 134
    16ca:	90 70       	andi	r25, 0x00	; 0
    16cc:	00 97       	sbiw	r24, 0x00	; 0
    16ce:	91 f0       	breq	.+36     	; 0x16f4 <vfprintf+0x38a>
    16d0:	81 fc       	sbrc	r8, 1
    16d2:	02 c0       	rjmp	.+4      	; 0x16d8 <vfprintf+0x36e>
    16d4:	80 e2       	ldi	r24, 0x20	; 32
    16d6:	01 c0       	rjmp	.+2      	; 0x16da <vfprintf+0x370>
    16d8:	8b e2       	ldi	r24, 0x2B	; 43
    16da:	b7 fc       	sbrc	r11, 7
    16dc:	8d e2       	ldi	r24, 0x2D	; 45
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	b6 01       	movw	r22, r12
    16e2:	0e 94 b2 0b 	call	0x1764	; 0x1764 <fputc>
    16e6:	06 c0       	rjmp	.+12     	; 0x16f4 <vfprintf+0x38a>
    16e8:	80 e3       	ldi	r24, 0x30	; 48
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	b6 01       	movw	r22, r12
    16ee:	0e 94 b2 0b 	call	0x1764	; 0x1764 <fputc>
    16f2:	ea 94       	dec	r14
    16f4:	7e 14       	cp	r7, r14
    16f6:	c0 f3       	brcs	.-16     	; 0x16e8 <vfprintf+0x37e>
    16f8:	7a 94       	dec	r7
    16fa:	f2 01       	movw	r30, r4
    16fc:	e7 0d       	add	r30, r7
    16fe:	f1 1d       	adc	r31, r1
    1700:	80 81       	ld	r24, Z
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	b6 01       	movw	r22, r12
    1706:	0e 94 b2 0b 	call	0x1764	; 0x1764 <fputc>
    170a:	77 20       	and	r7, r7
    170c:	a9 f7       	brne	.-22     	; 0x16f8 <vfprintf+0x38e>
    170e:	06 c0       	rjmp	.+12     	; 0x171c <vfprintf+0x3b2>
    1710:	80 e2       	ldi	r24, 0x20	; 32
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	b6 01       	movw	r22, r12
    1716:	0e 94 b2 0b 	call	0x1764	; 0x1764 <fputc>
    171a:	fa 94       	dec	r15
    171c:	ff 20       	and	r15, r15
    171e:	c1 f7       	brne	.-16     	; 0x1710 <vfprintf+0x3a6>
    1720:	37 ce       	rjmp	.-914    	; 0x1390 <vfprintf+0x26>
    1722:	f6 01       	movw	r30, r12
    1724:	26 81       	ldd	r18, Z+6	; 0x06
    1726:	37 81       	ldd	r19, Z+7	; 0x07
    1728:	02 c0       	rjmp	.+4      	; 0x172e <vfprintf+0x3c4>
    172a:	2f ef       	ldi	r18, 0xFF	; 255
    172c:	3f ef       	ldi	r19, 0xFF	; 255
    172e:	c9 01       	movw	r24, r18
    1730:	2c 96       	adiw	r28, 0x0c	; 12
    1732:	e2 e1       	ldi	r30, 0x12	; 18
    1734:	0c 94 1d 08 	jmp	0x103a	; 0x103a <__epilogue_restores__>

00001738 <strnlen_P>:
    1738:	fc 01       	movw	r30, r24
    173a:	05 90       	lpm	r0, Z+
    173c:	61 50       	subi	r22, 0x01	; 1
    173e:	70 40       	sbci	r23, 0x00	; 0
    1740:	01 10       	cpse	r0, r1
    1742:	d8 f7       	brcc	.-10     	; 0x173a <strnlen_P+0x2>
    1744:	80 95       	com	r24
    1746:	90 95       	com	r25
    1748:	8e 0f       	add	r24, r30
    174a:	9f 1f       	adc	r25, r31
    174c:	08 95       	ret

0000174e <strnlen>:
    174e:	fc 01       	movw	r30, r24
    1750:	61 50       	subi	r22, 0x01	; 1
    1752:	70 40       	sbci	r23, 0x00	; 0
    1754:	01 90       	ld	r0, Z+
    1756:	01 10       	cpse	r0, r1
    1758:	d8 f7       	brcc	.-10     	; 0x1750 <strnlen+0x2>
    175a:	80 95       	com	r24
    175c:	90 95       	com	r25
    175e:	8e 0f       	add	r24, r30
    1760:	9f 1f       	adc	r25, r31
    1762:	08 95       	ret

00001764 <fputc>:
    1764:	0f 93       	push	r16
    1766:	1f 93       	push	r17
    1768:	cf 93       	push	r28
    176a:	df 93       	push	r29
    176c:	8c 01       	movw	r16, r24
    176e:	eb 01       	movw	r28, r22
    1770:	8b 81       	ldd	r24, Y+3	; 0x03
    1772:	81 ff       	sbrs	r24, 1
    1774:	1b c0       	rjmp	.+54     	; 0x17ac <fputc+0x48>
    1776:	82 ff       	sbrs	r24, 2
    1778:	0d c0       	rjmp	.+26     	; 0x1794 <fputc+0x30>
    177a:	2e 81       	ldd	r18, Y+6	; 0x06
    177c:	3f 81       	ldd	r19, Y+7	; 0x07
    177e:	8c 81       	ldd	r24, Y+4	; 0x04
    1780:	9d 81       	ldd	r25, Y+5	; 0x05
    1782:	28 17       	cp	r18, r24
    1784:	39 07       	cpc	r19, r25
    1786:	64 f4       	brge	.+24     	; 0x17a0 <fputc+0x3c>
    1788:	e8 81       	ld	r30, Y
    178a:	f9 81       	ldd	r31, Y+1	; 0x01
    178c:	01 93       	st	Z+, r16
    178e:	f9 83       	std	Y+1, r31	; 0x01
    1790:	e8 83       	st	Y, r30
    1792:	06 c0       	rjmp	.+12     	; 0x17a0 <fputc+0x3c>
    1794:	e8 85       	ldd	r30, Y+8	; 0x08
    1796:	f9 85       	ldd	r31, Y+9	; 0x09
    1798:	80 2f       	mov	r24, r16
    179a:	09 95       	icall
    179c:	00 97       	sbiw	r24, 0x00	; 0
    179e:	31 f4       	brne	.+12     	; 0x17ac <fputc+0x48>
    17a0:	8e 81       	ldd	r24, Y+6	; 0x06
    17a2:	9f 81       	ldd	r25, Y+7	; 0x07
    17a4:	01 96       	adiw	r24, 0x01	; 1
    17a6:	9f 83       	std	Y+7, r25	; 0x07
    17a8:	8e 83       	std	Y+6, r24	; 0x06
    17aa:	02 c0       	rjmp	.+4      	; 0x17b0 <fputc+0x4c>
    17ac:	0f ef       	ldi	r16, 0xFF	; 255
    17ae:	1f ef       	ldi	r17, 0xFF	; 255
    17b0:	c8 01       	movw	r24, r16
    17b2:	df 91       	pop	r29
    17b4:	cf 91       	pop	r28
    17b6:	1f 91       	pop	r17
    17b8:	0f 91       	pop	r16
    17ba:	08 95       	ret

000017bc <__ultoa_invert>:
    17bc:	fa 01       	movw	r30, r20
    17be:	aa 27       	eor	r26, r26
    17c0:	28 30       	cpi	r18, 0x08	; 8
    17c2:	51 f1       	breq	.+84     	; 0x1818 <__ultoa_invert+0x5c>
    17c4:	20 31       	cpi	r18, 0x10	; 16
    17c6:	81 f1       	breq	.+96     	; 0x1828 <__ultoa_invert+0x6c>
    17c8:	e8 94       	clt
    17ca:	6f 93       	push	r22
    17cc:	6e 7f       	andi	r22, 0xFE	; 254
    17ce:	6e 5f       	subi	r22, 0xFE	; 254
    17d0:	7f 4f       	sbci	r23, 0xFF	; 255
    17d2:	8f 4f       	sbci	r24, 0xFF	; 255
    17d4:	9f 4f       	sbci	r25, 0xFF	; 255
    17d6:	af 4f       	sbci	r26, 0xFF	; 255
    17d8:	b1 e0       	ldi	r27, 0x01	; 1
    17da:	3e d0       	rcall	.+124    	; 0x1858 <__ultoa_invert+0x9c>
    17dc:	b4 e0       	ldi	r27, 0x04	; 4
    17de:	3c d0       	rcall	.+120    	; 0x1858 <__ultoa_invert+0x9c>
    17e0:	67 0f       	add	r22, r23
    17e2:	78 1f       	adc	r23, r24
    17e4:	89 1f       	adc	r24, r25
    17e6:	9a 1f       	adc	r25, r26
    17e8:	a1 1d       	adc	r26, r1
    17ea:	68 0f       	add	r22, r24
    17ec:	79 1f       	adc	r23, r25
    17ee:	8a 1f       	adc	r24, r26
    17f0:	91 1d       	adc	r25, r1
    17f2:	a1 1d       	adc	r26, r1
    17f4:	6a 0f       	add	r22, r26
    17f6:	71 1d       	adc	r23, r1
    17f8:	81 1d       	adc	r24, r1
    17fa:	91 1d       	adc	r25, r1
    17fc:	a1 1d       	adc	r26, r1
    17fe:	20 d0       	rcall	.+64     	; 0x1840 <__ultoa_invert+0x84>
    1800:	09 f4       	brne	.+2      	; 0x1804 <__ultoa_invert+0x48>
    1802:	68 94       	set
    1804:	3f 91       	pop	r19
    1806:	2a e0       	ldi	r18, 0x0A	; 10
    1808:	26 9f       	mul	r18, r22
    180a:	11 24       	eor	r1, r1
    180c:	30 19       	sub	r19, r0
    180e:	30 5d       	subi	r19, 0xD0	; 208
    1810:	31 93       	st	Z+, r19
    1812:	de f6       	brtc	.-74     	; 0x17ca <__ultoa_invert+0xe>
    1814:	cf 01       	movw	r24, r30
    1816:	08 95       	ret
    1818:	46 2f       	mov	r20, r22
    181a:	47 70       	andi	r20, 0x07	; 7
    181c:	40 5d       	subi	r20, 0xD0	; 208
    181e:	41 93       	st	Z+, r20
    1820:	b3 e0       	ldi	r27, 0x03	; 3
    1822:	0f d0       	rcall	.+30     	; 0x1842 <__ultoa_invert+0x86>
    1824:	c9 f7       	brne	.-14     	; 0x1818 <__ultoa_invert+0x5c>
    1826:	f6 cf       	rjmp	.-20     	; 0x1814 <__ultoa_invert+0x58>
    1828:	46 2f       	mov	r20, r22
    182a:	4f 70       	andi	r20, 0x0F	; 15
    182c:	40 5d       	subi	r20, 0xD0	; 208
    182e:	4a 33       	cpi	r20, 0x3A	; 58
    1830:	18 f0       	brcs	.+6      	; 0x1838 <__ultoa_invert+0x7c>
    1832:	49 5d       	subi	r20, 0xD9	; 217
    1834:	31 fd       	sbrc	r19, 1
    1836:	40 52       	subi	r20, 0x20	; 32
    1838:	41 93       	st	Z+, r20
    183a:	02 d0       	rcall	.+4      	; 0x1840 <__ultoa_invert+0x84>
    183c:	a9 f7       	brne	.-22     	; 0x1828 <__ultoa_invert+0x6c>
    183e:	ea cf       	rjmp	.-44     	; 0x1814 <__ultoa_invert+0x58>
    1840:	b4 e0       	ldi	r27, 0x04	; 4
    1842:	a6 95       	lsr	r26
    1844:	97 95       	ror	r25
    1846:	87 95       	ror	r24
    1848:	77 95       	ror	r23
    184a:	67 95       	ror	r22
    184c:	ba 95       	dec	r27
    184e:	c9 f7       	brne	.-14     	; 0x1842 <__ultoa_invert+0x86>
    1850:	00 97       	sbiw	r24, 0x00	; 0
    1852:	61 05       	cpc	r22, r1
    1854:	71 05       	cpc	r23, r1
    1856:	08 95       	ret
    1858:	9b 01       	movw	r18, r22
    185a:	ac 01       	movw	r20, r24
    185c:	0a 2e       	mov	r0, r26
    185e:	06 94       	lsr	r0
    1860:	57 95       	ror	r21
    1862:	47 95       	ror	r20
    1864:	37 95       	ror	r19
    1866:	27 95       	ror	r18
    1868:	ba 95       	dec	r27
    186a:	c9 f7       	brne	.-14     	; 0x185e <__ultoa_invert+0xa2>
    186c:	62 0f       	add	r22, r18
    186e:	73 1f       	adc	r23, r19
    1870:	84 1f       	adc	r24, r20
    1872:	95 1f       	adc	r25, r21
    1874:	a0 1d       	adc	r26, r0
    1876:	08 95       	ret

00001878 <_exit>:
    1878:	f8 94       	cli

0000187a <__stop_program>:
    187a:	ff cf       	rjmp	.-2      	; 0x187a <__stop_program>
