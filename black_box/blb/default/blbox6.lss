
blbox6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b58  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00001b58  00001bec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000044a  00800078  00800078  00001c04  2**0
                  ALLOC
  3 .stab         00000738  00000000  00000000  00001c04  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000e7  00000000  00000000  0000233c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00002423  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000212  00000000  00000000  000024c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001cb9  00000000  00000000  000026d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000075a  00000000  00000000  0000438e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001833  00000000  00000000  00004ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002a0  00000000  00000000  0000631c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000005de  00000000  00000000  000065bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001be5  00000000  00000000  00006b9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000017d  00000000  00000000  0000877f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000b0  00000000  00000000  000088fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e5       	ldi	r30, 0x58	; 88
      68:	fb e1       	ldi	r31, 0x1B	; 27
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	14 e0       	ldi	r17, 0x04	; 4
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3c       	cpi	r26, 0xC2	; 194
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9f 00 	call	0x13e	; 0x13e <main>
      8a:	0c 94 aa 0d 	jmp	0x1b54	; 0x1b54 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <spi_init>:
#define DD_SCK  DDB7

void spi_init(void)
{
  /* Set MOSI and SCK output */
  DDR_SPI |= _BV(DD_MOSI) | _BV(DD_SCK);
      92:	87 b3       	in	r24, 0x17	; 23
      94:	80 6a       	ori	r24, 0xA0	; 160
      96:	87 bb       	out	0x17, r24	; 23
  DDR_SPI &= ~_BV(DD_MISO);
      98:	be 98       	cbi	0x17, 6	; 23
  
  /* Enable SPI, Master, set clock rate fck/128 */
  SPCR = _BV(SPE) | _BV(MSTR) | _BV(SPR0) | _BV(SPR1);
      9a:	83 e5       	ldi	r24, 0x53	; 83
      9c:	8d b9       	out	0x0d, r24	; 13
  SPSR = _BV(SPI2X);
      9e:	81 e0       	ldi	r24, 0x01	; 1
      a0:	8e b9       	out	0x0e, r24	; 14




PORTB=0x00;
      a2:	18 ba       	out	0x18, r1	; 24
DDRB=0xB0;
      a4:	90 eb       	ldi	r25, 0xB0	; 176
      a6:	97 bb       	out	0x17, r25	; 23
SPCR=0x50;
      a8:	90 e5       	ldi	r25, 0x50	; 80
      aa:	9d b9       	out	0x0d, r25	; 13
SPSR=0x01;
      ac:	8e b9       	out	0x0e, r24	; 14

}
      ae:	08 95       	ret

000000b0 <spi_send_byte>:

void spi_send_byte(uint8_t byte)
{
  /* Start transmission */
  SPDR = byte;
      b0:	8f b9       	out	0x0f, r24	; 15
  
  /* Wait for transmission complete */
  while (!(SPSR & _BV(SPIF)));
      b2:	77 9b       	sbis	0x0e, 7	; 14
      b4:	fe cf       	rjmp	.-4      	; 0xb2 <spi_send_byte+0x2>
}
      b6:	08 95       	ret

000000b8 <spi_receive_byte>:
uint8_t spi_receive_byte(void)
{
  uint8_t byte = 0;
  
  /* Write dummy byte to generate clock */
  SPDR = 0xFF;
      b8:	8f ef       	ldi	r24, 0xFF	; 255
      ba:	8f b9       	out	0x0f, r24	; 15
  
  /* Wait for transmission complete */
  while (!(SPSR & _BV(SPIF)));
      bc:	77 9b       	sbis	0x0e, 7	; 14
      be:	fe cf       	rjmp	.-4      	; 0xbc <spi_receive_byte+0x4>
  
  /* Read the received byte */
  byte = SPDR;
      c0:	8f b1       	in	r24, 0x0f	; 15
  
  return byte;
}
      c2:	08 95       	ret

000000c4 <spi_send_receive_byte>:

uint8_t spi_send_receive_byte(uint8_t byte)
{
  /* Start transmission */
  SPDR = byte;
      c4:	8f b9       	out	0x0f, r24	; 15
  
  /* Wait for transmission complete */
  while (!(SPSR & _BV(SPIF)));
      c6:	77 9b       	sbis	0x0e, 7	; 14
      c8:	fe cf       	rjmp	.-4      	; 0xc6 <spi_send_receive_byte+0x2>
  
  /* Read the received byte */
  byte = SPDR;
      ca:	8f b1       	in	r24, 0x0f	; 15
  
  return byte;
}
      cc:	08 95       	ret

000000ce <spi_send>:

void spi_send(uint8_t* data, uint16_t length)
{
      ce:	ef 92       	push	r14
      d0:	ff 92       	push	r15
      d2:	0f 93       	push	r16
      d4:	1f 93       	push	r17
      d6:	cf 93       	push	r28
      d8:	df 93       	push	r29
      da:	7b 01       	movw	r14, r22
  for(uint16_t i = 0; i < length; i++)
      dc:	08 2f       	mov	r16, r24
      de:	19 2f       	mov	r17, r25
      e0:	c0 e0       	ldi	r28, 0x00	; 0
      e2:	d0 e0       	ldi	r29, 0x00	; 0
      e4:	06 c0       	rjmp	.+12     	; 0xf2 <spi_send+0x24>
    spi_send_byte(data[i]);
      e6:	f8 01       	movw	r30, r16
      e8:	81 91       	ld	r24, Z+
      ea:	8f 01       	movw	r16, r30
      ec:	0e 94 58 00 	call	0xb0	; 0xb0 <spi_send_byte>
  return byte;
}

void spi_send(uint8_t* data, uint16_t length)
{
  for(uint16_t i = 0; i < length; i++)
      f0:	21 96       	adiw	r28, 0x01	; 1
      f2:	ce 15       	cp	r28, r14
      f4:	df 05       	cpc	r29, r15
      f6:	b8 f3       	brcs	.-18     	; 0xe6 <spi_send+0x18>
    spi_send_byte(data[i]);
}
      f8:	df 91       	pop	r29
      fa:	cf 91       	pop	r28
      fc:	1f 91       	pop	r17
      fe:	0f 91       	pop	r16
     100:	ff 90       	pop	r15
     102:	ef 90       	pop	r14
     104:	08 95       	ret

00000106 <spi_receive>:

void spi_receive(uint8_t* data, uint16_t length)
{
     106:	ef 92       	push	r14
     108:	ff 92       	push	r15
     10a:	0f 93       	push	r16
     10c:	1f 93       	push	r17
     10e:	cf 93       	push	r28
     110:	df 93       	push	r29
     112:	7b 01       	movw	r14, r22
  for(uint16_t i = 0; i < length; i++)
     114:	08 2f       	mov	r16, r24
     116:	19 2f       	mov	r17, r25
     118:	c0 e0       	ldi	r28, 0x00	; 0
     11a:	d0 e0       	ldi	r29, 0x00	; 0
     11c:	06 c0       	rjmp	.+12     	; 0x12a <spi_receive+0x24>
  {
    data[i] = spi_receive_byte();
     11e:	0e 94 5c 00 	call	0xb8	; 0xb8 <spi_receive_byte>
     122:	f8 01       	movw	r30, r16
     124:	81 93       	st	Z+, r24
     126:	8f 01       	movw	r16, r30
    spi_send_byte(data[i]);
}

void spi_receive(uint8_t* data, uint16_t length)
{
  for(uint16_t i = 0; i < length; i++)
     128:	21 96       	adiw	r28, 0x01	; 1
     12a:	ce 15       	cp	r28, r14
     12c:	df 05       	cpc	r29, r15
     12e:	b8 f3       	brcs	.-18     	; 0x11e <spi_receive+0x18>
  {
    data[i] = spi_receive_byte();
  }
}
     130:	df 91       	pop	r29
     132:	cf 91       	pop	r28
     134:	1f 91       	pop	r17
     136:	0f 91       	pop	r16
     138:	ff 90       	pop	r15
     13a:	ef 90       	pop	r14
     13c:	08 95       	ret

0000013e <main>:
FATFS FatFs;		/* FatFs work area needed for each volume */
FIL Fil;			/* File object needed for each open file */


int main (void)
{
     13e:	1f 93       	push	r17
     140:	df 93       	push	r29
     142:	cf 93       	push	r28
     144:	cd b7       	in	r28, 0x3d	; 61
     146:	de b7       	in	r29, 0x3e	; 62
     148:	c2 50       	subi	r28, 0x02	; 2
     14a:	d2 40       	sbci	r29, 0x02	; 2
     14c:	0f b6       	in	r0, 0x3f	; 63
     14e:	f8 94       	cli
     150:	de bf       	out	0x3e, r29	; 62
     152:	0f be       	out	0x3f, r0	; 63
     154:	cd bf       	out	0x3d, r28	; 61
	UINT bw;


	DDRC = 0xff;
     156:	8f ef       	ldi	r24, 0xFF	; 255
     158:	84 bb       	out	0x14, r24	; 20
	DDRA = 0xf0;
     15a:	10 ef       	ldi	r17, 0xF0	; 240
     15c:	1a bb       	out	0x1a, r17	; 26


  /* Init the SPI */

//  spi_init();
  	PORTC |= 0x01;
     15e:	a8 9a       	sbi	0x15, 0	; 21

  /* Init the MMC */

 // mmc_init();
 
PORTA |= 0xF0;
     160:	8b b3       	in	r24, 0x1b	; 27
     162:	80 6f       	ori	r24, 0xF0	; 240
     164:	8b bb       	out	0x1b, r24	; 27
#define MMC_BLOCK_SIZE 512
char mmc_block[MMC_BLOCK_SIZE];



	f_mount(&FatFs, "", 0);		/* Give a work area to the default drive */
     166:	8c e7       	ldi	r24, 0x7C	; 124
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	60 e6       	ldi	r22, 0x60	; 96
     16c:	70 e0       	ldi	r23, 0x00	; 0
     16e:	40 e0       	ldi	r20, 0x00	; 0
     170:	0e 94 4a 08 	call	0x1094	; 0x1094 <f_mount>

PORTC |= 0x22;
     174:	85 b3       	in	r24, 0x15	; 21
     176:	82 62       	ori	r24, 0x22	; 34
     178:	85 bb       	out	0x15, r24	; 21

	if (f_open(&Fil, "txt.txt", FA_READ | FA_OPEN_EXISTING) == FR_OK) {	/* Open a file */
     17a:	82 ea       	ldi	r24, 0xA2	; 162
     17c:	92 e0       	ldi	r25, 0x02	; 2
     17e:	61 e6       	ldi	r22, 0x61	; 97
     180:	70 e0       	ldi	r23, 0x00	; 0
     182:	41 e0       	ldi	r20, 0x01	; 1
     184:	0e 94 92 08 	call	0x1124	; 0x1124 <f_open>
     188:	88 23       	and	r24, r24
     18a:	c9 f4       	brne	.+50     	; 0x1be <main+0x80>

PORTC |= 0x04;
     18c:	aa 9a       	sbi	0x15, 2	; 21

		f_read(&Fil, mmc_block, MMC_BLOCK_SIZE, &bw);	/* read data */
     18e:	82 ea       	ldi	r24, 0xA2	; 162
     190:	92 e0       	ldi	r25, 0x02	; 2
     192:	be 01       	movw	r22, r28
     194:	6d 5f       	subi	r22, 0xFD	; 253
     196:	7f 4f       	sbci	r23, 0xFF	; 255
     198:	40 e0       	ldi	r20, 0x00	; 0
     19a:	52 e0       	ldi	r21, 0x02	; 2
     19c:	9e 01       	movw	r18, r28
     19e:	2f 5f       	subi	r18, 0xFF	; 255
     1a0:	3f 4f       	sbci	r19, 0xFF	; 255
     1a2:	0e 94 11 09 	call	0x1222	; 0x1222 <f_read>

PORTC |= 0x08;
     1a6:	ab 9a       	sbi	0x15, 3	; 21

		f_close(&Fil);								/* Close the file */
     1a8:	82 ea       	ldi	r24, 0xA2	; 162
     1aa:	92 e0       	ldi	r25, 0x02	; 2
     1ac:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <f_close>

PORTC |= 0x10;
     1b0:	ac 9a       	sbi	0x15, 4	; 21

		if (bw == 11) {		/* Lights green LED if data written well */
     1b2:	89 81       	ldd	r24, Y+1	; 0x01
     1b4:	9a 81       	ldd	r25, Y+2	; 0x02
     1b6:	8b 30       	cpi	r24, 0x0B	; 11
     1b8:	91 05       	cpc	r25, r1
     1ba:	09 f4       	brne	.+2      	; 0x1be <main+0x80>
			PORTA = 0xf0;	/* Set PB4 high */
     1bc:	1b bb       	out	0x1b, r17	; 27
		}
	}

PORTA = 0b10010000;
     1be:	80 e9       	ldi	r24, 0x90	; 144
     1c0:	8b bb       	out	0x1b, r24	; 27
     1c2:	ff cf       	rjmp	.-2      	; 0x1c2 <main+0x84>

000001c4 <get_fattime>:
			| ((DWORD)7 << 21)				/* Month 7 */
			| ((DWORD)28 << 16)				/* Mday 28 */
			| ((DWORD)0 << 11)				/* Hour 0 */
			| ((DWORD)0 << 5)				/* Min 0 */
			| ((DWORD)0 >> 1);				/* Sec 0 */
}
     1c4:	60 e0       	ldi	r22, 0x00	; 0
     1c6:	70 e0       	ldi	r23, 0x00	; 0
     1c8:	8c ef       	ldi	r24, 0xFC	; 252
     1ca:	92 e4       	ldi	r25, 0x42	; 66
     1cc:	08 95       	ret

000001ce <mmc_response>:
//--------------------------------------------------------------
//--------------------------------------------------------------
//--------------------------------------------------------------

uint8_t mmc_response(uint8_t response)
{
     1ce:	1f 93       	push	r17
     1d0:	cf 93       	push	r28
     1d2:	df 93       	push	r29
     1d4:	18 2f       	mov	r17, r24
     1d6:	cf ef       	ldi	r28, 0xFF	; 255
     1d8:	df e0       	ldi	r29, 0x0F	; 15
  uint16_t count = 0xFFF;
  uint8_t result;

  while(count > 0)
  {
    result = spi_receive_byte();
     1da:	0e 94 5c 00 	call	0xb8	; 0xb8 <spi_receive_byte>
    if (result == response)
     1de:	81 17       	cp	r24, r17
     1e0:	21 f0       	breq	.+8      	; 0x1ea <mmc_response+0x1c>
     1e2:	21 97       	sbiw	r28, 0x01	; 1
uint8_t mmc_response(uint8_t response)
{
  uint16_t count = 0xFFF;
  uint8_t result;

  while(count > 0)
     1e4:	d1 f7       	brne	.-12     	; 0x1da <mmc_response+0xc>
    count--;
  }

  if (count == 0){
  	//PORTA = 0xf0;
    return 1; /* Failure, loop was exited due to timeout */
     1e6:	81 e0       	ldi	r24, 0x01	; 1
     1e8:	01 c0       	rjmp	.+2      	; 0x1ec <mmc_response+0x1e>
  }

  return 0; /* Normal, loop was exited before timeout */
     1ea:	80 e0       	ldi	r24, 0x00	; 0
}
     1ec:	df 91       	pop	r29
     1ee:	cf 91       	pop	r28
     1f0:	1f 91       	pop	r17
     1f2:	08 95       	ret

000001f4 <mmc_init>:
//--------------------------------------------------------------
//--------------------------------------------------------------


void mmc_init(void)
{
     1f4:	ff 92       	push	r15
     1f6:	0f 93       	push	r16
     1f8:	1f 93       	push	r17
  uint8_t i;
  uint8_t byte;

  /* Init the CS output */
  DDR_CS |= _BV(DD_CS);
     1fa:	bc 9a       	sbi	0x17, 4	; 23

  SET_CS();
     1fc:	c4 9a       	sbi	0x18, 4	; 24
     1fe:	1a e0       	ldi	r17, 0x0A	; 10
  {
    /* Init the card in SPI mode by sending 80 clks */
    for(i = 0; i < 10; i++)
      byte = spi_receive_byte();
     200:	0e 94 5c 00 	call	0xb8	; 0xb8 <spi_receive_byte>
     204:	11 50       	subi	r17, 0x01	; 1
  DDR_CS |= _BV(DD_CS);

  SET_CS();
  {
    /* Init the card in SPI mode by sending 80 clks */
    for(i = 0; i < 10; i++)
     206:	e1 f7       	brne	.-8      	; 0x200 <mmc_init+0xc>
      byte = spi_receive_byte();
  }
  CLEAR_CS();
     208:	c4 98       	cbi	0x18, 4	; 24



  /* Send CMD0 GO_IDLE_STATE */
  mmc_cmd[0] = 0x40;
     20a:	80 e4       	ldi	r24, 0x40	; 64
     20c:	80 93 bc 02 	sts	0x02BC, r24
  mmc_cmd[1] = 0x00;
     210:	10 92 bd 02 	sts	0x02BD, r1
  mmc_cmd[2] = 0x00;
     214:	10 92 be 02 	sts	0x02BE, r1
  mmc_cmd[3] = 0x00;
     218:	10 92 bf 02 	sts	0x02BF, r1
  mmc_cmd[4] = 0x00;
     21c:	10 92 c0 02 	sts	0x02C0, r1
  mmc_cmd[5] = 0x95;
     220:	85 e9       	ldi	r24, 0x95	; 149
     222:	80 93 c1 02 	sts	0x02C1, r24
  spi_send(mmc_cmd, MMC_CMD_SIZE);
     226:	8c eb       	ldi	r24, 0xBC	; 188
     228:	92 e0       	ldi	r25, 0x02	; 2
     22a:	66 e0       	ldi	r22, 0x06	; 6
     22c:	70 e0       	ldi	r23, 0x00	; 0
     22e:	0e 94 67 00 	call	0xce	; 0xce <spi_send>

  if (mmc_response(0x01))
     232:	81 e0       	ldi	r24, 0x01	; 1
     234:	0e 94 e7 00 	call	0x1ce	; 0x1ce <mmc_response>
     238:	88 23       	and	r24, r24
     23a:	09 f0       	breq	.+2      	; 0x23e <mmc_init+0x4a>
     23c:	43 c0       	rjmp	.+134    	; 0x2c4 <mmc_init+0xd0>
  }

//PORTC |= 0x02;

  /* Send some dummy clocks after GO_IDLE_STATE */
  SET_CS();
     23e:	c4 9a       	sbi	0x18, 4	; 24
  spi_receive_byte();
     240:	0e 94 5c 00 	call	0xb8	; 0xb8 <spi_receive_byte>
  CLEAR_CS();
     244:	c4 98       	cbi	0x18, 4	; 24

//PORTC |= 0x04;

  /* Send CMD1 SEND_OP_COND until response is 0 */
  i = MMC_TIMEOUT;
     246:	1f ef       	ldi	r17, 0xFF	; 255
  do
  {
    mmc_cmd[0] = 0x41;
     248:	81 e4       	ldi	r24, 0x41	; 65
     24a:	f8 2e       	mov	r15, r24
    mmc_cmd[1] = 0x00;
    mmc_cmd[2] = 0x00;
    mmc_cmd[3] = 0x00;
    mmc_cmd[4] = 0x00;
    mmc_cmd[5] = 0xFF;
     24c:	0f ef       	ldi	r16, 0xFF	; 255

  /* Send CMD1 SEND_OP_COND until response is 0 */
  i = MMC_TIMEOUT;
  do
  {
    mmc_cmd[0] = 0x41;
     24e:	f0 92 bc 02 	sts	0x02BC, r15
    mmc_cmd[1] = 0x00;
     252:	10 92 bd 02 	sts	0x02BD, r1
    mmc_cmd[2] = 0x00;
     256:	10 92 be 02 	sts	0x02BE, r1
    mmc_cmd[3] = 0x00;
     25a:	10 92 bf 02 	sts	0x02BF, r1
    mmc_cmd[4] = 0x00;
     25e:	10 92 c0 02 	sts	0x02C0, r1
    mmc_cmd[5] = 0xFF;
     262:	00 93 c1 02 	sts	0x02C1, r16
    spi_send(mmc_cmd, MMC_CMD_SIZE);
     266:	8c eb       	ldi	r24, 0xBC	; 188
     268:	92 e0       	ldi	r25, 0x02	; 2
     26a:	66 e0       	ldi	r22, 0x06	; 6
     26c:	70 e0       	ldi	r23, 0x00	; 0
     26e:	0e 94 67 00 	call	0xce	; 0xce <spi_send>
    i--;
     272:	11 50       	subi	r17, 0x01	; 1
  } while((mmc_response(0x00) != 0) && (i > 0));
     274:	80 e0       	ldi	r24, 0x00	; 0
     276:	0e 94 e7 00 	call	0x1ce	; 0x1ce <mmc_response>
     27a:	88 23       	and	r24, r24
     27c:	19 f0       	breq	.+6      	; 0x284 <mmc_init+0x90>
     27e:	11 23       	and	r17, r17
     280:	31 f7       	brne	.-52     	; 0x24e <mmc_init+0x5a>
     282:	20 c0       	rjmp	.+64     	; 0x2c4 <mmc_init+0xd0>

  if (i == 0)
     284:	11 23       	and	r17, r17
     286:	f1 f0       	breq	.+60     	; 0x2c4 <mmc_init+0xd0>
  }

//PORTC |= 0x08;

  /* Send some dummy clocks after GO_IDLE_STATE */
  SET_CS();
     288:	c4 9a       	sbi	0x18, 4	; 24
  spi_receive_byte();
     28a:	0e 94 5c 00 	call	0xb8	; 0xb8 <spi_receive_byte>
  CLEAR_CS();
     28e:	c4 98       	cbi	0x18, 4	; 24

//  PORTC &= 0b11011111;

  /* Send CMD16 SET_BLOCKLEN to set the block length */
  mmc_cmd[0] = 0x50;
     290:	80 e5       	ldi	r24, 0x50	; 80
     292:	80 93 bc 02 	sts	0x02BC, r24
  mmc_cmd[1] = 0x00;   /* 4 bytes from here is the block length */
     296:	10 92 bd 02 	sts	0x02BD, r1
                       /* LSB is first */
                       /* 00 00 00 10 set to 16 bytes */
                       /* 00 00 02 00 set to 512 bytes */
  mmc_cmd[2] = 0x00;
     29a:	10 92 be 02 	sts	0x02BE, r1
  /* high block length bits - 512 bytes */
  mmc_cmd[3] = 0x02;
     29e:	82 e0       	ldi	r24, 0x02	; 2
     2a0:	80 93 bf 02 	sts	0x02BF, r24
  /* low block length bits */
  mmc_cmd[4] = 0x00;
     2a4:	10 92 c0 02 	sts	0x02C0, r1
  mmc_cmd[5] = 0xFF; /* checksum is no longer required but we always send 0xFF */
     2a8:	00 93 c1 02 	sts	0x02C1, r16
  spi_send(mmc_cmd, MMC_CMD_SIZE);
     2ac:	8c eb       	ldi	r24, 0xBC	; 188
     2ae:	92 e0       	ldi	r25, 0x02	; 2
     2b0:	66 e0       	ldi	r22, 0x06	; 6
     2b2:	70 e0       	ldi	r23, 0x00	; 0
     2b4:	0e 94 67 00 	call	0xce	; 0xce <spi_send>

  if ((mmc_response(0x00)) == 1)
     2b8:	80 e0       	ldi	r24, 0x00	; 0
     2ba:	0e 94 e7 00 	call	0x1ce	; 0x1ce <mmc_response>
  {
//    PORTC |= 0x40;
  }

  SET_CS();
     2be:	c4 9a       	sbi	0x18, 4	; 24
  spi_receive_byte();
     2c0:	0e 94 5c 00 	call	0xb8	; 0xb8 <spi_receive_byte>

//  PORTA |= 0x20;
}
     2c4:	1f 91       	pop	r17
     2c6:	0f 91       	pop	r16
     2c8:	ff 90       	pop	r15
     2ca:	08 95       	ret

000002cc <mmc_read_block>:
//--------------------------------------------------------------
//--------------------------------------------------------------
//--------------------------------------------------------------

void mmc_read_block(uint16_t block_number, uint8_t* block_address)
{
     2cc:	cf 93       	push	r28
     2ce:	df 93       	push	r29
     2d0:	eb 01       	movw	r28, r22
  uint16_t checksum;
  uint16_t varh, varl;

  varl = ((block_number & 0x003F) << 9);
     2d2:	9c 01       	movw	r18, r24
     2d4:	2f 73       	andi	r18, 0x3F	; 63
     2d6:	30 70       	andi	r19, 0x00	; 0
     2d8:	22 0f       	add	r18, r18
  varh = ((block_number & 0xFFC0) >> 7);
     2da:	88 0f       	add	r24, r24
     2dc:	89 2f       	mov	r24, r25
     2de:	88 1f       	adc	r24, r24
     2e0:	99 0b       	sbc	r25, r25
     2e2:	91 95       	neg	r25

 

  CLEAR_CS();
     2e4:	c4 98       	cbi	0x18, 4	; 24
  {
    /* send MMC CMD17(READ_SINGLE_BLOCK) to read the data from MMC card */
    mmc_cmd[0] = 0x51;
     2e6:	31 e5       	ldi	r19, 0x51	; 81
     2e8:	30 93 bc 02 	sts	0x02BC, r19
    /* high block address bits, varh HIGH and LOW */
    mmc_cmd[1] = varh >> 0x08;
     2ec:	90 93 bd 02 	sts	0x02BD, r25
    mmc_cmd[2] = varh & 0xFF;
     2f0:	80 93 be 02 	sts	0x02BE, r24
    /* low block address bits, varl HIGH and LOW */
    mmc_cmd[3] = varl >> 0x08;
     2f4:	20 93 bf 02 	sts	0x02BF, r18
    mmc_cmd[4] = varl & 0xFF;
     2f8:	10 92 c0 02 	sts	0x02C0, r1
    /* checksum is no longer required but we always send 0xFF */
    mmc_cmd[5] = 0xFF;
     2fc:	8f ef       	ldi	r24, 0xFF	; 255
     2fe:	80 93 c1 02 	sts	0x02C1, r24
    spi_send(mmc_cmd, MMC_CMD_SIZE);
     302:	8c eb       	ldi	r24, 0xBC	; 188
     304:	92 e0       	ldi	r25, 0x02	; 2
     306:	66 e0       	ldi	r22, 0x06	; 6
     308:	70 e0       	ldi	r23, 0x00	; 0
     30a:	0e 94 67 00 	call	0xce	; 0xce <spi_send>

    /* if mmc_response returns 1 then we failed to get a 0x00 response */
    if ((mmc_response(0x00)) == 1)
     30e:	80 e0       	ldi	r24, 0x00	; 0
     310:	0e 94 e7 00 	call	0x1ce	; 0x1ce <mmc_response>
     314:	81 30       	cpi	r24, 0x01	; 1
     316:	89 f0       	breq	.+34     	; 0x33a <mmc_read_block+0x6e>
    {
      return;
    }

    /* wait for data token */
    if ((mmc_response(0xFE)) == 1)
     318:	8e ef       	ldi	r24, 0xFE	; 254
     31a:	0e 94 e7 00 	call	0x1ce	; 0x1ce <mmc_response>
     31e:	81 30       	cpi	r24, 0x01	; 1
     320:	61 f0       	breq	.+24     	; 0x33a <mmc_read_block+0x6e>
    }

 

    /* Get the block of data based on the length */
    spi_receive(block_address, MMC_BLOCK_SIZE);
     322:	ce 01       	movw	r24, r28
     324:	60 e0       	ldi	r22, 0x00	; 0
     326:	72 e0       	ldi	r23, 0x02	; 2
     328:	0e 94 83 00 	call	0x106	; 0x106 <spi_receive>

    /* CRC bytes that are not needed */
    checksum = spi_receive_byte();
     32c:	0e 94 5c 00 	call	0xb8	; 0xb8 <spi_receive_byte>
    checksum = checksum << 0x08 | spi_receive_byte();
     330:	0e 94 5c 00 	call	0xb8	; 0xb8 <spi_receive_byte>
  }
  SET_CS();
     334:	c4 9a       	sbi	0x18, 4	; 24
  
  spi_receive_byte();
     336:	0e 94 5c 00 	call	0xb8	; 0xb8 <spi_receive_byte>
  
}
     33a:	df 91       	pop	r29
     33c:	cf 91       	pop	r28
     33e:	08 95       	ret

00000340 <print_block>:
    printf("\n");

  }
*/

	for(i = 0; i < length ; i++){
     340:	28 2f       	mov	r18, r24
     342:	39 2f       	mov	r19, r25
     344:	f9 01       	movw	r30, r18
     346:	80 e0       	ldi	r24, 0x00	; 0
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	09 c0       	rjmp	.+18     	; 0x35e <print_block+0x1e>
		PORTC = block_address[i];
     34c:	21 91       	ld	r18, Z+
     34e:	25 bb       	out	0x15, r18	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     350:	a7 e8       	ldi	r26, 0x87	; 135
     352:	b3 e1       	ldi	r27, 0x13	; 19
     354:	11 97       	sbiw	r26, 0x01	; 1
     356:	f1 f7       	brne	.-4      	; 0x354 <print_block+0x14>
     358:	00 c0       	rjmp	.+0      	; 0x35a <print_block+0x1a>
     35a:	00 00       	nop
    printf("\n");

  }
*/

	for(i = 0; i < length ; i++){
     35c:	01 96       	adiw	r24, 0x01	; 1
     35e:	86 17       	cp	r24, r22
     360:	97 07       	cpc	r25, r23
     362:	a0 f3       	brcs	.-24     	; 0x34c <print_block+0xc>
		PORTC = block_address[i];
		_delay_ms(20);
	}
}
     364:	08 95       	ret

00000366 <mains>:
* Main program
******************************************************************************/
uint8_t mmc_block[MMC_BLOCK_SIZE];

int mains (void)
{
     366:	cf 93       	push	r28
     368:	df 93       	push	r29

	DDRC = 0xff;
     36a:	8f ef       	ldi	r24, 0xFF	; 255
     36c:	84 bb       	out	0x14, r24	; 20
	DDRA = 0xf0;
     36e:	80 ef       	ldi	r24, 0xF0	; 240
     370:	8a bb       	out	0x1a, r24	; 26



  /* Init the SPI */

  spi_init();
     372:	0e 94 49 00 	call	0x92	; 0x92 <spi_init>
  	PORTC |= 0x01;
     376:	a8 9a       	sbi	0x15, 0	; 21

  /* Init the MMC */

  mmc_init();
     378:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <mmc_init>
 
PORTA |= 0xF0;
     37c:	8b b3       	in	r24, 0x1b	; 27
     37e:	80 6f       	ori	r24, 0xF0	; 240
     380:	8b bb       	out	0x1b, r24	; 27

  // Reset the MMC buffer 
  memset(mmc_block, 0xCA, MMC_BLOCK_SIZE);
     382:	82 ec       	ldi	r24, 0xC2	; 194
     384:	92 e0       	ldi	r25, 0x02	; 2
     386:	6a ec       	ldi	r22, 0xCA	; 202
     388:	70 e0       	ldi	r23, 0x00	; 0
     38a:	40 e0       	ldi	r20, 0x00	; 0
     38c:	52 e0       	ldi	r21, 0x02	; 2
     38e:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <memset>
     392:	8f e3       	ldi	r24, 0x3F	; 63
     394:	9d e0       	ldi	r25, 0x0D	; 13
     396:	a3 e0       	ldi	r26, 0x03	; 3
     398:	81 50       	subi	r24, 0x01	; 1
     39a:	90 40       	sbci	r25, 0x00	; 0
     39c:	a0 40       	sbci	r26, 0x00	; 0
     39e:	e1 f7       	brne	.-8      	; 0x398 <mains+0x32>
     3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <mains+0x3c>
     3a2:	00 00       	nop

_delay_ms(1000);
PORTC = 0;
     3a4:	15 ba       	out	0x15, r1	; 21

  // Read the first block 
  for(int t=63; t<90; t++){
     3a6:	cf e3       	ldi	r28, 0x3F	; 63
     3a8:	d0 e0       	ldi	r29, 0x00	; 0
//  mmc_read_block(63, mmc_block);
  mmc_read_block(t, mmc_block);
     3aa:	ce 01       	movw	r24, r28
     3ac:	62 ec       	ldi	r22, 0xC2	; 194
     3ae:	72 e0       	ldi	r23, 0x02	; 2
     3b0:	0e 94 66 01 	call	0x2cc	; 0x2cc <mmc_read_block>
  print_block(mmc_block, MMC_BLOCK_SIZE);
     3b4:	82 ec       	ldi	r24, 0xC2	; 194
     3b6:	92 e0       	ldi	r25, 0x02	; 2
     3b8:	60 e0       	ldi	r22, 0x00	; 0
     3ba:	72 e0       	ldi	r23, 0x02	; 2
     3bc:	0e 94 a0 01 	call	0x340	; 0x340 <print_block>

_delay_ms(1000);
PORTC = 0;

  // Read the first block 
  for(int t=63; t<90; t++){
     3c0:	21 96       	adiw	r28, 0x01	; 1
     3c2:	ca 35       	cpi	r28, 0x5A	; 90
     3c4:	d1 05       	cpc	r29, r1
     3c6:	89 f7       	brne	.-30     	; 0x3aa <mains+0x44>
//  mmc_read_block(63, mmc_block);
  mmc_read_block(t, mmc_block);
  print_block(mmc_block, MMC_BLOCK_SIZE);
  }

PORTA &= 0x0f;
     3c8:	8b b3       	in	r24, 0x1b	; 27
     3ca:	8f 70       	andi	r24, 0x0F	; 15
     3cc:	8b bb       	out	0x1b, r24	; 27
PORTA = 0b10010000;
     3ce:	80 e9       	ldi	r24, 0x90	; 144
     3d0:	8b bb       	out	0x1b, r24	; 27
     3d2:	ff cf       	rjmp	.-2      	; 0x3d2 <mains+0x6c>

000003d4 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
     3d4:	cf 93       	push	r28
     3d6:	df 93       	push	r29
     3d8:	fc 01       	movw	r30, r24
	UINT i;
	TCHAR *p, c;


	p = fno->fname;
     3da:	eb 01       	movw	r28, r22
     3dc:	29 96       	adiw	r28, 0x09	; 9
	if (dp->sect) {		/* Get SFN */
     3de:	26 85       	ldd	r18, Z+14	; 0x0e
     3e0:	37 85       	ldd	r19, Z+15	; 0x0f
     3e2:	40 89       	ldd	r20, Z+16	; 0x10
     3e4:	51 89       	ldd	r21, Z+17	; 0x11
     3e6:	21 15       	cp	r18, r1
     3e8:	31 05       	cpc	r19, r1
     3ea:	41 05       	cpc	r20, r1
     3ec:	51 05       	cpc	r21, r1
     3ee:	81 f1       	breq	.+96     	; 0x450 <get_fileinfo+0x7c>
		BYTE *dir = dp->dir;
     3f0:	02 88       	ldd	r0, Z+18	; 0x12
     3f2:	f3 89       	ldd	r31, Z+19	; 0x13
     3f4:	e0 2d       	mov	r30, r0
     3f6:	df 01       	movw	r26, r30

		i = 0;
     3f8:	80 e0       	ldi	r24, 0x00	; 0
     3fa:	90 e0       	ldi	r25, 0x00	; 0
		while (i < 11) {		/* Copy name body and extension */
			c = (TCHAR)dir[i++];
			if (c == ' ') continue;			/* Skip padding spaces */
			if (c == NDDE) c = (TCHAR)DDE;	/* Restore replaced DDE character */
			if (i == 9) *p++ = '.';			/* Insert a . if extension is exist */
     3fc:	3e e2       	ldi	r19, 0x2E	; 46
	if (dp->sect) {		/* Get SFN */
		BYTE *dir = dp->dir;

		i = 0;
		while (i < 11) {		/* Copy name body and extension */
			c = (TCHAR)dir[i++];
     3fe:	2d 91       	ld	r18, X+
     400:	01 96       	adiw	r24, 0x01	; 1
			if (c == ' ') continue;			/* Skip padding spaces */
     402:	20 32       	cpi	r18, 0x20	; 32
     404:	41 f0       	breq	.+16     	; 0x416 <get_fileinfo+0x42>
			if (c == NDDE) c = (TCHAR)DDE;	/* Restore replaced DDE character */
     406:	25 30       	cpi	r18, 0x05	; 5
     408:	09 f4       	brne	.+2      	; 0x40c <get_fileinfo+0x38>
     40a:	25 ee       	ldi	r18, 0xE5	; 229
			if (i == 9) *p++ = '.';			/* Insert a . if extension is exist */
     40c:	89 30       	cpi	r24, 0x09	; 9
     40e:	91 05       	cpc	r25, r1
     410:	09 f4       	brne	.+2      	; 0x414 <get_fileinfo+0x40>
     412:	39 93       	st	Y+, r19
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
     414:	29 93       	st	Y+, r18
	p = fno->fname;
	if (dp->sect) {		/* Get SFN */
		BYTE *dir = dp->dir;

		i = 0;
		while (i < 11) {		/* Copy name body and extension */
     416:	8b 30       	cpi	r24, 0x0B	; 11
     418:	91 05       	cpc	r25, r1
     41a:	89 f7       	brne	.-30     	; 0x3fe <get_fileinfo+0x2a>
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
     41c:	83 85       	ldd	r24, Z+11	; 0x0b
     41e:	db 01       	movw	r26, r22
     420:	18 96       	adiw	r26, 0x08	; 8
     422:	8c 93       	st	X, r24
     424:	18 97       	sbiw	r26, 0x08	; 8
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
     426:	24 8d       	ldd	r18, Z+28	; 0x1c
     428:	35 8d       	ldd	r19, Z+29	; 0x1d
     42a:	46 8d       	ldd	r20, Z+30	; 0x1e
     42c:	57 8d       	ldd	r21, Z+31	; 0x1f
     42e:	2d 93       	st	X+, r18
     430:	3d 93       	st	X+, r19
     432:	4d 93       	st	X+, r20
     434:	5c 93       	st	X, r21
     436:	13 97       	sbiw	r26, 0x03	; 3
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
     438:	80 8d       	ldd	r24, Z+24	; 0x18
     43a:	91 8d       	ldd	r25, Z+25	; 0x19
     43c:	15 96       	adiw	r26, 0x05	; 5
     43e:	9c 93       	st	X, r25
     440:	8e 93       	st	-X, r24
     442:	14 97       	sbiw	r26, 0x04	; 4
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
     444:	86 89       	ldd	r24, Z+22	; 0x16
     446:	97 89       	ldd	r25, Z+23	; 0x17
     448:	17 96       	adiw	r26, 0x07	; 7
     44a:	9c 93       	st	X, r25
     44c:	8e 93       	st	-X, r24
     44e:	16 97       	sbiw	r26, 0x06	; 6
	}
	*p = 0;		/* Terminate SFN string by a \0 */
     450:	18 82       	st	Y, r1
			}
		}
		p[i] = 0;	/* Terminate LFN string by a \0 */
	}
#endif
}
     452:	df 91       	pop	r29
     454:	cf 91       	pop	r28
     456:	08 95       	ret

00000458 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
     458:	cf 93       	push	r28
     45a:	df 93       	push	r29
     45c:	ec 01       	movw	r28, r24
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;


	if (*path) {	/* If the pointer is not a null */
     45e:	e8 81       	ld	r30, Y
     460:	f9 81       	ldd	r31, Y+1	; 0x01
     462:	30 97       	sbiw	r30, 0x00	; 0
     464:	e1 f0       	breq	.+56     	; 0x49e <__stack+0x3f>
     466:	df 01       	movw	r26, r30
     468:	cd 01       	movw	r24, r26
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
     46a:	2d 91       	ld	r18, X+
     46c:	21 32       	cpi	r18, 0x21	; 33
     46e:	a0 f0       	brcs	.+40     	; 0x498 <__stack+0x39>
     470:	2a 33       	cpi	r18, 0x3A	; 58
     472:	d1 f7       	brne	.-12     	; 0x468 <__stack+0x9>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
     474:	20 81       	ld	r18, Z
     476:	30 e0       	ldi	r19, 0x00	; 0
     478:	20 53       	subi	r18, 0x30	; 48
     47a:	30 40       	sbci	r19, 0x00	; 0
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
     47c:	2a 30       	cpi	r18, 0x0A	; 10
     47e:	31 05       	cpc	r19, r1
     480:	70 f4       	brcc	.+28     	; 0x49e <__stack+0x3f>

	if (*path) {	/* If the pointer is not a null */
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
     482:	31 96       	adiw	r30, 0x01	; 1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
     484:	e8 17       	cp	r30, r24
     486:	f9 07       	cpc	r31, r25
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
     48a:	21 15       	cp	r18, r1
     48c:	31 05       	cpc	r19, r1
     48e:	39 f4       	brne	.+14     	; 0x49e <__stack+0x3f>
					vol = (int)i;
					*path = ++tt;
     490:	31 96       	adiw	r30, 0x01	; 1
     492:	f9 83       	std	Y+1, r31	; 0x01
     494:	e8 83       	st	Y, r30
     496:	05 c0       	rjmp	.+10     	; 0x4a2 <__stack+0x43>
			return vol;
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
     498:	20 e0       	ldi	r18, 0x00	; 0
     49a:	30 e0       	ldi	r19, 0x00	; 0
     49c:	02 c0       	rjmp	.+4      	; 0x4a2 <__stack+0x43>
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
     49e:	2f ef       	ldi	r18, 0xFF	; 255
     4a0:	3f ef       	ldi	r19, 0xFF	; 255
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
     4a2:	c9 01       	movw	r24, r18
     4a4:	df 91       	pop	r29
     4a6:	cf 91       	pop	r28
     4a8:	08 95       	ret

000004aa <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
     4aa:	fc 01       	movw	r30, r24


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
     4ac:	00 97       	sbiw	r24, 0x00	; 0
     4ae:	c1 f0       	breq	.+48     	; 0x4e0 <validate+0x36>
     4b0:	a0 81       	ld	r26, Z
     4b2:	b1 81       	ldd	r27, Z+1	; 0x01
     4b4:	10 97       	sbiw	r26, 0x00	; 0
     4b6:	a1 f0       	breq	.+40     	; 0x4e0 <validate+0x36>
     4b8:	8c 91       	ld	r24, X
     4ba:	88 23       	and	r24, r24
     4bc:	89 f0       	breq	.+34     	; 0x4e0 <validate+0x36>
     4be:	16 96       	adiw	r26, 0x06	; 6
     4c0:	2d 91       	ld	r18, X+
     4c2:	3c 91       	ld	r19, X
     4c4:	17 97       	sbiw	r26, 0x07	; 7
     4c6:	82 81       	ldd	r24, Z+2	; 0x02
     4c8:	93 81       	ldd	r25, Z+3	; 0x03
     4ca:	28 17       	cp	r18, r24
     4cc:	39 07       	cpc	r19, r25
     4ce:	41 f4       	brne	.+16     	; 0x4e0 <validate+0x36>
		return FR_INVALID_OBJECT;

	ENTER_FF(fil->fs);		/* Lock file system */

	if (disk_status(fil->fs->drv) & STA_NOINIT)
     4d0:	11 96       	adiw	r26, 0x01	; 1
     4d2:	8c 91       	ld	r24, X
     4d4:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <disk_status>
     4d8:	80 ff       	sbrs	r24, 0
     4da:	04 c0       	rjmp	.+8      	; 0x4e4 <validate+0x3a>
		return FR_NOT_READY;
     4dc:	83 e0       	ldi	r24, 0x03	; 3
     4de:	08 95       	ret
{
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
		return FR_INVALID_OBJECT;
     4e0:	89 e0       	ldi	r24, 0x09	; 9
     4e2:	08 95       	ret
	ENTER_FF(fil->fs);		/* Lock file system */

	if (disk_status(fil->fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
     4e4:	80 e0       	ldi	r24, 0x00	; 0
}
     4e6:	08 95       	ret

000004e8 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)
{
     4e8:	cf 92       	push	r12
     4ea:	df 92       	push	r13
     4ec:	ef 92       	push	r14
     4ee:	ff 92       	push	r15
     4f0:	0f 93       	push	r16
     4f2:	1f 93       	push	r17
     4f4:	cf 93       	push	r28
     4f6:	df 93       	push	r29
     4f8:	ec 01       	movw	r28, r24
     4fa:	6a 01       	movw	r12, r20
     4fc:	7b 01       	movw	r14, r22
	if (sector != fs->winsect) {	/* Changed current window */
     4fe:	8a a1       	ldd	r24, Y+34	; 0x22
     500:	9b a1       	ldd	r25, Y+35	; 0x23
     502:	ac a1       	ldd	r26, Y+36	; 0x24
     504:	bd a1       	ldd	r27, Y+37	; 0x25
     506:	48 17       	cp	r20, r24
     508:	59 07       	cpc	r21, r25
     50a:	6a 07       	cpc	r22, r26
     50c:	7b 07       	cpc	r23, r27
     50e:	89 f0       	breq	.+34     	; 0x532 <move_window+0x4a>
#if !_FS_READONLY
		if (sync_window(fs) != FR_OK)
			return FR_DISK_ERR;
#endif
		if (disk_read(fs->drv, fs->win, sector, 1))
     510:	be 01       	movw	r22, r28
     512:	6a 5d       	subi	r22, 0xDA	; 218
     514:	7f 4f       	sbci	r23, 0xFF	; 255
     516:	89 81       	ldd	r24, Y+1	; 0x01
     518:	a7 01       	movw	r20, r14
     51a:	96 01       	movw	r18, r12
     51c:	01 e0       	ldi	r16, 0x01	; 1
     51e:	10 e0       	ldi	r17, 0x00	; 0
     520:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <disk_read>
     524:	88 23       	and	r24, r24
     526:	39 f4       	brne	.+14     	; 0x536 <move_window+0x4e>
			return FR_DISK_ERR;
		fs->winsect = sector;
     528:	ca a2       	std	Y+34, r12	; 0x22
     52a:	db a2       	std	Y+35, r13	; 0x23
     52c:	ec a2       	std	Y+36, r14	; 0x24
     52e:	fd a2       	std	Y+37, r15	; 0x25
     530:	03 c0       	rjmp	.+6      	; 0x538 <move_window+0x50>
	}

	return FR_OK;
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	01 c0       	rjmp	.+2      	; 0x538 <move_window+0x50>
#if !_FS_READONLY
		if (sync_window(fs) != FR_OK)
			return FR_DISK_ERR;
#endif
		if (disk_read(fs->drv, fs->win, sector, 1))
			return FR_DISK_ERR;
     536:	81 e0       	ldi	r24, 0x01	; 1
		fs->winsect = sector;
	}

	return FR_OK;
}
     538:	df 91       	pop	r29
     53a:	cf 91       	pop	r28
     53c:	1f 91       	pop	r17
     53e:	0f 91       	pop	r16
     540:	ff 90       	pop	r15
     542:	ef 90       	pop	r14
     544:	df 90       	pop	r13
     546:	cf 90       	pop	r12
     548:	08 95       	ret

0000054a <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
     54a:	cf 93       	push	r28
     54c:	df 93       	push	r29
     54e:	ec 01       	movw	r28, r24
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
     550:	1c 82       	std	Y+4, r1	; 0x04
     552:	8f ef       	ldi	r24, 0xFF	; 255
     554:	9f ef       	ldi	r25, 0xFF	; 255
     556:	dc 01       	movw	r26, r24
     558:	8a a3       	std	Y+34, r24	; 0x22
     55a:	9b a3       	std	Y+35, r25	; 0x23
     55c:	ac a3       	std	Y+36, r26	; 0x24
     55e:	bd a3       	std	Y+37, r27	; 0x25
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
     560:	ce 01       	movw	r24, r28
     562:	0e 94 74 02 	call	0x4e8	; 0x4e8 <move_window>
     566:	88 23       	and	r24, r24
     568:	51 f5       	brne	.+84     	; 0x5be <check_fs+0x74>
		return 3;

	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
     56a:	fe 01       	movw	r30, r28
     56c:	b6 96       	adiw	r30, 0x26	; 38
     56e:	de 01       	movw	r26, r28
     570:	ac 5d       	subi	r26, 0xDC	; 220
     572:	bd 4f       	sbci	r27, 0xFD	; 253
     574:	8d 91       	ld	r24, X+
     576:	9c 91       	ld	r25, X
     578:	11 97       	sbiw	r26, 0x01	; 1
     57a:	2a ea       	ldi	r18, 0xAA	; 170
     57c:	85 35       	cpi	r24, 0x55	; 85
     57e:	92 07       	cpc	r25, r18
     580:	01 f5       	brne	.+64     	; 0x5c2 <check_fs+0x78>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
     582:	86 a9       	ldd	r24, Z+54	; 0x36
     584:	97 a9       	ldd	r25, Z+55	; 0x37
     586:	a0 ad       	ldd	r26, Z+56	; 0x38
     588:	b1 ad       	ldd	r27, Z+57	; 0x39
     58a:	b0 70       	andi	r27, 0x00	; 0
     58c:	86 34       	cpi	r24, 0x46	; 70
     58e:	21 e4       	ldi	r18, 0x41	; 65
     590:	92 07       	cpc	r25, r18
     592:	24 e5       	ldi	r18, 0x54	; 84
     594:	a2 07       	cpc	r26, r18
     596:	20 e0       	ldi	r18, 0x00	; 0
     598:	b2 07       	cpc	r27, r18
     59a:	a9 f0       	breq	.+42     	; 0x5c6 <check_fs+0x7c>
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
     59c:	c8 58       	subi	r28, 0x88	; 136
     59e:	df 4f       	sbci	r29, 0xFF	; 255
     5a0:	28 81       	ld	r18, Y
     5a2:	39 81       	ldd	r19, Y+1	; 0x01
     5a4:	4a 81       	ldd	r20, Y+2	; 0x02
     5a6:	5b 81       	ldd	r21, Y+3	; 0x03
     5a8:	50 70       	andi	r21, 0x00	; 0
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
		return 3;
     5aa:	81 e0       	ldi	r24, 0x01	; 1
     5ac:	26 34       	cpi	r18, 0x46	; 70
     5ae:	91 e4       	ldi	r25, 0x41	; 65
     5b0:	39 07       	cpc	r19, r25
     5b2:	94 e5       	ldi	r25, 0x54	; 84
     5b4:	49 07       	cpc	r20, r25
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	59 07       	cpc	r21, r25
     5ba:	31 f4       	brne	.+12     	; 0x5c8 <check_fs+0x7e>
     5bc:	04 c0       	rjmp	.+8      	; 0x5c6 <check_fs+0x7c>
     5be:	83 e0       	ldi	r24, 0x03	; 3
     5c0:	03 c0       	rjmp	.+6      	; 0x5c8 <check_fs+0x7e>

	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
		return 2;
     5c2:	82 e0       	ldi	r24, 0x02	; 2
     5c4:	01 c0       	rjmp	.+2      	; 0x5c8 <check_fs+0x7e>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
		return 0;
     5c6:	80 e0       	ldi	r24, 0x00	; 0
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
		return 0;

	return 1;
}
     5c8:	df 91       	pop	r29
     5ca:	cf 91       	pop	r28
     5cc:	08 95       	ret

000005ce <ld_clust.clone.0>:
	BYTE* dir	/* Pointer to the directory entry */
)
{
	DWORD cl;

	cl = LD_WORD(dir+DIR_FstClusLO);
     5ce:	fb 01       	movw	r30, r22
     5d0:	22 8d       	ldd	r18, Z+26	; 0x1a
     5d2:	33 8d       	ldd	r19, Z+27	; 0x1b
     5d4:	40 e0       	ldi	r20, 0x00	; 0
     5d6:	50 e0       	ldi	r21, 0x00	; 0
	if (fs->fs_type == FS_FAT32)
     5d8:	83 30       	cpi	r24, 0x03	; 3
     5da:	59 f4       	brne	.+22     	; 0x5f2 <ld_clust.clone.0+0x24>
		cl |= (DWORD)LD_WORD(dir+DIR_FstClusHI) << 16;
     5dc:	84 89       	ldd	r24, Z+20	; 0x14
     5de:	95 89       	ldd	r25, Z+21	; 0x15
     5e0:	a0 e0       	ldi	r26, 0x00	; 0
     5e2:	b0 e0       	ldi	r27, 0x00	; 0
     5e4:	dc 01       	movw	r26, r24
     5e6:	99 27       	eor	r25, r25
     5e8:	88 27       	eor	r24, r24
     5ea:	28 2b       	or	r18, r24
     5ec:	39 2b       	or	r19, r25
     5ee:	4a 2b       	or	r20, r26
     5f0:	5b 2b       	or	r21, r27

	return cl;
}
     5f2:	b9 01       	movw	r22, r18
     5f4:	ca 01       	movw	r24, r20
     5f6:	08 95       	ret

000005f8 <find_volume.clone.2>:
/*-----------------------------------------------------------------------*/
/* Find logical drive and check if the volume is mounted                 */
/*-----------------------------------------------------------------------*/

static
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
     5f8:	2f 92       	push	r2
     5fa:	3f 92       	push	r3
     5fc:	4f 92       	push	r4
     5fe:	5f 92       	push	r5
     600:	6f 92       	push	r6
     602:	7f 92       	push	r7
     604:	8f 92       	push	r8
     606:	9f 92       	push	r9
     608:	af 92       	push	r10
     60a:	bf 92       	push	r11
     60c:	cf 92       	push	r12
     60e:	df 92       	push	r13
     610:	ef 92       	push	r14
     612:	ff 92       	push	r15
     614:	0f 93       	push	r16
     616:	1f 93       	push	r17
     618:	df 93       	push	r29
     61a:	cf 93       	push	r28
     61c:	cd b7       	in	r28, 0x3d	; 61
     61e:	de b7       	in	r29, 0x3e	; 62
     620:	6f 97       	sbiw	r28, 0x1f	; 31
     622:	0f b6       	in	r0, 0x3f	; 63
     624:	f8 94       	cli
     626:	de bf       	out	0x3e, r29	; 62
     628:	0f be       	out	0x3f, r0	; 63
     62a:	cd bf       	out	0x3d, r28	; 61
     62c:	7c 01       	movw	r14, r24
     62e:	cb 01       	movw	r24, r22
	WORD nrsv;
	FATFS *fs;


	/* Get logical drive number from the path name */
	*rfs = 0;
     630:	d7 01       	movw	r26, r14
     632:	1d 92       	st	X+, r1
     634:	1c 92       	st	X, r1
	vol = get_ldnumber(path);
     636:	0e 94 2c 02 	call	0x458	; 0x458 <get_ldnumber>
     63a:	6c 01       	movw	r12, r24
	if (vol < 0) return FR_INVALID_DRIVE;
     63c:	97 fd       	sbrc	r25, 7
     63e:	c8 c1       	rjmp	.+912    	; 0x9d0 <find_volume.clone.2+0x3d8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
     640:	fc 01       	movw	r30, r24
     642:	ee 0f       	add	r30, r30
     644:	ff 1f       	adc	r31, r31
     646:	e8 58       	subi	r30, 0x88	; 136
     648:	ff 4f       	sbci	r31, 0xFF	; 255
     64a:	00 81       	ld	r16, Z
     64c:	11 81       	ldd	r17, Z+1	; 0x01
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
     64e:	01 15       	cp	r16, r1
     650:	11 05       	cpc	r17, r1
     652:	09 f4       	brne	.+2      	; 0x656 <find_volume.clone.2+0x5e>
     654:	bf c1       	rjmp	.+894    	; 0x9d4 <find_volume.clone.2+0x3dc>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
     656:	f7 01       	movw	r30, r14
     658:	11 83       	std	Z+1, r17	; 0x01
     65a:	00 83       	st	Z, r16

	if (fs->fs_type) {					/* If the volume has been mounted */
     65c:	d8 01       	movw	r26, r16
     65e:	8c 91       	ld	r24, X
     660:	88 23       	and	r24, r24
     662:	31 f0       	breq	.+12     	; 0x670 <find_volume.clone.2+0x78>
		stat = disk_status(fs->drv);
     664:	11 96       	adiw	r26, 0x01	; 1
     666:	8c 91       	ld	r24, X
     668:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
     66c:	80 ff       	sbrs	r24, 0
     66e:	b4 c1       	rjmp	.+872    	; 0x9d8 <find_volume.clone.2+0x3e0>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
     670:	f8 01       	movw	r30, r16
     672:	10 82       	st	Z, r1
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
     674:	c1 82       	std	Z+1, r12	; 0x01
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
     676:	8c 2d       	mov	r24, r12
     678:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
     67c:	80 fd       	sbrc	r24, 0
     67e:	ae c1       	rjmp	.+860    	; 0x9dc <find_volume.clone.2+0x3e4>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
     680:	c8 01       	movw	r24, r16
     682:	40 e0       	ldi	r20, 0x00	; 0
     684:	50 e0       	ldi	r21, 0x00	; 0
     686:	ba 01       	movw	r22, r20
     688:	0e 94 a5 02 	call	0x54a	; 0x54a <check_fs>
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
     68c:	81 30       	cpi	r24, 0x01	; 1
     68e:	09 f0       	breq	.+2      	; 0x692 <find_volume.clone.2+0x9a>
     690:	3f c0       	rjmp	.+126    	; 0x710 <find_volume.clone.2+0x118>
     692:	7e 01       	movw	r14, r28
     694:	08 94       	sec
     696:	e1 1c       	adc	r14, r1
     698:	f1 1c       	adc	r15, r1
     69a:	a7 01       	movw	r20, r14
     69c:	2e eb       	ldi	r18, 0xBE	; 190
     69e:	31 e0       	ldi	r19, 0x01	; 1
		UINT i;
		DWORD br[4];

		for (i = 0; i < 4; i++) {			/* Get partition offset */
			BYTE *pt = fs->win+MBR_Table + i * SZ_PTE;
     6a0:	f9 01       	movw	r30, r18
     6a2:	b6 96       	adiw	r30, 0x26	; 38
     6a4:	e0 0f       	add	r30, r16
     6a6:	f1 1f       	adc	r31, r17
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
     6a8:	84 81       	ldd	r24, Z+4	; 0x04
     6aa:	88 23       	and	r24, r24
     6ac:	29 f0       	breq	.+10     	; 0x6b8 <find_volume.clone.2+0xc0>
     6ae:	80 85       	ldd	r24, Z+8	; 0x08
     6b0:	91 85       	ldd	r25, Z+9	; 0x09
     6b2:	a2 85       	ldd	r26, Z+10	; 0x0a
     6b4:	b3 85       	ldd	r27, Z+11	; 0x0b
     6b6:	03 c0       	rjmp	.+6      	; 0x6be <find_volume.clone.2+0xc6>
     6b8:	80 e0       	ldi	r24, 0x00	; 0
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	dc 01       	movw	r26, r24
     6be:	fa 01       	movw	r30, r20
     6c0:	81 93       	st	Z+, r24
     6c2:	91 93       	st	Z+, r25
     6c4:	a1 93       	st	Z+, r26
     6c6:	b1 93       	st	Z+, r27
     6c8:	af 01       	movw	r20, r30
     6ca:	20 5f       	subi	r18, 0xF0	; 240
     6cc:	3f 4f       	sbci	r19, 0xFF	; 255
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
		UINT i;
		DWORD br[4];

		for (i = 0; i < 4; i++) {			/* Get partition offset */
     6ce:	f1 e0       	ldi	r31, 0x01	; 1
     6d0:	2e 3f       	cpi	r18, 0xFE	; 254
     6d2:	3f 07       	cpc	r19, r31
     6d4:	29 f7       	brne	.-54     	; 0x6a0 <find_volume.clone.2+0xa8>
/*-----------------------------------------------------------------------*/
/* Find logical drive and check if the volume is mounted                 */
/*-----------------------------------------------------------------------*/

static
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
     6d6:	a1 e1       	ldi	r26, 0x11	; 17
     6d8:	ca 2e       	mov	r12, r26
     6da:	d1 2c       	mov	r13, r1
     6dc:	cc 0e       	add	r12, r28
     6de:	dd 1e       	adc	r13, r29
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
		if (i) i--;
		do {								/* Find an FAT volume */
			bsect = br[i];
     6e0:	d7 01       	movw	r26, r14
     6e2:	2d 90       	ld	r2, X+
     6e4:	3d 90       	ld	r3, X+
     6e6:	4d 90       	ld	r4, X+
     6e8:	5d 90       	ld	r5, X+
     6ea:	7d 01       	movw	r14, r26
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
     6ec:	21 14       	cp	r2, r1
     6ee:	31 04       	cpc	r3, r1
     6f0:	41 04       	cpc	r4, r1
     6f2:	51 04       	cpc	r5, r1
     6f4:	41 f0       	breq	.+16     	; 0x706 <find_volume.clone.2+0x10e>
     6f6:	c8 01       	movw	r24, r16
     6f8:	b2 01       	movw	r22, r4
     6fa:	a1 01       	movw	r20, r2
     6fc:	0e 94 a5 02 	call	0x54a	; 0x54a <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
     700:	88 23       	and	r24, r24
     702:	11 f4       	brne	.+4      	; 0x708 <find_volume.clone.2+0x110>
     704:	0e c0       	rjmp	.+28     	; 0x722 <find_volume.clone.2+0x12a>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
		if (i) i--;
		do {								/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
     706:	82 e0       	ldi	r24, 0x02	; 2
		} while (!LD2PT(vol) && fmt && ++i < 4);
     708:	ec 14       	cp	r14, r12
     70a:	fd 04       	cpc	r15, r13
     70c:	49 f7       	brne	.-46     	; 0x6e0 <find_volume.clone.2+0xe8>
     70e:	03 c0       	rjmp	.+6      	; 0x716 <find_volume.clone.2+0x11e>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
     710:	22 24       	eor	r2, r2
     712:	33 24       	eor	r3, r3
     714:	21 01       	movw	r4, r2
		do {								/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
		} while (!LD2PT(vol) && fmt && ++i < 4);
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
     716:	83 30       	cpi	r24, 0x03	; 3
     718:	09 f4       	brne	.+2      	; 0x71c <find_volume.clone.2+0x124>
     71a:	62 c1       	rjmp	.+708    	; 0x9e0 <find_volume.clone.2+0x3e8>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
     71c:	88 23       	and	r24, r24
     71e:	09 f0       	breq	.+2      	; 0x722 <find_volume.clone.2+0x12a>
     720:	61 c1       	rjmp	.+706    	; 0x9e4 <find_volume.clone.2+0x3ec>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
     722:	f6 e2       	ldi	r31, 0x26	; 38
     724:	af 2e       	mov	r10, r31
     726:	b1 2c       	mov	r11, r1
     728:	a0 0e       	add	r10, r16
     72a:	b1 1e       	adc	r11, r17
     72c:	f5 01       	movw	r30, r10
     72e:	83 85       	ldd	r24, Z+11	; 0x0b
     730:	94 85       	ldd	r25, Z+12	; 0x0c
     732:	f2 e0       	ldi	r31, 0x02	; 2
     734:	80 30       	cpi	r24, 0x00	; 0
     736:	9f 07       	cpc	r25, r31
     738:	09 f0       	breq	.+2      	; 0x73c <find_volume.clone.2+0x144>
     73a:	54 c1       	rjmp	.+680    	; 0x9e4 <find_volume.clone.2+0x3ec>
		return FR_NO_FILESYSTEM;

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
     73c:	d5 01       	movw	r26, r10
     73e:	56 96       	adiw	r26, 0x16	; 22
     740:	8d 91       	ld	r24, X+
     742:	9c 91       	ld	r25, X
     744:	57 97       	sbiw	r26, 0x17	; 23
     746:	9c 01       	movw	r18, r24
     748:	40 e0       	ldi	r20, 0x00	; 0
     74a:	50 e0       	ldi	r21, 0x00	; 0
     74c:	29 8b       	std	Y+17, r18	; 0x11
     74e:	3a 8b       	std	Y+18, r19	; 0x12
     750:	4b 8b       	std	Y+19, r20	; 0x13
     752:	5c 8b       	std	Y+20, r21	; 0x14
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
     754:	21 15       	cp	r18, r1
     756:	31 05       	cpc	r19, r1
     758:	41 05       	cpc	r20, r1
     75a:	51 05       	cpc	r21, r1
     75c:	51 f4       	brne	.+20     	; 0x772 <find_volume.clone.2+0x17a>
     75e:	94 96       	adiw	r26, 0x24	; 36
     760:	8d 91       	ld	r24, X+
     762:	9d 91       	ld	r25, X+
     764:	0d 90       	ld	r0, X+
     766:	bc 91       	ld	r27, X
     768:	a0 2d       	mov	r26, r0
     76a:	89 8b       	std	Y+17, r24	; 0x11
     76c:	9a 8b       	std	Y+18, r25	; 0x12
     76e:	ab 8b       	std	Y+19, r26	; 0x13
     770:	bc 8b       	std	Y+20, r27	; 0x14
	fs->fsize = fasize;
     772:	29 89       	ldd	r18, Y+17	; 0x11
     774:	3a 89       	ldd	r19, Y+18	; 0x12
     776:	4b 89       	ldd	r20, Y+19	; 0x13
     778:	5c 89       	ldd	r21, Y+20	; 0x14
     77a:	d8 01       	movw	r26, r16
     77c:	1e 96       	adiw	r26, 0x0e	; 14
     77e:	2d 93       	st	X+, r18
     780:	3d 93       	st	X+, r19
     782:	4d 93       	st	X+, r20
     784:	5c 93       	st	X, r21
     786:	51 97       	sbiw	r26, 0x11	; 17

	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
     788:	d6 96       	adiw	r26, 0x36	; 54
     78a:	2c 91       	ld	r18, X
     78c:	d6 97       	sbiw	r26, 0x36	; 54
     78e:	13 96       	adiw	r26, 0x03	; 3
     790:	2c 93       	st	X, r18
     792:	13 97       	sbiw	r26, 0x03	; 3
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
     794:	82 2f       	mov	r24, r18
     796:	81 50       	subi	r24, 0x01	; 1
     798:	82 30       	cpi	r24, 0x02	; 2
     79a:	08 f0       	brcs	.+2      	; 0x79e <find_volume.clone.2+0x1a6>
     79c:	23 c1       	rjmp	.+582    	; 0x9e4 <find_volume.clone.2+0x3ec>
		return FR_NO_FILESYSTEM;
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */

	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
     79e:	d3 96       	adiw	r26, 0x33	; 51
     7a0:	bc 91       	ld	r27, X
     7a2:	bf 8b       	std	Y+23, r27	; 0x17
     7a4:	f8 01       	movw	r30, r16
     7a6:	b2 83       	std	Z+2, r27	; 0x02
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
     7a8:	bb 23       	and	r27, r27
     7aa:	09 f4       	brne	.+2      	; 0x7ae <find_volume.clone.2+0x1b6>
     7ac:	1b c1       	rjmp	.+566    	; 0x9e4 <find_volume.clone.2+0x3ec>
     7ae:	4b 2f       	mov	r20, r27
     7b0:	50 e0       	ldi	r21, 0x00	; 0
     7b2:	ca 01       	movw	r24, r20
     7b4:	01 97       	sbiw	r24, 0x01	; 1
     7b6:	84 23       	and	r24, r20
     7b8:	95 23       	and	r25, r21
     7ba:	00 97       	sbiw	r24, 0x00	; 0
     7bc:	09 f0       	breq	.+2      	; 0x7c0 <find_volume.clone.2+0x1c8>
     7be:	12 c1       	rjmp	.+548    	; 0x9e4 <find_volume.clone.2+0x3ec>
		return FR_NO_FILESYSTEM;

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
     7c0:	d5 01       	movw	r26, r10
     7c2:	51 96       	adiw	r26, 0x11	; 17
     7c4:	0d 90       	ld	r0, X+
     7c6:	bc 91       	ld	r27, X
     7c8:	a0 2d       	mov	r26, r0
     7ca:	be 8b       	std	Y+22, r27	; 0x16
     7cc:	ad 8b       	std	Y+21, r26	; 0x15
     7ce:	b1 87       	std	Z+9, r27	; 0x09
     7d0:	a0 87       	std	Z+8, r26	; 0x08
	if (fs->n_rootdir % (SS(fs) / SZ_DIR))				/* (Must be sector aligned) */
     7d2:	cd 01       	movw	r24, r26
     7d4:	8f 70       	andi	r24, 0x0F	; 15
     7d6:	90 70       	andi	r25, 0x00	; 0
     7d8:	00 97       	sbiw	r24, 0x00	; 0
     7da:	09 f0       	breq	.+2      	; 0x7de <find_volume.clone.2+0x1e6>
     7dc:	03 c1       	rjmp	.+518    	; 0x9e4 <find_volume.clone.2+0x3ec>
		return FR_NO_FILESYSTEM;

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
     7de:	f5 01       	movw	r30, r10
     7e0:	63 88       	ldd	r6, Z+19	; 0x13
     7e2:	74 88       	ldd	r7, Z+20	; 0x14
     7e4:	88 24       	eor	r8, r8
     7e6:	99 24       	eor	r9, r9
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
     7e8:	61 14       	cp	r6, r1
     7ea:	71 04       	cpc	r7, r1
     7ec:	81 04       	cpc	r8, r1
     7ee:	91 04       	cpc	r9, r1
     7f0:	21 f4       	brne	.+8      	; 0x7fa <find_volume.clone.2+0x202>
     7f2:	60 a0       	ldd	r6, Z+32	; 0x20
     7f4:	71 a0       	ldd	r7, Z+33	; 0x21
     7f6:	82 a0       	ldd	r8, Z+34	; 0x22
     7f8:	93 a0       	ldd	r9, Z+35	; 0x23

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
     7fa:	d5 01       	movw	r26, r10
     7fc:	1e 96       	adiw	r26, 0x0e	; 14
     7fe:	ed 90       	ld	r14, X+
     800:	fc 90       	ld	r15, X
     802:	1f 97       	sbiw	r26, 0x0f	; 15
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
     804:	e1 14       	cp	r14, r1
     806:	f1 04       	cpc	r15, r1
     808:	09 f4       	brne	.+2      	; 0x80c <find_volume.clone.2+0x214>
     80a:	ec c0       	rjmp	.+472    	; 0x9e4 <find_volume.clone.2+0x3ec>
	fs->fsize = fasize;

	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
		return FR_NO_FILESYSTEM;
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
     80c:	30 e0       	ldi	r19, 0x00	; 0
     80e:	40 e0       	ldi	r20, 0x00	; 0
     810:	50 e0       	ldi	r21, 0x00	; 0
     812:	69 89       	ldd	r22, Y+17	; 0x11
     814:	7a 89       	ldd	r23, Y+18	; 0x12
     816:	8b 89       	ldd	r24, Y+19	; 0x13
     818:	9c 89       	ldd	r25, Y+20	; 0x14
     81a:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <__mulsi3>
     81e:	68 8f       	std	Y+24, r22	; 0x18
     820:	79 8f       	std	Y+25, r23	; 0x19
     822:	8a 8f       	std	Y+26, r24	; 0x1a
     824:	9b 8f       	std	Y+27, r25	; 0x1b

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
     826:	97 01       	movw	r18, r14
     828:	40 e0       	ldi	r20, 0x00	; 0
     82a:	50 e0       	ldi	r21, 0x00	; 0
     82c:	2c 8f       	std	Y+28, r18	; 0x1c
     82e:	3d 8f       	std	Y+29, r19	; 0x1d
     830:	4e 8f       	std	Y+30, r20	; 0x1e
     832:	5f 8f       	std	Y+31, r21	; 0x1f
     834:	cd 88       	ldd	r12, Y+21	; 0x15
     836:	de 88       	ldd	r13, Y+22	; 0x16
     838:	e4 e0       	ldi	r30, 0x04	; 4
     83a:	d6 94       	lsr	r13
     83c:	c7 94       	ror	r12
     83e:	ea 95       	dec	r30
     840:	e1 f7       	brne	.-8      	; 0x83a <find_volume.clone.2+0x242>
     842:	ee 24       	eor	r14, r14
     844:	ff 24       	eor	r15, r15
     846:	c2 0e       	add	r12, r18
     848:	d3 1e       	adc	r13, r19
     84a:	e4 1e       	adc	r14, r20
     84c:	f5 1e       	adc	r15, r21
     84e:	c6 0e       	add	r12, r22
     850:	d7 1e       	adc	r13, r23
     852:	e8 1e       	adc	r14, r24
     854:	f9 1e       	adc	r15, r25
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
     856:	6c 14       	cp	r6, r12
     858:	7d 04       	cpc	r7, r13
     85a:	8e 04       	cpc	r8, r14
     85c:	9f 04       	cpc	r9, r15
     85e:	08 f4       	brcc	.+2      	; 0x862 <find_volume.clone.2+0x26a>
     860:	c1 c0       	rjmp	.+386    	; 0x9e4 <find_volume.clone.2+0x3ec>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
     862:	c4 01       	movw	r24, r8
     864:	b3 01       	movw	r22, r6
     866:	6c 19       	sub	r22, r12
     868:	7d 09       	sbc	r23, r13
     86a:	8e 09       	sbc	r24, r14
     86c:	9f 09       	sbc	r25, r15
     86e:	af 89       	ldd	r26, Y+23	; 0x17
     870:	2a 2f       	mov	r18, r26
     872:	30 e0       	ldi	r19, 0x00	; 0
     874:	40 e0       	ldi	r20, 0x00	; 0
     876:	50 e0       	ldi	r21, 0x00	; 0
     878:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__udivmodsi4>
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
     87c:	21 15       	cp	r18, r1
     87e:	31 05       	cpc	r19, r1
     880:	41 05       	cpc	r20, r1
     882:	51 05       	cpc	r21, r1
     884:	09 f4       	brne	.+2      	; 0x888 <find_volume.clone.2+0x290>
     886:	ae c0       	rjmp	.+348    	; 0x9e4 <find_volume.clone.2+0x3ec>
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
     888:	26 3f       	cpi	r18, 0xF6	; 246
     88a:	bf e0       	ldi	r27, 0x0F	; 15
     88c:	3b 07       	cpc	r19, r27
     88e:	b0 e0       	ldi	r27, 0x00	; 0
     890:	4b 07       	cpc	r20, r27
     892:	b0 e0       	ldi	r27, 0x00	; 0
     894:	5b 07       	cpc	r21, r27
     896:	50 f0       	brcs	.+20     	; 0x8ac <find_volume.clone.2+0x2b4>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
     898:	26 3f       	cpi	r18, 0xF6	; 246
     89a:	ef ef       	ldi	r30, 0xFF	; 255
     89c:	3e 07       	cpc	r19, r30
     89e:	e0 e0       	ldi	r30, 0x00	; 0
     8a0:	4e 07       	cpc	r20, r30
     8a2:	e0 e0       	ldi	r30, 0x00	; 0
     8a4:	5e 07       	cpc	r21, r30
     8a6:	20 f4       	brcc	.+8      	; 0x8b0 <find_volume.clone.2+0x2b8>
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
     8a8:	62 e0       	ldi	r22, 0x02	; 2
     8aa:	03 c0       	rjmp	.+6      	; 0x8b2 <find_volume.clone.2+0x2ba>
	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
	fmt = FS_FAT12;
     8ac:	61 e0       	ldi	r22, 0x01	; 1
     8ae:	01 c0       	rjmp	.+2      	; 0x8b2 <find_volume.clone.2+0x2ba>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
     8b0:	63 e0       	ldi	r22, 0x03	; 3

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
     8b2:	2e 5f       	subi	r18, 0xFE	; 254
     8b4:	3f 4f       	sbci	r19, 0xFF	; 255
     8b6:	4f 4f       	sbci	r20, 0xFF	; 255
     8b8:	5f 4f       	sbci	r21, 0xFF	; 255
     8ba:	d8 01       	movw	r26, r16
     8bc:	1a 96       	adiw	r26, 0x0a	; 10
     8be:	2d 93       	st	X+, r18
     8c0:	3d 93       	st	X+, r19
     8c2:	4d 93       	st	X+, r20
     8c4:	5c 93       	st	X, r21
     8c6:	1d 97       	sbiw	r26, 0x0d	; 13
	fs->volbase = bsect;								/* Volume start sector */
     8c8:	f8 01       	movw	r30, r16
     8ca:	22 8a       	std	Z+18, r2	; 0x12
     8cc:	33 8a       	std	Z+19, r3	; 0x13
     8ce:	44 8a       	std	Z+20, r4	; 0x14
     8d0:	55 8a       	std	Z+21, r5	; 0x15
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
     8d2:	6c 8c       	ldd	r6, Y+28	; 0x1c
     8d4:	7d 8c       	ldd	r7, Y+29	; 0x1d
     8d6:	8e 8c       	ldd	r8, Y+30	; 0x1e
     8d8:	9f 8c       	ldd	r9, Y+31	; 0x1f
     8da:	62 0c       	add	r6, r2
     8dc:	73 1c       	adc	r7, r3
     8de:	84 1c       	adc	r8, r4
     8e0:	95 1c       	adc	r9, r5
     8e2:	56 96       	adiw	r26, 0x16	; 22
     8e4:	6d 92       	st	X+, r6
     8e6:	7d 92       	st	X+, r7
     8e8:	8d 92       	st	X+, r8
     8ea:	9c 92       	st	X, r9
     8ec:	59 97       	sbiw	r26, 0x19	; 25
	fs->database = bsect + sysect;						/* Data start sector */
     8ee:	c2 0c       	add	r12, r2
     8f0:	d3 1c       	adc	r13, r3
     8f2:	e4 1c       	adc	r14, r4
     8f4:	f5 1c       	adc	r15, r5
     8f6:	c6 8e       	std	Z+30, r12	; 0x1e
     8f8:	d7 8e       	std	Z+31, r13	; 0x1f
     8fa:	e0 a2       	std	Z+32, r14	; 0x20
     8fc:	f1 a2       	std	Z+33, r15	; 0x21
	if (fmt == FS_FAT32) {
     8fe:	63 30       	cpi	r22, 0x03	; 3
     900:	c9 f4       	brne	.+50     	; 0x934 <find_volume.clone.2+0x33c>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
     902:	8d 89       	ldd	r24, Y+21	; 0x15
     904:	9e 89       	ldd	r25, Y+22	; 0x16
     906:	00 97       	sbiw	r24, 0x00	; 0
     908:	09 f0       	breq	.+2      	; 0x90c <find_volume.clone.2+0x314>
     90a:	6c c0       	rjmp	.+216    	; 0x9e4 <find_volume.clone.2+0x3ec>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
     90c:	f5 01       	movw	r30, r10
     90e:	84 a5       	ldd	r24, Z+44	; 0x2c
     910:	95 a5       	ldd	r25, Z+45	; 0x2d
     912:	a6 a5       	ldd	r26, Z+46	; 0x2e
     914:	b7 a5       	ldd	r27, Z+47	; 0x2f
     916:	f8 01       	movw	r30, r16
     918:	82 8f       	std	Z+26, r24	; 0x1a
     91a:	93 8f       	std	Z+27, r25	; 0x1b
     91c:	a4 8f       	std	Z+28, r26	; 0x1c
     91e:	b5 8f       	std	Z+29, r27	; 0x1d
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
     920:	da 01       	movw	r26, r20
     922:	c9 01       	movw	r24, r18
     924:	22 e0       	ldi	r18, 0x02	; 2
     926:	88 0f       	add	r24, r24
     928:	99 1f       	adc	r25, r25
     92a:	aa 1f       	adc	r26, r26
     92c:	bb 1f       	adc	r27, r27
     92e:	2a 95       	dec	r18
     930:	d1 f7       	brne	.-12     	; 0x926 <find_volume.clone.2+0x32e>
     932:	2a c0       	rjmp	.+84     	; 0x988 <find_volume.clone.2+0x390>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
     934:	8d 89       	ldd	r24, Y+21	; 0x15
     936:	9e 89       	ldd	r25, Y+22	; 0x16
     938:	00 97       	sbiw	r24, 0x00	; 0
     93a:	09 f4       	brne	.+2      	; 0x93e <find_volume.clone.2+0x346>
     93c:	53 c0       	rjmp	.+166    	; 0x9e4 <find_volume.clone.2+0x3ec>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
     93e:	88 8d       	ldd	r24, Y+24	; 0x18
     940:	99 8d       	ldd	r25, Y+25	; 0x19
     942:	aa 8d       	ldd	r26, Y+26	; 0x1a
     944:	bb 8d       	ldd	r27, Y+27	; 0x1b
     946:	86 0d       	add	r24, r6
     948:	97 1d       	adc	r25, r7
     94a:	a8 1d       	adc	r26, r8
     94c:	b9 1d       	adc	r27, r9
     94e:	f8 01       	movw	r30, r16
     950:	82 8f       	std	Z+26, r24	; 0x1a
     952:	93 8f       	std	Z+27, r25	; 0x1b
     954:	a4 8f       	std	Z+28, r26	; 0x1c
     956:	b5 8f       	std	Z+29, r27	; 0x1d
     958:	da 01       	movw	r26, r20
     95a:	c9 01       	movw	r24, r18
     95c:	88 0f       	add	r24, r24
     95e:	99 1f       	adc	r25, r25
     960:	aa 1f       	adc	r26, r26
     962:	bb 1f       	adc	r27, r27
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
     964:	62 30       	cpi	r22, 0x02	; 2
     966:	81 f0       	breq	.+32     	; 0x988 <find_volume.clone.2+0x390>
     968:	82 0f       	add	r24, r18
     96a:	93 1f       	adc	r25, r19
     96c:	a4 1f       	adc	r26, r20
     96e:	b5 1f       	adc	r27, r21
     970:	b6 95       	lsr	r27
     972:	a7 95       	ror	r26
     974:	97 95       	ror	r25
     976:	87 95       	ror	r24
     978:	21 70       	andi	r18, 0x01	; 1
     97a:	30 70       	andi	r19, 0x00	; 0
     97c:	40 70       	andi	r20, 0x00	; 0
     97e:	50 70       	andi	r21, 0x00	; 0
     980:	82 0f       	add	r24, r18
     982:	93 1f       	adc	r25, r19
     984:	a4 1f       	adc	r26, r20
     986:	b5 1f       	adc	r27, r21
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than needed) */
     988:	81 50       	subi	r24, 0x01	; 1
     98a:	9e 4f       	sbci	r25, 0xFE	; 254
     98c:	af 4f       	sbci	r26, 0xFF	; 255
     98e:	bf 4f       	sbci	r27, 0xFF	; 255
     990:	79 e0       	ldi	r23, 0x09	; 9
     992:	b6 95       	lsr	r27
     994:	a7 95       	ror	r26
     996:	97 95       	ror	r25
     998:	87 95       	ror	r24
     99a:	7a 95       	dec	r23
     99c:	d1 f7       	brne	.-12     	; 0x992 <find_volume.clone.2+0x39a>
     99e:	29 89       	ldd	r18, Y+17	; 0x11
     9a0:	3a 89       	ldd	r19, Y+18	; 0x12
     9a2:	4b 89       	ldd	r20, Y+19	; 0x13
     9a4:	5c 89       	ldd	r21, Y+20	; 0x14
     9a6:	28 17       	cp	r18, r24
     9a8:	39 07       	cpc	r19, r25
     9aa:	4a 07       	cpc	r20, r26
     9ac:	5b 07       	cpc	r21, r27
     9ae:	d0 f0       	brcs	.+52     	; 0x9e4 <find_volume.clone.2+0x3ec>
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
     9b0:	d8 01       	movw	r26, r16
     9b2:	6c 93       	st	X, r22
	fs->id = ++Fsid;	/* File system mount ID */
     9b4:	80 91 7a 00 	lds	r24, 0x007A
     9b8:	90 91 7b 00 	lds	r25, 0x007B
     9bc:	01 96       	adiw	r24, 0x01	; 1
     9be:	90 93 7b 00 	sts	0x007B, r25
     9c2:	80 93 7a 00 	sts	0x007A, r24
     9c6:	17 96       	adiw	r26, 0x07	; 7
     9c8:	9c 93       	st	X, r25
     9ca:	8e 93       	st	-X, r24
     9cc:	16 97       	sbiw	r26, 0x06	; 6
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <find_volume.clone.2+0x3e0>


	/* Get logical drive number from the path name */
	*rfs = 0;
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
     9d0:	8b e0       	ldi	r24, 0x0B	; 11
     9d2:	09 c0       	rjmp	.+18     	; 0x9e6 <find_volume.clone.2+0x3ee>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
     9d4:	8c e0       	ldi	r24, 0x0C	; 12
     9d6:	07 c0       	rjmp	.+14     	; 0x9e6 <find_volume.clone.2+0x3ee>
	if (fs->fs_type) {					/* If the volume has been mounted */
		stat = disk_status(fs->drv);
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
			return FR_OK;				/* The file system object is valid */
     9d8:	80 e0       	ldi	r24, 0x00	; 0
     9da:	05 c0       	rjmp	.+10     	; 0x9e6 <find_volume.clone.2+0x3ee>

	fs->fs_type = 0;					/* Clear the file system object */
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
     9dc:	83 e0       	ldi	r24, 0x03	; 3
     9de:	03 c0       	rjmp	.+6      	; 0x9e6 <find_volume.clone.2+0x3ee>
		do {								/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
		} while (!LD2PT(vol) && fmt && ++i < 4);
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	01 c0       	rjmp	.+2      	; 0x9e6 <find_volume.clone.2+0x3ee>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than needed) */
		return FR_NO_FILESYSTEM;
     9e4:	8d e0       	ldi	r24, 0x0D	; 13
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
}
     9e6:	6f 96       	adiw	r28, 0x1f	; 31
     9e8:	0f b6       	in	r0, 0x3f	; 63
     9ea:	f8 94       	cli
     9ec:	de bf       	out	0x3e, r29	; 62
     9ee:	0f be       	out	0x3f, r0	; 63
     9f0:	cd bf       	out	0x3d, r28	; 61
     9f2:	cf 91       	pop	r28
     9f4:	df 91       	pop	r29
     9f6:	1f 91       	pop	r17
     9f8:	0f 91       	pop	r16
     9fa:	ff 90       	pop	r15
     9fc:	ef 90       	pop	r14
     9fe:	df 90       	pop	r13
     a00:	cf 90       	pop	r12
     a02:	bf 90       	pop	r11
     a04:	af 90       	pop	r10
     a06:	9f 90       	pop	r9
     a08:	8f 90       	pop	r8
     a0a:	7f 90       	pop	r7
     a0c:	6f 90       	pop	r6
     a0e:	5f 90       	pop	r5
     a10:	4f 90       	pop	r4
     a12:	3f 90       	pop	r3
     a14:	2f 90       	pop	r2
     a16:	08 95       	ret

00000a18 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
     a18:	cf 93       	push	r28
     a1a:	df 93       	push	r29
     a1c:	ec 01       	movw	r28, r24
     a1e:	cb 01       	movw	r24, r22
     a20:	ba 01       	movw	r22, r20
	clst -= 2;
     a22:	62 50       	subi	r22, 0x02	; 2
     a24:	70 40       	sbci	r23, 0x00	; 0
     a26:	80 40       	sbci	r24, 0x00	; 0
     a28:	90 40       	sbci	r25, 0x00	; 0
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
     a2a:	2a 85       	ldd	r18, Y+10	; 0x0a
     a2c:	3b 85       	ldd	r19, Y+11	; 0x0b
     a2e:	4c 85       	ldd	r20, Y+12	; 0x0c
     a30:	5d 85       	ldd	r21, Y+13	; 0x0d
     a32:	22 50       	subi	r18, 0x02	; 2
     a34:	30 40       	sbci	r19, 0x00	; 0
     a36:	40 40       	sbci	r20, 0x00	; 0
     a38:	50 40       	sbci	r21, 0x00	; 0
     a3a:	62 17       	cp	r22, r18
     a3c:	73 07       	cpc	r23, r19
     a3e:	84 07       	cpc	r24, r20
     a40:	95 07       	cpc	r25, r21
     a42:	88 f4       	brcc	.+34     	; 0xa66 <clust2sect+0x4e>
	return clst * fs->csize + fs->database;
     a44:	2a 81       	ldd	r18, Y+2	; 0x02
     a46:	30 e0       	ldi	r19, 0x00	; 0
     a48:	40 e0       	ldi	r20, 0x00	; 0
     a4a:	50 e0       	ldi	r21, 0x00	; 0
     a4c:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <__mulsi3>
     a50:	9b 01       	movw	r18, r22
     a52:	ac 01       	movw	r20, r24
     a54:	8e 8d       	ldd	r24, Y+30	; 0x1e
     a56:	9f 8d       	ldd	r25, Y+31	; 0x1f
     a58:	a8 a1       	ldd	r26, Y+32	; 0x20
     a5a:	b9 a1       	ldd	r27, Y+33	; 0x21
     a5c:	28 0f       	add	r18, r24
     a5e:	39 1f       	adc	r19, r25
     a60:	4a 1f       	adc	r20, r26
     a62:	5b 1f       	adc	r21, r27
     a64:	03 c0       	rjmp	.+6      	; 0xa6c <clust2sect+0x54>
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
     a66:	20 e0       	ldi	r18, 0x00	; 0
     a68:	30 e0       	ldi	r19, 0x00	; 0
     a6a:	a9 01       	movw	r20, r18
	return clst * fs->csize + fs->database;
}
     a6c:	b9 01       	movw	r22, r18
     a6e:	ca 01       	movw	r24, r20
     a70:	df 91       	pop	r29
     a72:	cf 91       	pop	r28
     a74:	08 95       	ret

00000a76 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
     a76:	bf 92       	push	r11
     a78:	cf 92       	push	r12
     a7a:	df 92       	push	r13
     a7c:	ef 92       	push	r14
     a7e:	ff 92       	push	r15
     a80:	0f 93       	push	r16
     a82:	1f 93       	push	r17
     a84:	cf 93       	push	r28
     a86:	df 93       	push	r29
     a88:	ec 01       	movw	r28, r24
     a8a:	6a 01       	movw	r12, r20
     a8c:	7b 01       	movw	r14, r22
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
     a8e:	42 30       	cpi	r20, 0x02	; 2
     a90:	51 05       	cpc	r21, r1
     a92:	61 05       	cpc	r22, r1
     a94:	71 05       	cpc	r23, r1
     a96:	08 f4       	brcc	.+2      	; 0xa9a <get_fat+0x24>
     a98:	a2 c0       	rjmp	.+324    	; 0xbde <get_fat+0x168>
     a9a:	8a 85       	ldd	r24, Y+10	; 0x0a
     a9c:	9b 85       	ldd	r25, Y+11	; 0x0b
     a9e:	ac 85       	ldd	r26, Y+12	; 0x0c
     aa0:	bd 85       	ldd	r27, Y+13	; 0x0d
     aa2:	48 17       	cp	r20, r24
     aa4:	59 07       	cpc	r21, r25
     aa6:	6a 07       	cpc	r22, r26
     aa8:	7b 07       	cpc	r23, r27
     aaa:	08 f0       	brcs	.+2      	; 0xaae <get_fat+0x38>
     aac:	98 c0       	rjmp	.+304    	; 0xbde <get_fat+0x168>
		return 1;

	switch (fs->fs_type) {
     aae:	88 81       	ld	r24, Y
     ab0:	82 30       	cpi	r24, 0x02	; 2
     ab2:	09 f4       	brne	.+2      	; 0xab6 <get_fat+0x40>
     ab4:	56 c0       	rjmp	.+172    	; 0xb62 <get_fat+0xec>
     ab6:	83 30       	cpi	r24, 0x03	; 3
     ab8:	09 f4       	brne	.+2      	; 0xabc <get_fat+0x46>
     aba:	6f c0       	rjmp	.+222    	; 0xb9a <get_fat+0x124>
     abc:	81 30       	cpi	r24, 0x01	; 1
     abe:	09 f0       	breq	.+2      	; 0xac2 <get_fat+0x4c>
     ac0:	8e c0       	rjmp	.+284    	; 0xbde <get_fat+0x168>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
     ac2:	8a 01       	movw	r16, r20
     ac4:	16 95       	lsr	r17
     ac6:	07 95       	ror	r16
     ac8:	04 0f       	add	r16, r20
     aca:	15 1f       	adc	r17, r21
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
     acc:	a8 01       	movw	r20, r16
     ace:	45 2f       	mov	r20, r21
     ad0:	55 27       	eor	r21, r21
     ad2:	46 95       	lsr	r20
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	8e 89       	ldd	r24, Y+22	; 0x16
     ada:	9f 89       	ldd	r25, Y+23	; 0x17
     adc:	a8 8d       	ldd	r26, Y+24	; 0x18
     ade:	b9 8d       	ldd	r27, Y+25	; 0x19
     ae0:	48 0f       	add	r20, r24
     ae2:	59 1f       	adc	r21, r25
     ae4:	6a 1f       	adc	r22, r26
     ae6:	7b 1f       	adc	r23, r27
     ae8:	ce 01       	movw	r24, r28
     aea:	0e 94 74 02 	call	0x4e8	; 0x4e8 <move_window>
     aee:	88 23       	and	r24, r24
     af0:	09 f0       	breq	.+2      	; 0xaf4 <get_fat+0x7e>
     af2:	7a c0       	rjmp	.+244    	; 0xbe8 <get_fat+0x172>
		wc = fs->win[bc % SS(fs)]; bc++;
     af4:	f8 01       	movw	r30, r16
     af6:	f1 70       	andi	r31, 0x01	; 1
     af8:	ec 0f       	add	r30, r28
     afa:	fd 1f       	adc	r31, r29
     afc:	b6 a0       	ldd	r11, Z+38	; 0x26
     afe:	0f 5f       	subi	r16, 0xFF	; 255
     b00:	1f 4f       	sbci	r17, 0xFF	; 255
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
     b02:	a8 01       	movw	r20, r16
     b04:	45 2f       	mov	r20, r21
     b06:	55 27       	eor	r21, r21
     b08:	46 95       	lsr	r20
     b0a:	60 e0       	ldi	r22, 0x00	; 0
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	8e 89       	ldd	r24, Y+22	; 0x16
     b10:	9f 89       	ldd	r25, Y+23	; 0x17
     b12:	a8 8d       	ldd	r26, Y+24	; 0x18
     b14:	b9 8d       	ldd	r27, Y+25	; 0x19
     b16:	48 0f       	add	r20, r24
     b18:	59 1f       	adc	r21, r25
     b1a:	6a 1f       	adc	r22, r26
     b1c:	7b 1f       	adc	r23, r27
     b1e:	ce 01       	movw	r24, r28
     b20:	0e 94 74 02 	call	0x4e8	; 0x4e8 <move_window>
     b24:	88 23       	and	r24, r24
     b26:	09 f0       	breq	.+2      	; 0xb2a <get_fat+0xb4>
     b28:	5f c0       	rjmp	.+190    	; 0xbe8 <get_fat+0x172>

	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc = fs->win[bc % SS(fs)]; bc++;
     b2a:	2b 2d       	mov	r18, r11
     b2c:	30 e0       	ldi	r19, 0x00	; 0
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc |= fs->win[bc % SS(fs)] << 8;
     b2e:	11 70       	andi	r17, 0x01	; 1
     b30:	0c 0f       	add	r16, r28
     b32:	1d 1f       	adc	r17, r29
     b34:	f8 01       	movw	r30, r16
     b36:	96 a1       	ldd	r25, Z+38	; 0x26
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	28 2b       	or	r18, r24
     b3c:	39 2b       	or	r19, r25
		return clst & 1 ? wc >> 4 : (wc & 0xFFF);
     b3e:	f1 e0       	ldi	r31, 0x01	; 1
     b40:	cf 22       	and	r12, r31
     b42:	dd 24       	eor	r13, r13
     b44:	c1 14       	cp	r12, r1
     b46:	d1 04       	cpc	r13, r1
     b48:	31 f0       	breq	.+12     	; 0xb56 <get_fat+0xe0>
     b4a:	44 e0       	ldi	r20, 0x04	; 4
     b4c:	36 95       	lsr	r19
     b4e:	27 95       	ror	r18
     b50:	4a 95       	dec	r20
     b52:	e1 f7       	brne	.-8      	; 0xb4c <get_fat+0xd6>
     b54:	1f c0       	rjmp	.+62     	; 0xb94 <get_fat+0x11e>
     b56:	40 e0       	ldi	r20, 0x00	; 0
     b58:	50 e0       	ldi	r21, 0x00	; 0
     b5a:	3f 70       	andi	r19, 0x0F	; 15
     b5c:	40 70       	andi	r20, 0x00	; 0
     b5e:	50 70       	andi	r21, 0x00	; 0
     b60:	46 c0       	rjmp	.+140    	; 0xbee <get_fat+0x178>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
     b62:	45 2f       	mov	r20, r21
     b64:	56 2f       	mov	r21, r22
     b66:	67 2f       	mov	r22, r23
     b68:	77 27       	eor	r23, r23
     b6a:	8e 89       	ldd	r24, Y+22	; 0x16
     b6c:	9f 89       	ldd	r25, Y+23	; 0x17
     b6e:	a8 8d       	ldd	r26, Y+24	; 0x18
     b70:	b9 8d       	ldd	r27, Y+25	; 0x19
     b72:	48 0f       	add	r20, r24
     b74:	59 1f       	adc	r21, r25
     b76:	6a 1f       	adc	r22, r26
     b78:	7b 1f       	adc	r23, r27
     b7a:	ce 01       	movw	r24, r28
     b7c:	0e 94 74 02 	call	0x4e8	; 0x4e8 <move_window>
     b80:	88 23       	and	r24, r24
     b82:	91 f5       	brne	.+100    	; 0xbe8 <get_fat+0x172>
		p = &fs->win[clst * 2 % SS(fs)];
     b84:	f6 01       	movw	r30, r12
     b86:	ee 0f       	add	r30, r30
     b88:	ff 1f       	adc	r31, r31
     b8a:	f1 70       	andi	r31, 0x01	; 1
		return LD_WORD(p);
     b8c:	ec 0f       	add	r30, r28
     b8e:	fd 1f       	adc	r31, r29
     b90:	26 a1       	ldd	r18, Z+38	; 0x26
     b92:	37 a1       	ldd	r19, Z+39	; 0x27
     b94:	40 e0       	ldi	r20, 0x00	; 0
     b96:	50 e0       	ldi	r21, 0x00	; 0
     b98:	2a c0       	rjmp	.+84     	; 0xbee <get_fat+0x178>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
     b9a:	07 e0       	ldi	r16, 0x07	; 7
     b9c:	76 95       	lsr	r23
     b9e:	67 95       	ror	r22
     ba0:	57 95       	ror	r21
     ba2:	47 95       	ror	r20
     ba4:	0a 95       	dec	r16
     ba6:	d1 f7       	brne	.-12     	; 0xb9c <get_fat+0x126>
     ba8:	8e 89       	ldd	r24, Y+22	; 0x16
     baa:	9f 89       	ldd	r25, Y+23	; 0x17
     bac:	a8 8d       	ldd	r26, Y+24	; 0x18
     bae:	b9 8d       	ldd	r27, Y+25	; 0x19
     bb0:	48 0f       	add	r20, r24
     bb2:	59 1f       	adc	r21, r25
     bb4:	6a 1f       	adc	r22, r26
     bb6:	7b 1f       	adc	r23, r27
     bb8:	ce 01       	movw	r24, r28
     bba:	0e 94 74 02 	call	0x4e8	; 0x4e8 <move_window>
     bbe:	88 23       	and	r24, r24
     bc0:	99 f4       	brne	.+38     	; 0xbe8 <get_fat+0x172>
		p = &fs->win[clst * 4 % SS(fs)];
     bc2:	f6 01       	movw	r30, r12
     bc4:	ee 0f       	add	r30, r30
     bc6:	ff 1f       	adc	r31, r31
     bc8:	ee 0f       	add	r30, r30
     bca:	ff 1f       	adc	r31, r31
     bcc:	f1 70       	andi	r31, 0x01	; 1
		return LD_DWORD(p) & 0x0FFFFFFF;
     bce:	ec 0f       	add	r30, r28
     bd0:	fd 1f       	adc	r31, r29
     bd2:	26 a1       	ldd	r18, Z+38	; 0x26
     bd4:	37 a1       	ldd	r19, Z+39	; 0x27
     bd6:	40 a5       	ldd	r20, Z+40	; 0x28
     bd8:	51 a5       	ldd	r21, Z+41	; 0x29
     bda:	5f 70       	andi	r21, 0x0F	; 15
     bdc:	08 c0       	rjmp	.+16     	; 0xbee <get_fat+0x178>

	default:
		return 1;
     bde:	21 e0       	ldi	r18, 0x01	; 1
     be0:	30 e0       	ldi	r19, 0x00	; 0
     be2:	40 e0       	ldi	r20, 0x00	; 0
     be4:	50 e0       	ldi	r21, 0x00	; 0
     be6:	03 c0       	rjmp	.+6      	; 0xbee <get_fat+0x178>
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
     be8:	2f ef       	ldi	r18, 0xFF	; 255
     bea:	3f ef       	ldi	r19, 0xFF	; 255
     bec:	a9 01       	movw	r20, r18
}
     bee:	b9 01       	movw	r22, r18
     bf0:	ca 01       	movw	r24, r20
     bf2:	df 91       	pop	r29
     bf4:	cf 91       	pop	r28
     bf6:	1f 91       	pop	r17
     bf8:	0f 91       	pop	r16
     bfa:	ff 90       	pop	r15
     bfc:	ef 90       	pop	r14
     bfe:	df 90       	pop	r13
     c00:	cf 90       	pop	r12
     c02:	bf 90       	pop	r11
     c04:	08 95       	ret

00000c06 <dir_next.clone.3>:
/*-----------------------------------------------------------------------*/
/* Directory handling - Move directory table index next                  */
/*-----------------------------------------------------------------------*/

static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
     c06:	af 92       	push	r10
     c08:	bf 92       	push	r11
     c0a:	cf 92       	push	r12
     c0c:	df 92       	push	r13
     c0e:	ef 92       	push	r14
     c10:	ff 92       	push	r15
     c12:	0f 93       	push	r16
     c14:	1f 93       	push	r17
     c16:	cf 93       	push	r28
     c18:	df 93       	push	r29
     c1a:	ec 01       	movw	r28, r24
{
	DWORD clst;
	UINT i;


	i = dp->index + 1;
     c1c:	0c 81       	ldd	r16, Y+4	; 0x04
     c1e:	1d 81       	ldd	r17, Y+5	; 0x05
     c20:	0f 5f       	subi	r16, 0xFF	; 255
     c22:	1f 4f       	sbci	r17, 0xFF	; 255
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
     c24:	09 f4       	brne	.+2      	; 0xc28 <dir_next.clone.3+0x22>
     c26:	76 c0       	rjmp	.+236    	; 0xd14 <dir_next.clone.3+0x10e>
     c28:	8e 85       	ldd	r24, Y+14	; 0x0e
     c2a:	9f 85       	ldd	r25, Y+15	; 0x0f
     c2c:	a8 89       	ldd	r26, Y+16	; 0x10
     c2e:	b9 89       	ldd	r27, Y+17	; 0x11
     c30:	00 97       	sbiw	r24, 0x00	; 0
     c32:	a1 05       	cpc	r26, r1
     c34:	b1 05       	cpc	r27, r1
     c36:	09 f4       	brne	.+2      	; 0xc3a <dir_next.clone.3+0x34>
     c38:	6d c0       	rjmp	.+218    	; 0xd14 <dir_next.clone.3+0x10e>
		return FR_NO_FILE;

	if (!(i % (SS(dp->fs) / SZ_DIR))) {	/* Sector changed? */
     c3a:	2f e0       	ldi	r18, 0x0F	; 15
     c3c:	a2 2e       	mov	r10, r18
     c3e:	b1 2c       	mov	r11, r1
     c40:	a0 22       	and	r10, r16
     c42:	b1 22       	and	r11, r17
     c44:	a1 14       	cp	r10, r1
     c46:	b1 04       	cpc	r11, r1
     c48:	09 f0       	breq	.+2      	; 0xc4c <dir_next.clone.3+0x46>
     c4a:	50 c0       	rjmp	.+160    	; 0xcec <dir_next.clone.3+0xe6>
		dp->sect++;					/* Next sector */
     c4c:	01 96       	adiw	r24, 0x01	; 1
     c4e:	a1 1d       	adc	r26, r1
     c50:	b1 1d       	adc	r27, r1
     c52:	8e 87       	std	Y+14, r24	; 0x0e
     c54:	9f 87       	std	Y+15, r25	; 0x0f
     c56:	a8 8b       	std	Y+16, r26	; 0x10
     c58:	b9 8b       	std	Y+17, r27	; 0x11

		if (!dp->clust) {		/* Static table */
     c5a:	4a 85       	ldd	r20, Y+10	; 0x0a
     c5c:	5b 85       	ldd	r21, Y+11	; 0x0b
     c5e:	6c 85       	ldd	r22, Y+12	; 0x0c
     c60:	7d 85       	ldd	r23, Y+13	; 0x0d
     c62:	88 81       	ld	r24, Y
     c64:	99 81       	ldd	r25, Y+1	; 0x01
     c66:	41 15       	cp	r20, r1
     c68:	51 05       	cpc	r21, r1
     c6a:	61 05       	cpc	r22, r1
     c6c:	71 05       	cpc	r23, r1
     c6e:	39 f4       	brne	.+14     	; 0xc7e <dir_next.clone.3+0x78>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
     c70:	fc 01       	movw	r30, r24
     c72:	80 85       	ldd	r24, Z+8	; 0x08
     c74:	91 85       	ldd	r25, Z+9	; 0x09
     c76:	08 17       	cp	r16, r24
     c78:	19 07       	cpc	r17, r25
     c7a:	c0 f1       	brcs	.+112    	; 0xcec <dir_next.clone.3+0xe6>
     c7c:	4b c0       	rjmp	.+150    	; 0xd14 <dir_next.clone.3+0x10e>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIR)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
     c7e:	fc 01       	movw	r30, r24
     c80:	22 81       	ldd	r18, Z+2	; 0x02
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	21 50       	subi	r18, 0x01	; 1
     c86:	30 40       	sbci	r19, 0x00	; 0
     c88:	f8 01       	movw	r30, r16
     c8a:	a4 e0       	ldi	r26, 0x04	; 4
     c8c:	f6 95       	lsr	r31
     c8e:	e7 95       	ror	r30
     c90:	aa 95       	dec	r26
     c92:	e1 f7       	brne	.-8      	; 0xc8c <dir_next.clone.3+0x86>
     c94:	2e 23       	and	r18, r30
     c96:	3f 23       	and	r19, r31
     c98:	21 15       	cp	r18, r1
     c9a:	31 05       	cpc	r19, r1
     c9c:	39 f5       	brne	.+78     	; 0xcec <dir_next.clone.3+0xe6>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
     c9e:	0e 94 3b 05 	call	0xa76	; 0xa76 <get_fat>
     ca2:	ab 01       	movw	r20, r22
     ca4:	bc 01       	movw	r22, r24
				if (clst <= 1) return FR_INT_ERR;
     ca6:	42 30       	cpi	r20, 0x02	; 2
     ca8:	51 05       	cpc	r21, r1
     caa:	61 05       	cpc	r22, r1
     cac:	71 05       	cpc	r23, r1
     cae:	70 f1       	brcs	.+92     	; 0xd0c <dir_next.clone.3+0x106>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
     cb0:	4f 3f       	cpi	r20, 0xFF	; 255
     cb2:	ff ef       	ldi	r31, 0xFF	; 255
     cb4:	5f 07       	cpc	r21, r31
     cb6:	ff ef       	ldi	r31, 0xFF	; 255
     cb8:	6f 07       	cpc	r22, r31
     cba:	ff ef       	ldi	r31, 0xFF	; 255
     cbc:	7f 07       	cpc	r23, r31
     cbe:	41 f1       	breq	.+80     	; 0xd10 <dir_next.clone.3+0x10a>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
     cc0:	88 81       	ld	r24, Y
     cc2:	99 81       	ldd	r25, Y+1	; 0x01
     cc4:	fc 01       	movw	r30, r24
     cc6:	c2 84       	ldd	r12, Z+10	; 0x0a
     cc8:	d3 84       	ldd	r13, Z+11	; 0x0b
     cca:	e4 84       	ldd	r14, Z+12	; 0x0c
     ccc:	f5 84       	ldd	r15, Z+13	; 0x0d
     cce:	4c 15       	cp	r20, r12
     cd0:	5d 05       	cpc	r21, r13
     cd2:	6e 05       	cpc	r22, r14
     cd4:	7f 05       	cpc	r23, r15
     cd6:	f0 f4       	brcc	.+60     	; 0xd14 <dir_next.clone.3+0x10e>
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
     cd8:	4a 87       	std	Y+10, r20	; 0x0a
     cda:	5b 87       	std	Y+11, r21	; 0x0b
     cdc:	6c 87       	std	Y+12, r22	; 0x0c
     cde:	7d 87       	std	Y+13, r23	; 0x0d
				dp->sect = clust2sect(dp->fs, clst);
     ce0:	0e 94 0c 05 	call	0xa18	; 0xa18 <clust2sect>
     ce4:	6e 87       	std	Y+14, r22	; 0x0e
     ce6:	7f 87       	std	Y+15, r23	; 0x0f
     ce8:	88 8b       	std	Y+16, r24	; 0x10
     cea:	99 8b       	std	Y+17, r25	; 0x11
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
     cec:	1d 83       	std	Y+5, r17	; 0x05
     cee:	0c 83       	std	Y+4, r16	; 0x04
	dp->dir = dp->fs->win + (i % (SS(dp->fs) / SZ_DIR)) * SZ_DIR;	/* Current entry in the window */
     cf0:	88 81       	ld	r24, Y
     cf2:	99 81       	ldd	r25, Y+1	; 0x01
     cf4:	86 96       	adiw	r24, 0x26	; 38
     cf6:	f5 e0       	ldi	r31, 0x05	; 5
     cf8:	aa 0c       	add	r10, r10
     cfa:	bb 1c       	adc	r11, r11
     cfc:	fa 95       	dec	r31
     cfe:	e1 f7       	brne	.-8      	; 0xcf8 <dir_next.clone.3+0xf2>
     d00:	8a 0d       	add	r24, r10
     d02:	9b 1d       	adc	r25, r11
     d04:	9b 8b       	std	Y+19, r25	; 0x13
     d06:	8a 8b       	std	Y+18, r24	; 0x12

	return FR_OK;
     d08:	80 e0       	ldi	r24, 0x00	; 0
     d0a:	05 c0       	rjmp	.+10     	; 0xd16 <dir_next.clone.3+0x110>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIR)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
				if (clst <= 1) return FR_INT_ERR;
     d0c:	82 e0       	ldi	r24, 0x02	; 2
     d0e:	03 c0       	rjmp	.+6      	; 0xd16 <dir_next.clone.3+0x110>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	01 c0       	rjmp	.+2      	; 0xd16 <dir_next.clone.3+0x110>
						if (sync_window(dp->fs)) return FR_DISK_ERR;
						dp->fs->winsect++;
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
     d14:	84 e0       	ldi	r24, 0x04	; 4

	dp->index = (WORD)i;	/* Current index */
	dp->dir = dp->fs->win + (i % (SS(dp->fs) / SZ_DIR)) * SZ_DIR;	/* Current entry in the window */

	return FR_OK;
}
     d16:	df 91       	pop	r29
     d18:	cf 91       	pop	r28
     d1a:	1f 91       	pop	r17
     d1c:	0f 91       	pop	r16
     d1e:	ff 90       	pop	r15
     d20:	ef 90       	pop	r14
     d22:	df 90       	pop	r13
     d24:	cf 90       	pop	r12
     d26:	bf 90       	pop	r11
     d28:	af 90       	pop	r10
     d2a:	08 95       	ret

00000d2c <dir_sdi.clone.4>:
/*-----------------------------------------------------------------------*/
/* Directory handling - Set directory index                              */
/*-----------------------------------------------------------------------*/

static
FRESULT dir_sdi (
     d2c:	cf 92       	push	r12
     d2e:	df 92       	push	r13
     d30:	ef 92       	push	r14
     d32:	ff 92       	push	r15
     d34:	0f 93       	push	r16
     d36:	1f 93       	push	r17
     d38:	cf 93       	push	r28
     d3a:	df 93       	push	r29
     d3c:	6c 01       	movw	r12, r24
{
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
     d3e:	dc 01       	movw	r26, r24
     d40:	15 96       	adiw	r26, 0x05	; 5
     d42:	1c 92       	st	X, r1
     d44:	1e 92       	st	-X, r1
     d46:	14 97       	sbiw	r26, 0x04	; 4
	clst = dp->sclust;		/* Table start cluster (0:root) */
     d48:	16 96       	adiw	r26, 0x06	; 6
     d4a:	ed 90       	ld	r14, X+
     d4c:	fd 90       	ld	r15, X+
     d4e:	0d 91       	ld	r16, X+
     d50:	1c 91       	ld	r17, X
     d52:	19 97       	sbiw	r26, 0x09	; 9
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
     d54:	b1 e0       	ldi	r27, 0x01	; 1
     d56:	eb 16       	cp	r14, r27
     d58:	f1 04       	cpc	r15, r1
     d5a:	01 05       	cpc	r16, r1
     d5c:	11 05       	cpc	r17, r1
     d5e:	09 f4       	brne	.+2      	; 0xd62 <dir_sdi.clone.4+0x36>
     d60:	6e c0       	rjmp	.+220    	; 0xe3e <dir_sdi.clone.4+0x112>
     d62:	fc 01       	movw	r30, r24
     d64:	c0 81       	ld	r28, Z
     d66:	d1 81       	ldd	r29, Z+1	; 0x01
     d68:	8a 85       	ldd	r24, Y+10	; 0x0a
     d6a:	9b 85       	ldd	r25, Y+11	; 0x0b
     d6c:	ac 85       	ldd	r26, Y+12	; 0x0c
     d6e:	bd 85       	ldd	r27, Y+13	; 0x0d
     d70:	e8 16       	cp	r14, r24
     d72:	f9 06       	cpc	r15, r25
     d74:	0a 07       	cpc	r16, r26
     d76:	1b 07       	cpc	r17, r27
     d78:	08 f0       	brcs	.+2      	; 0xd7c <dir_sdi.clone.4+0x50>
     d7a:	61 c0       	rjmp	.+194    	; 0xe3e <dir_sdi.clone.4+0x112>
		return FR_INT_ERR;
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
     d7c:	e1 14       	cp	r14, r1
     d7e:	f1 04       	cpc	r15, r1
     d80:	01 05       	cpc	r16, r1
     d82:	11 05       	cpc	r17, r1
     d84:	b9 f4       	brne	.+46     	; 0xdb4 <dir_sdi.clone.4+0x88>
     d86:	88 81       	ld	r24, Y
     d88:	83 30       	cpi	r24, 0x03	; 3
     d8a:	41 f4       	brne	.+16     	; 0xd9c <dir_sdi.clone.4+0x70>
		clst = dp->fs->dirbase;
     d8c:	8a 8d       	ldd	r24, Y+26	; 0x1a
     d8e:	9b 8d       	ldd	r25, Y+27	; 0x1b
     d90:	ac 8d       	ldd	r26, Y+28	; 0x1c
     d92:	bd 8d       	ldd	r27, Y+29	; 0x1d

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
     d94:	00 97       	sbiw	r24, 0x00	; 0
     d96:	a1 05       	cpc	r26, r1
     d98:	b1 05       	cpc	r27, r1
     d9a:	51 f4       	brne	.+20     	; 0xdb0 <dir_sdi.clone.4+0x84>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
     d9c:	88 85       	ldd	r24, Y+8	; 0x08
     d9e:	99 85       	ldd	r25, Y+9	; 0x09
     da0:	00 97       	sbiw	r24, 0x00	; 0
     da2:	09 f4       	brne	.+2      	; 0xda6 <dir_sdi.clone.4+0x7a>
     da4:	4c c0       	rjmp	.+152    	; 0xe3e <dir_sdi.clone.4+0x112>
			return FR_INT_ERR;
		sect = dp->fs->dirbase;
     da6:	6a 8d       	ldd	r22, Y+26	; 0x1a
     da8:	7b 8d       	ldd	r23, Y+27	; 0x1b
     daa:	8c 8d       	ldd	r24, Y+28	; 0x1c
     dac:	9d 8d       	ldd	r25, Y+29	; 0x1d
     dae:	2d c0       	rjmp	.+90     	; 0xe0a <dir_sdi.clone.4+0xde>
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
		return FR_INT_ERR;
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
		clst = dp->fs->dirbase;

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
     db0:	7c 01       	movw	r14, r24
     db2:	8d 01       	movw	r16, r26
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
			return FR_INT_ERR;
		sect = dp->fs->dirbase;
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIR * dp->fs->csize;	/* Entries per cluster */
     db4:	8a 81       	ldd	r24, Y+2	; 0x02
		while (idx >= ic) {	/* Follow cluster chain */
     db6:	88 23       	and	r24, r24
     db8:	19 f5       	brne	.+70     	; 0xe00 <dir_sdi.clone.4+0xd4>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
     dba:	d6 01       	movw	r26, r12
     dbc:	8d 91       	ld	r24, X+
     dbe:	9c 91       	ld	r25, X
     dc0:	b8 01       	movw	r22, r16
     dc2:	a7 01       	movw	r20, r14
     dc4:	0e 94 3b 05 	call	0xa76	; 0xa76 <get_fat>
     dc8:	7b 01       	movw	r14, r22
     dca:	8c 01       	movw	r16, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
     dcc:	6f 3f       	cpi	r22, 0xFF	; 255
     dce:	bf ef       	ldi	r27, 0xFF	; 255
     dd0:	7b 07       	cpc	r23, r27
     dd2:	bf ef       	ldi	r27, 0xFF	; 255
     dd4:	8b 07       	cpc	r24, r27
     dd6:	bf ef       	ldi	r27, 0xFF	; 255
     dd8:	9b 07       	cpc	r25, r27
     dda:	79 f1       	breq	.+94     	; 0xe3a <dir_sdi.clone.4+0x10e>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
     ddc:	62 30       	cpi	r22, 0x02	; 2
     dde:	71 05       	cpc	r23, r1
     de0:	81 05       	cpc	r24, r1
     de2:	91 05       	cpc	r25, r1
     de4:	60 f1       	brcs	.+88     	; 0xe3e <dir_sdi.clone.4+0x112>
     de6:	d6 01       	movw	r26, r12
     de8:	ed 91       	ld	r30, X+
     dea:	fc 91       	ld	r31, X
     dec:	82 85       	ldd	r24, Z+10	; 0x0a
     dee:	93 85       	ldd	r25, Z+11	; 0x0b
     df0:	a4 85       	ldd	r26, Z+12	; 0x0c
     df2:	b5 85       	ldd	r27, Z+13	; 0x0d
     df4:	e8 16       	cp	r14, r24
     df6:	f9 06       	cpc	r15, r25
     df8:	0a 07       	cpc	r16, r26
     dfa:	1b 07       	cpc	r17, r27
     dfc:	f0 f2       	brcs	.-68     	; 0xdba <dir_sdi.clone.4+0x8e>
     dfe:	1f c0       	rjmp	.+62     	; 0xe3e <dir_sdi.clone.4+0x112>
				return FR_INT_ERR;
			idx -= ic;
		}
		sect = clust2sect(dp->fs, clst);
     e00:	ce 01       	movw	r24, r28
     e02:	b8 01       	movw	r22, r16
     e04:	a7 01       	movw	r20, r14
     e06:	0e 94 0c 05 	call	0xa18	; 0xa18 <clust2sect>
	}
	dp->clust = clst;	/* Current cluster# */
     e0a:	f6 01       	movw	r30, r12
     e0c:	e2 86       	std	Z+10, r14	; 0x0a
     e0e:	f3 86       	std	Z+11, r15	; 0x0b
     e10:	04 87       	std	Z+12, r16	; 0x0c
     e12:	15 87       	std	Z+13, r17	; 0x0d
	if (!sect) return FR_INT_ERR;
     e14:	61 15       	cp	r22, r1
     e16:	71 05       	cpc	r23, r1
     e18:	81 05       	cpc	r24, r1
     e1a:	91 05       	cpc	r25, r1
     e1c:	81 f0       	breq	.+32     	; 0xe3e <dir_sdi.clone.4+0x112>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIR);					/* Sector# of the directory entry */
     e1e:	d6 01       	movw	r26, r12
     e20:	1e 96       	adiw	r26, 0x0e	; 14
     e22:	6d 93       	st	X+, r22
     e24:	7d 93       	st	X+, r23
     e26:	8d 93       	st	X+, r24
     e28:	9c 93       	st	X, r25
     e2a:	51 97       	sbiw	r26, 0x11	; 17
	dp->dir = dp->fs->win + (idx % (SS(dp->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
     e2c:	a6 96       	adiw	r28, 0x26	; 38
     e2e:	53 96       	adiw	r26, 0x13	; 19
     e30:	dc 93       	st	X, r29
     e32:	ce 93       	st	-X, r28
     e34:	52 97       	sbiw	r26, 0x12	; 18

	return FR_OK;
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	03 c0       	rjmp	.+6      	; 0xe40 <dir_sdi.clone.4+0x114>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIR * dp->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	01 c0       	rjmp	.+2      	; 0xe40 <dir_sdi.clone.4+0x114>
			idx -= ic;
		}
		sect = clust2sect(dp->fs, clst);
	}
	dp->clust = clst;	/* Current cluster# */
	if (!sect) return FR_INT_ERR;
     e3e:	82 e0       	ldi	r24, 0x02	; 2
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIR);					/* Sector# of the directory entry */
	dp->dir = dp->fs->win + (idx % (SS(dp->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */

	return FR_OK;
}
     e40:	df 91       	pop	r29
     e42:	cf 91       	pop	r28
     e44:	1f 91       	pop	r17
     e46:	0f 91       	pop	r16
     e48:	ff 90       	pop	r15
     e4a:	ef 90       	pop	r14
     e4c:	df 90       	pop	r13
     e4e:	cf 90       	pop	r12
     e50:	08 95       	ret

00000e52 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
     e52:	af 92       	push	r10
     e54:	bf 92       	push	r11
     e56:	cf 92       	push	r12
     e58:	df 92       	push	r13
     e5a:	ef 92       	push	r14
     e5c:	ff 92       	push	r15
     e5e:	0f 93       	push	r16
     e60:	1f 93       	push	r17
     e62:	cf 93       	push	r28
     e64:	df 93       	push	r29
     e66:	ec 01       	movw	r28, r24
     e68:	8b 01       	movw	r16, r22
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
     e6a:	fb 01       	movw	r30, r22
     e6c:	80 81       	ld	r24, Z
     e6e:	8f 32       	cpi	r24, 0x2F	; 47
     e70:	11 f0       	breq	.+4      	; 0xe76 <follow_path+0x24>
     e72:	8c 35       	cpi	r24, 0x5C	; 92
     e74:	11 f4       	brne	.+4      	; 0xe7a <follow_path+0x28>
		path++;
     e76:	0f 5f       	subi	r16, 0xFF	; 255
     e78:	1f 4f       	sbci	r17, 0xFF	; 255
	dp->sclust = 0;							/* Always start from the root directory */
     e7a:	1e 82       	std	Y+6, r1	; 0x06
     e7c:	1f 82       	std	Y+7, r1	; 0x07
     e7e:	18 86       	std	Y+8, r1	; 0x08
     e80:	19 86       	std	Y+9, r1	; 0x09
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
     e82:	f8 01       	movw	r30, r16
     e84:	80 81       	ld	r24, Z
     e86:	80 32       	cpi	r24, 0x20	; 32
     e88:	30 f4       	brcc	.+12     	; 0xe96 <follow_path+0x44>
		res = dir_sdi(dp, 0);
     e8a:	ce 01       	movw	r24, r28
     e8c:	0e 94 96 06 	call	0xd2c	; 0xd2c <dir_sdi.clone.4>
		dp->dir = 0;
     e90:	1b 8a       	std	Y+19, r1	; 0x13
     e92:	1a 8a       	std	Y+18, r1	; 0x12
     e94:	f4 c0       	rjmp	.+488    	; 0x107e <follow_path+0x22c>
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
     e96:	40 e2       	ldi	r20, 0x20	; 32
     e98:	b4 2e       	mov	r11, r20
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first character collides with DDE, replace it with 0x05 */
     e9a:	35 e0       	ldi	r19, 0x05	; 5
     e9c:	a3 2e       	mov	r10, r19
	dp->sclust = 0;							/* Always start from the root directory */
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
		res = dir_sdi(dp, 0);
		dp->dir = 0;
     e9e:	78 01       	movw	r14, r16
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
     ea0:	f8 01       	movw	r30, r16
     ea2:	80 81       	ld	r24, Z
     ea4:	0f 5f       	subi	r16, 0xFF	; 255
     ea6:	1f 4f       	sbci	r17, 0xFF	; 255
     ea8:	8f 32       	cpi	r24, 0x2F	; 47
     eaa:	c9 f3       	breq	.-14     	; 0xe9e <follow_path+0x4c>
     eac:	8c 35       	cpi	r24, 0x5C	; 92
     eae:	b9 f3       	breq	.-18     	; 0xe9e <follow_path+0x4c>
	sfn = dp->fn;
     eb0:	ec 89       	ldd	r30, Y+20	; 0x14
     eb2:	fd 89       	ldd	r31, Y+21	; 0x15
}

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
     eb4:	df 01       	movw	r26, r30
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
	sfn = dp->fn;
     eb6:	8c e0       	ldi	r24, 0x0C	; 12
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	01 c0       	rjmp	.+2      	; 0xebe <follow_path+0x6c>
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
		*d++ = (BYTE)val;
     ebc:	bd 92       	st	X+, r11
     ebe:	01 97       	sbiw	r24, 0x01	; 1
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
     ec0:	e9 f7       	brne	.-6      	; 0xebc <follow_path+0x6a>
     ec2:	80 e0       	ldi	r24, 0x00	; 0
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	00 e0       	ldi	r16, 0x00	; 0
     ec8:	10 e0       	ldi	r17, 0x00	; 0
     eca:	28 e0       	ldi	r18, 0x08	; 8
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	dd 24       	eor	r13, r13
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
     ed0:	d7 01       	movw	r26, r14
     ed2:	a0 0f       	add	r26, r16
     ed4:	b1 1f       	adc	r27, r17
     ed6:	cc 90       	ld	r12, X
     ed8:	0f 5f       	subi	r16, 0xFF	; 255
     eda:	1f 4f       	sbci	r17, 0xFF	; 255
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
     edc:	4c 2d       	mov	r20, r12
     ede:	41 32       	cpi	r20, 0x21	; 33
     ee0:	08 f4       	brcc	.+2      	; 0xee4 <follow_path+0x92>
     ee2:	65 c0       	rjmp	.+202    	; 0xfae <follow_path+0x15c>
     ee4:	4f 32       	cpi	r20, 0x2F	; 47
     ee6:	09 f4       	brne	.+2      	; 0xeea <follow_path+0x98>
     ee8:	64 c0       	rjmp	.+200    	; 0xfb2 <follow_path+0x160>
     eea:	4c 35       	cpi	r20, 0x5C	; 92
     eec:	09 f4       	brne	.+2      	; 0xef0 <follow_path+0x9e>
     eee:	61 c0       	rjmp	.+194    	; 0xfb2 <follow_path+0x160>
		if (c == '.' || i >= ni) {
     ef0:	4e 32       	cpi	r20, 0x2E	; 46
     ef2:	19 f0       	breq	.+6      	; 0xefa <follow_path+0xa8>
     ef4:	82 17       	cp	r24, r18
     ef6:	93 07       	cpc	r25, r19
     ef8:	78 f0       	brcs	.+30     	; 0xf18 <follow_path+0xc6>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
     efa:	28 30       	cpi	r18, 0x08	; 8
     efc:	31 05       	cpc	r19, r1
     efe:	09 f0       	breq	.+2      	; 0xf02 <follow_path+0xb0>
     f00:	bb c0       	rjmp	.+374    	; 0x1078 <follow_path+0x226>
     f02:	8c 2d       	mov	r24, r12
     f04:	8e 32       	cpi	r24, 0x2E	; 46
     f06:	09 f0       	breq	.+2      	; 0xf0a <follow_path+0xb8>
     f08:	b7 c0       	rjmp	.+366    	; 0x1078 <follow_path+0x226>
			i = 8; ni = 11;
			b <<= 2; continue;
     f0a:	dd 0c       	add	r13, r13
     f0c:	dd 0c       	add	r13, r13
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
     f0e:	88 e0       	ldi	r24, 0x08	; 8
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	2b e0       	ldi	r18, 0x0B	; 11
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	dc cf       	rjmp	.-72     	; 0xed0 <follow_path+0x7e>
			b <<= 2; continue;
		}
		if (c >= 0x80) {				/* Extended character? */
     f18:	c7 fe       	sbrs	r12, 7
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <follow_path+0xce>
			b |= 3;						/* Eliminate NT flag */
     f1c:	43 e0       	ldi	r20, 0x03	; 3
     f1e:	d4 2a       	or	r13, r20
#if !_DF1S
			return FR_INVALID_NAME;		/* Reject extended characters (ASCII cfg) */
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
     f20:	4c 2d       	mov	r20, r12
     f22:	41 58       	subi	r20, 0x81	; 129
     f24:	4f 31       	cpi	r20, 0x1F	; 31
     f26:	18 f0       	brcs	.+6      	; 0xf2e <follow_path+0xdc>
     f28:	4f 55       	subi	r20, 0x5F	; 95
     f2a:	4d 31       	cpi	r20, 0x1D	; 29
     f2c:	f8 f4       	brcc	.+62     	; 0xf6c <follow_path+0x11a>
			d = (BYTE)p[si++];			/* Get 2nd byte */
     f2e:	d7 01       	movw	r26, r14
     f30:	a0 0f       	add	r26, r16
     f32:	b1 1f       	adc	r27, r17
     f34:	6c 91       	ld	r22, X
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
     f36:	46 2f       	mov	r20, r22
     f38:	40 54       	subi	r20, 0x40	; 64
     f3a:	4f 33       	cpi	r20, 0x3F	; 63
     f3c:	20 f0       	brcs	.+8      	; 0xf46 <follow_path+0xf4>
     f3e:	40 54       	subi	r20, 0x40	; 64
     f40:	4d 37       	cpi	r20, 0x7D	; 125
     f42:	08 f0       	brcs	.+2      	; 0xf46 <follow_path+0xf4>
     f44:	99 c0       	rjmp	.+306    	; 0x1078 <follow_path+0x226>
     f46:	a9 01       	movw	r20, r18
     f48:	41 50       	subi	r20, 0x01	; 1
     f4a:	50 40       	sbci	r21, 0x00	; 0
     f4c:	84 17       	cp	r24, r20
     f4e:	95 07       	cpc	r25, r21
     f50:	08 f0       	brcs	.+2      	; 0xf54 <follow_path+0x102>
     f52:	92 c0       	rjmp	.+292    	; 0x1078 <follow_path+0x226>
			return FR_INVALID_NAME;		/* Reject extended characters (ASCII cfg) */
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			d = (BYTE)p[si++];			/* Get 2nd byte */
     f54:	0f 5f       	subi	r16, 0xFF	; 255
     f56:	1f 4f       	sbci	r17, 0xFF	; 255
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
     f58:	df 01       	movw	r26, r30
     f5a:	a8 0f       	add	r26, r24
     f5c:	b9 1f       	adc	r27, r25
     f5e:	cc 92       	st	X, r12
     f60:	01 96       	adiw	r24, 0x01	; 1
			sfn[i++] = d;
     f62:	df 01       	movw	r26, r30
     f64:	a8 0f       	add	r26, r24
     f66:	b9 1f       	adc	r27, r25
     f68:	6c 93       	st	X, r22
     f6a:	1f c0       	rjmp	.+62     	; 0xfaa <follow_path+0x158>
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
     f6c:	6c 2d       	mov	r22, r12
     f6e:	70 e0       	ldi	r23, 0x00	; 0
     f70:	a9 e6       	ldi	r26, 0x69	; 105
     f72:	b0 e0       	ldi	r27, 0x00	; 0
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
     f74:	4d 91       	ld	r20, X+
     f76:	44 23       	and	r20, r20
     f78:	29 f0       	breq	.+10     	; 0xf84 <follow_path+0x132>
     f7a:	50 e0       	ldi	r21, 0x00	; 0
     f7c:	46 17       	cp	r20, r22
     f7e:	57 07       	cpc	r21, r23
     f80:	c9 f7       	brne	.-14     	; 0xf74 <follow_path+0x122>
     f82:	7a c0       	rjmp	.+244    	; 0x1078 <follow_path+0x226>
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
     f84:	4c 2d       	mov	r20, r12
     f86:	41 54       	subi	r20, 0x41	; 65
     f88:	4a 31       	cpi	r20, 0x1A	; 26
     f8a:	18 f4       	brcc	.+6      	; 0xf92 <follow_path+0x140>
				b |= 2;
     f8c:	42 e0       	ldi	r20, 0x02	; 2
     f8e:	d4 2a       	or	r13, r20
     f90:	08 c0       	rjmp	.+16     	; 0xfa2 <follow_path+0x150>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
     f92:	4c 2d       	mov	r20, r12
     f94:	41 56       	subi	r20, 0x61	; 97
     f96:	4a 31       	cpi	r20, 0x1A	; 26
     f98:	20 f4       	brcc	.+8      	; 0xfa2 <follow_path+0x150>
					b |= 1; c -= 0x20;
     f9a:	41 e0       	ldi	r20, 0x01	; 1
     f9c:	d4 2a       	or	r13, r20
     f9e:	40 ee       	ldi	r20, 0xE0	; 224
     fa0:	c4 0e       	add	r12, r20
				}
			}
			sfn[i++] = c;
     fa2:	df 01       	movw	r26, r30
     fa4:	a8 0f       	add	r26, r24
     fa6:	b9 1f       	adc	r27, r25
     fa8:	cc 92       	st	X, r12
     faa:	01 96       	adiw	r24, 0x01	; 1
     fac:	91 cf       	rjmp	.-222    	; 0xed0 <follow_path+0x7e>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
     fae:	44 e0       	ldi	r20, 0x04	; 4
     fb0:	01 c0       	rjmp	.+2      	; 0xfb4 <follow_path+0x162>
     fb2:	40 e0       	ldi	r20, 0x00	; 0

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
     fb4:	00 97       	sbiw	r24, 0x00	; 0
     fb6:	09 f4       	brne	.+2      	; 0xfba <follow_path+0x168>
     fb8:	5f c0       	rjmp	.+190    	; 0x1078 <follow_path+0x226>
	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first character collides with DDE, replace it with 0x05 */
     fba:	80 81       	ld	r24, Z
     fbc:	85 3e       	cpi	r24, 0xE5	; 229
     fbe:	09 f4       	brne	.+2      	; 0xfc2 <follow_path+0x170>
     fc0:	a0 82       	st	Z, r10

	if (ni == 8) b <<= 2;
     fc2:	28 30       	cpi	r18, 0x08	; 8
     fc4:	31 05       	cpc	r19, r1
     fc6:	11 f4       	brne	.+4      	; 0xfcc <follow_path+0x17a>
     fc8:	dd 0c       	add	r13, r13
     fca:	dd 0c       	add	r13, r13
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
     fcc:	8d 2d       	mov	r24, r13
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	9c 01       	movw	r18, r24
     fd2:	23 70       	andi	r18, 0x03	; 3
     fd4:	30 70       	andi	r19, 0x00	; 0
     fd6:	21 30       	cpi	r18, 0x01	; 1
     fd8:	31 05       	cpc	r19, r1
     fda:	09 f4       	brne	.+2      	; 0xfde <follow_path+0x18c>
     fdc:	40 61       	ori	r20, 0x10	; 16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
     fde:	8c 70       	andi	r24, 0x0C	; 12
     fe0:	90 70       	andi	r25, 0x00	; 0
     fe2:	84 30       	cpi	r24, 0x04	; 4
     fe4:	91 05       	cpc	r25, r1
     fe6:	09 f4       	brne	.+2      	; 0xfea <follow_path+0x198>
     fe8:	48 60       	ori	r20, 0x08	; 8

	sfn[NS] = c;		/* Store NT flag, File name is created */
     fea:	43 87       	std	Z+11, r20	; 0x0b
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
     fec:	ce 01       	movw	r24, r28
     fee:	0e 94 96 06 	call	0xd2c	; 0xd2c <dir_sdi.clone.4>
	if (res != FR_OK) return res;
     ff2:	88 23       	and	r24, r24
     ff4:	19 f5       	brne	.+70     	; 0x103c <follow_path+0x1ea>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
     ff6:	4e 85       	ldd	r20, Y+14	; 0x0e
     ff8:	5f 85       	ldd	r21, Y+15	; 0x0f
     ffa:	68 89       	ldd	r22, Y+16	; 0x10
     ffc:	79 89       	ldd	r23, Y+17	; 0x11
     ffe:	88 81       	ld	r24, Y
    1000:	99 81       	ldd	r25, Y+1	; 0x01
    1002:	0e 94 74 02 	call	0x4e8	; 0x4e8 <move_window>
		if (res != FR_OK) break;
    1006:	88 23       	and	r24, r24
    1008:	c9 f4       	brne	.+50     	; 0x103c <follow_path+0x1ea>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
    100a:	ea 89       	ldd	r30, Y+18	; 0x12
    100c:	fb 89       	ldd	r31, Y+19	; 0x13
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    100e:	90 81       	ld	r25, Z
    1010:	99 23       	and	r25, r25
    1012:	99 f0       	breq	.+38     	; 0x103a <follow_path+0x1e8>
				if (!(dp->fn[NS] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
    1014:	93 85       	ldd	r25, Z+11	; 0x0b
    1016:	93 fd       	sbrc	r25, 3
    1018:	0c c0       	rjmp	.+24     	; 0x1032 <follow_path+0x1e0>
    101a:	ac 89       	ldd	r26, Y+20	; 0x14
    101c:	bd 89       	ldd	r27, Y+21	; 0x15
/*-----------------------------------------------------------------------*/
/* Follow a file path                                                    */
/*-----------------------------------------------------------------------*/

static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
    101e:	9f 01       	movw	r18, r30
    1020:	25 5f       	subi	r18, 0xF5	; 245
    1022:	3f 4f       	sbci	r19, 0xFF	; 255
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	while (cnt-- && (r = *d++ - *s++) == 0) ;
    1024:	e2 17       	cp	r30, r18
    1026:	f3 07       	cpc	r31, r19
    1028:	49 f0       	breq	.+18     	; 0x103c <follow_path+0x1ea>
    102a:	41 91       	ld	r20, Z+
    102c:	9d 91       	ld	r25, X+
    102e:	49 17       	cp	r20, r25
    1030:	c9 f3       	breq	.-14     	; 0x1024 <follow_path+0x1d2>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
    1032:	ce 01       	movw	r24, r28
    1034:	0e 94 03 06 	call	0xc06	; 0xc06 <dir_next.clone.3>
    1038:	dc cf       	rjmp	.-72     	; 0xff2 <follow_path+0x1a0>
	do {
		res = move_window(dp->fs, dp->sect);
		if (res != FR_OK) break;
		dir = dp->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    103a:	84 e0       	ldi	r24, 0x04	; 4
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
			if (res != FR_OK) break;
			res = dir_find(dp);				/* Find an object with the sagment name */
			ns = dp->fn[NS];
    103c:	ec 89       	ldd	r30, Y+20	; 0x14
    103e:	fd 89       	ldd	r31, Y+21	; 0x15
    1040:	93 85       	ldd	r25, Z+11	; 0x0b
			if (res != FR_OK) {				/* Failed to find the object */
    1042:	88 23       	and	r24, r24
    1044:	29 f0       	breq	.+10     	; 0x1050 <follow_path+0x1fe>
				if (res == FR_NO_FILE) {	/* Object is not found */
    1046:	84 30       	cpi	r24, 0x04	; 4
    1048:	d1 f4       	brne	.+52     	; 0x107e <follow_path+0x22c>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
    104a:	92 ff       	sbrs	r25, 2
    104c:	17 c0       	rjmp	.+46     	; 0x107c <follow_path+0x22a>
    104e:	17 c0       	rjmp	.+46     	; 0x107e <follow_path+0x22c>
					}
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
    1050:	92 fd       	sbrc	r25, 2
    1052:	15 c0       	rjmp	.+42     	; 0x107e <follow_path+0x22c>
			dir = dp->dir;						/* Follow the sub-directory */
    1054:	6a 89       	ldd	r22, Y+18	; 0x12
    1056:	7b 89       	ldd	r23, Y+19	; 0x13
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
    1058:	fb 01       	movw	r30, r22
    105a:	83 85       	ldd	r24, Z+11	; 0x0b
    105c:	84 ff       	sbrs	r24, 4
    105e:	0e c0       	rjmp	.+28     	; 0x107c <follow_path+0x22a>
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
    1060:	0e 0d       	add	r16, r14
    1062:	1f 1d       	adc	r17, r15
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
    1064:	e8 81       	ld	r30, Y
    1066:	f9 81       	ldd	r31, Y+1	; 0x01
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
			dir = dp->dir;						/* Follow the sub-directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
				res = FR_NO_PATH; break;
			}
			dp->sclust = ld_clust(dp->fs, dir);
    1068:	80 81       	ld	r24, Z
    106a:	0e 94 e7 02 	call	0x5ce	; 0x5ce <ld_clust.clone.0>
    106e:	6e 83       	std	Y+6, r22	; 0x06
    1070:	7f 83       	std	Y+7, r23	; 0x07
    1072:	88 87       	std	Y+8, r24	; 0x08
    1074:	99 87       	std	Y+9, r25	; 0x09
		}
    1076:	13 cf       	rjmp	.-474    	; 0xe9e <follow_path+0x4c>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
    1078:	86 e0       	ldi	r24, 0x06	; 6
    107a:	01 c0       	rjmp	.+2      	; 0x107e <follow_path+0x22c>
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
			dir = dp->dir;						/* Follow the sub-directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
				res = FR_NO_PATH; break;
    107c:	85 e0       	ldi	r24, 0x05	; 5
			dp->sclust = ld_clust(dp->fs, dir);
		}
	}

	return res;
}
    107e:	df 91       	pop	r29
    1080:	cf 91       	pop	r28
    1082:	1f 91       	pop	r17
    1084:	0f 91       	pop	r16
    1086:	ff 90       	pop	r15
    1088:	ef 90       	pop	r14
    108a:	df 90       	pop	r13
    108c:	cf 90       	pop	r12
    108e:	bf 90       	pop	r11
    1090:	af 90       	pop	r10
    1092:	08 95       	ret

00001094 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
    1094:	df 93       	push	r29
    1096:	cf 93       	push	r28
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62
    109c:	27 97       	sbiw	r28, 0x07	; 7
    109e:	0f b6       	in	r0, 0x3f	; 63
    10a0:	f8 94       	cli
    10a2:	de bf       	out	0x3e, r29	; 62
    10a4:	0f be       	out	0x3f, r0	; 63
    10a6:	cd bf       	out	0x3d, r28	; 61
    10a8:	9c 83       	std	Y+4, r25	; 0x04
    10aa:	8b 83       	std	Y+3, r24	; 0x03
    10ac:	7e 83       	std	Y+6, r23	; 0x06
    10ae:	6d 83       	std	Y+5, r22	; 0x05
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
    10b0:	7a 83       	std	Y+2, r23	; 0x02
    10b2:	69 83       	std	Y+1, r22	; 0x01


	vol = get_ldnumber(&rp);
    10b4:	ce 01       	movw	r24, r28
    10b6:	01 96       	adiw	r24, 0x01	; 1
    10b8:	4f 83       	std	Y+7, r20	; 0x07
    10ba:	0e 94 2c 02 	call	0x458	; 0x458 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
    10be:	4f 81       	ldd	r20, Y+7	; 0x07
    10c0:	97 fd       	sbrc	r25, 7
    10c2:	24 c0       	rjmp	.+72     	; 0x110c <f_mount+0x78>
	cfs = FatFs[vol];					/* Pointer to fs object */
    10c4:	fc 01       	movw	r30, r24
    10c6:	ee 0f       	add	r30, r30
    10c8:	ff 1f       	adc	r31, r31
    10ca:	e8 58       	subi	r30, 0x88	; 136
    10cc:	ff 4f       	sbci	r31, 0xFF	; 255
    10ce:	01 90       	ld	r0, Z+
    10d0:	f0 81       	ld	r31, Z
    10d2:	e0 2d       	mov	r30, r0

	if (cfs) {
    10d4:	30 97       	sbiw	r30, 0x00	; 0
    10d6:	09 f0       	breq	.+2      	; 0x10da <f_mount+0x46>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
    10d8:	10 82       	st	Z, r1
	}

	if (fs) {
    10da:	eb 81       	ldd	r30, Y+3	; 0x03
    10dc:	fc 81       	ldd	r31, Y+4	; 0x04
    10de:	30 97       	sbiw	r30, 0x00	; 0
    10e0:	09 f0       	breq	.+2      	; 0x10e4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
    10e2:	10 82       	st	Z, r1
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
    10e4:	dc 01       	movw	r26, r24
    10e6:	aa 0f       	add	r26, r26
    10e8:	bb 1f       	adc	r27, r27
    10ea:	a8 58       	subi	r26, 0x88	; 136
    10ec:	bf 4f       	sbci	r27, 0xFF	; 255
    10ee:	11 96       	adiw	r26, 0x01	; 1
    10f0:	fc 93       	st	X, r31
    10f2:	ee 93       	st	-X, r30

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
    10f4:	30 97       	sbiw	r30, 0x00	; 0
    10f6:	61 f0       	breq	.+24     	; 0x1110 <f_mount+0x7c>
    10f8:	41 30       	cpi	r20, 0x01	; 1
    10fa:	51 f4       	brne	.+20     	; 0x1110 <f_mount+0x7c>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
    10fc:	ce 01       	movw	r24, r28
    10fe:	03 96       	adiw	r24, 0x03	; 3
    1100:	be 01       	movw	r22, r28
    1102:	6b 5f       	subi	r22, 0xFB	; 251
    1104:	7f 4f       	sbci	r23, 0xFF	; 255
    1106:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <find_volume.clone.2>
	LEAVE_FF(fs, res);
    110a:	03 c0       	rjmp	.+6      	; 0x1112 <f_mount+0x7e>
	FRESULT res;
	const TCHAR *rp = path;


	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
    110c:	8b e0       	ldi	r24, 0x0B	; 11
    110e:	01 c0       	rjmp	.+2      	; 0x1112 <f_mount+0x7e>
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
    1110:	80 e0       	ldi	r24, 0x00	; 0

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
    1112:	27 96       	adiw	r28, 0x07	; 7
    1114:	0f b6       	in	r0, 0x3f	; 63
    1116:	f8 94       	cli
    1118:	de bf       	out	0x3e, r29	; 62
    111a:	0f be       	out	0x3f, r0	; 63
    111c:	cd bf       	out	0x3d, r28	; 61
    111e:	cf 91       	pop	r28
    1120:	df 91       	pop	r29
    1122:	08 95       	ret

00001124 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    1124:	cf 92       	push	r12
    1126:	df 92       	push	r13
    1128:	ef 92       	push	r14
    112a:	ff 92       	push	r15
    112c:	0f 93       	push	r16
    112e:	1f 93       	push	r17
    1130:	df 93       	push	r29
    1132:	cf 93       	push	r28
    1134:	cd b7       	in	r28, 0x3d	; 61
    1136:	de b7       	in	r29, 0x3e	; 62
    1138:	a5 97       	sbiw	r28, 0x25	; 37
    113a:	0f b6       	in	r0, 0x3f	; 63
    113c:	f8 94       	cli
    113e:	de bf       	out	0x3e, r29	; 62
    1140:	0f be       	out	0x3f, r0	; 63
    1142:	cd bf       	out	0x3d, r28	; 61
    1144:	8c 01       	movw	r16, r24
    1146:	7c a3       	std	Y+36, r23	; 0x24
    1148:	6b a3       	std	Y+35, r22	; 0x23
    114a:	c4 2e       	mov	r12, r20
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	if (!fp) return FR_INVALID_OBJECT;
    114c:	00 97       	sbiw	r24, 0x00	; 0
    114e:	51 f1       	breq	.+84     	; 0x11a4 <f_open+0x80>
	fp->fs = 0;			/* Clear file object */
    1150:	fc 01       	movw	r30, r24
    1152:	11 82       	std	Z+1, r1	; 0x01
    1154:	10 82       	st	Z, r1
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
    1156:	7d e0       	ldi	r23, 0x0D	; 13
    1158:	e7 2e       	mov	r14, r23
    115a:	f1 2c       	mov	r15, r1
    115c:	ec 0e       	add	r14, r28
    115e:	fd 1e       	adc	r15, r29
    1160:	c7 01       	movw	r24, r14
    1162:	be 01       	movw	r22, r28
    1164:	6d 5d       	subi	r22, 0xDD	; 221
    1166:	7f 4f       	sbci	r23, 0xFF	; 255
    1168:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <find_volume.clone.2>
    116c:	28 2f       	mov	r18, r24
#endif
	if (res == FR_OK) {
    116e:	88 23       	and	r24, r24
    1170:	d1 f4       	brne	.+52     	; 0x11a6 <f_open+0x82>
		INIT_BUF(dj);
    1172:	ce 01       	movw	r24, r28
    1174:	01 96       	adiw	r24, 0x01	; 1
    1176:	9a a3       	std	Y+34, r25	; 0x22
    1178:	89 a3       	std	Y+33, r24	; 0x21
		res = follow_path(&dj, path);	/* Follow the file path */
    117a:	6b a1       	ldd	r22, Y+35	; 0x23
    117c:	7c a1       	ldd	r23, Y+36	; 0x24
    117e:	c7 01       	movw	r24, r14
    1180:	0e 94 29 07 	call	0xe52	; 0xe52 <follow_path>
    1184:	28 2f       	mov	r18, r24
		dir = dj.dir;
    1186:	ef 8c       	ldd	r14, Y+31	; 0x1f
    1188:	f8 a0       	ldd	r15, Y+32	; 0x20
			if (!fp->lockid) res = FR_INT_ERR;
#endif
		}

#else				/* R/O configuration */
		if (res == FR_OK) {					/* Follow succeeded */
    118a:	88 23       	and	r24, r24
    118c:	61 f4       	brne	.+24     	; 0x11a6 <f_open+0x82>
			dir = dj.dir;
			if (!dir) {						/* Current directory itself */
    118e:	e1 14       	cp	r14, r1
    1190:	f1 04       	cpc	r15, r1
    1192:	31 f0       	breq	.+12     	; 0x11a0 <f_open+0x7c>
				res = FR_INVALID_NAME;
			} else {
				if (dir[DIR_Attr] & AM_DIR)	/* It is a directory */
    1194:	f7 01       	movw	r30, r14
    1196:	83 85       	ldd	r24, Z+11	; 0x0b
    1198:	84 ff       	sbrs	r24, 4
    119a:	15 c0       	rjmp	.+42     	; 0x11c6 <f_open+0xa2>
					res = FR_NO_FILE;
    119c:	24 e0       	ldi	r18, 0x04	; 4
    119e:	03 c0       	rjmp	.+6      	; 0x11a6 <f_open+0x82>

#else				/* R/O configuration */
		if (res == FR_OK) {					/* Follow succeeded */
			dir = dj.dir;
			if (!dir) {						/* Current directory itself */
				res = FR_INVALID_NAME;
    11a0:	26 e0       	ldi	r18, 0x06	; 6
    11a2:	01 c0       	rjmp	.+2      	; 0x11a6 <f_open+0x82>
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	if (!fp) return FR_INVALID_OBJECT;
    11a4:	29 e0       	ldi	r18, 0x09	; 9
			fp->id = fp->fs->id;
		}
	}

	LEAVE_FF(dj.fs, res);
}
    11a6:	82 2f       	mov	r24, r18
    11a8:	a5 96       	adiw	r28, 0x25	; 37
    11aa:	0f b6       	in	r0, 0x3f	; 63
    11ac:	f8 94       	cli
    11ae:	de bf       	out	0x3e, r29	; 62
    11b0:	0f be       	out	0x3f, r0	; 63
    11b2:	cd bf       	out	0x3d, r28	; 61
    11b4:	cf 91       	pop	r28
    11b6:	df 91       	pop	r29
    11b8:	1f 91       	pop	r17
    11ba:	0f 91       	pop	r16
    11bc:	ff 90       	pop	r15
    11be:	ef 90       	pop	r14
    11c0:	df 90       	pop	r13
    11c2:	cf 90       	pop	r12
    11c4:	08 95       	ret
	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
#else
	mode &= FA_READ;
    11c6:	8c 2d       	mov	r24, r12
    11c8:	81 70       	andi	r24, 0x01	; 1
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
			fp->flag = mode;					/* File access mode */
    11ca:	f8 01       	movw	r30, r16
    11cc:	84 83       	std	Z+4, r24	; 0x04
			fp->err = 0;						/* Clear error flag */
    11ce:	15 82       	std	Z+5, r1	; 0x05
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
    11d0:	cd 84       	ldd	r12, Y+13	; 0x0d
    11d2:	de 84       	ldd	r13, Y+14	; 0x0e
    11d4:	f6 01       	movw	r30, r12
    11d6:	80 81       	ld	r24, Z
    11d8:	b7 01       	movw	r22, r14
    11da:	2d a3       	std	Y+37, r18	; 0x25
    11dc:	0e 94 e7 02 	call	0x5ce	; 0x5ce <ld_clust.clone.0>
    11e0:	f8 01       	movw	r30, r16
    11e2:	66 87       	std	Z+14, r22	; 0x0e
    11e4:	77 87       	std	Z+15, r23	; 0x0f
    11e6:	80 8b       	std	Z+16, r24	; 0x10
    11e8:	91 8b       	std	Z+17, r25	; 0x11
			fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    11ea:	f7 01       	movw	r30, r14
    11ec:	84 8d       	ldd	r24, Z+28	; 0x1c
    11ee:	95 8d       	ldd	r25, Z+29	; 0x1d
    11f0:	a6 8d       	ldd	r26, Z+30	; 0x1e
    11f2:	b7 8d       	ldd	r27, Z+31	; 0x1f
    11f4:	f8 01       	movw	r30, r16
    11f6:	82 87       	std	Z+10, r24	; 0x0a
    11f8:	93 87       	std	Z+11, r25	; 0x0b
    11fa:	a4 87       	std	Z+12, r26	; 0x0c
    11fc:	b5 87       	std	Z+13, r27	; 0x0d
			fp->fptr = 0;						/* File pointer */
    11fe:	16 82       	std	Z+6, r1	; 0x06
    1200:	17 82       	std	Z+7, r1	; 0x07
    1202:	10 86       	std	Z+8, r1	; 0x08
    1204:	11 86       	std	Z+9, r1	; 0x09
			fp->dsect = 0;
    1206:	16 8a       	std	Z+22, r1	; 0x16
    1208:	17 8a       	std	Z+23, r1	; 0x17
    120a:	10 8e       	std	Z+24, r1	; 0x18
    120c:	11 8e       	std	Z+25, r1	; 0x19
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
    120e:	d1 82       	std	Z+1, r13	; 0x01
    1210:	c0 82       	st	Z, r12
			fp->id = fp->fs->id;
    1212:	f6 01       	movw	r30, r12
    1214:	86 81       	ldd	r24, Z+6	; 0x06
    1216:	97 81       	ldd	r25, Z+7	; 0x07
    1218:	f8 01       	movw	r30, r16
    121a:	93 83       	std	Z+3, r25	; 0x03
    121c:	82 83       	std	Z+2, r24	; 0x02
    121e:	2d a1       	ldd	r18, Y+37	; 0x25
    1220:	c2 cf       	rjmp	.-124    	; 0x11a6 <f_open+0x82>

00001222 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
    1222:	2f 92       	push	r2
    1224:	3f 92       	push	r3
    1226:	4f 92       	push	r4
    1228:	5f 92       	push	r5
    122a:	6f 92       	push	r6
    122c:	7f 92       	push	r7
    122e:	8f 92       	push	r8
    1230:	9f 92       	push	r9
    1232:	af 92       	push	r10
    1234:	bf 92       	push	r11
    1236:	cf 92       	push	r12
    1238:	df 92       	push	r13
    123a:	ff 92       	push	r15
    123c:	0f 93       	push	r16
    123e:	1f 93       	push	r17
    1240:	df 93       	push	r29
    1242:	cf 93       	push	r28
    1244:	00 d0       	rcall	.+0      	; 0x1246 <f_read+0x24>
    1246:	00 d0       	rcall	.+0      	; 0x1248 <f_read+0x26>
    1248:	cd b7       	in	r28, 0x3d	; 61
    124a:	de b7       	in	r29, 0x3e	; 62
    124c:	9c 83       	std	Y+4, r25	; 0x04
    124e:	8b 83       	std	Y+3, r24	; 0x03
    1250:	6a 01       	movw	r12, r20
    1252:	29 01       	movw	r4, r18
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
    1254:	d9 01       	movw	r26, r18
    1256:	1d 92       	st	X+, r1
    1258:	1c 92       	st	X, r1

	res = validate(fp);							/* Check validity */
    125a:	69 83       	std	Y+1, r22	; 0x01
    125c:	7a 83       	std	Y+2, r23	; 0x02
    125e:	0e 94 55 02 	call	0x4aa	; 0x4aa <validate>
    1262:	f8 2e       	mov	r15, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    1264:	69 81       	ldd	r22, Y+1	; 0x01
    1266:	7a 81       	ldd	r23, Y+2	; 0x02
    1268:	88 23       	and	r24, r24
    126a:	09 f0       	breq	.+2      	; 0x126e <f_read+0x4c>
    126c:	2f c1       	rjmp	.+606    	; 0x14cc <f_read+0x2aa>
	if (fp->err)								/* Check error */
    126e:	eb 81       	ldd	r30, Y+3	; 0x03
    1270:	fc 81       	ldd	r31, Y+4	; 0x04
    1272:	f5 80       	ldd	r15, Z+5	; 0x05
    1274:	ff 20       	and	r15, r15
    1276:	09 f0       	breq	.+2      	; 0x127a <f_read+0x58>
    1278:	29 c1       	rjmp	.+594    	; 0x14cc <f_read+0x2aa>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
    127a:	84 81       	ldd	r24, Z+4	; 0x04
    127c:	80 ff       	sbrs	r24, 0
    127e:	24 c1       	rjmp	.+584    	; 0x14c8 <f_read+0x2a6>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
    1280:	82 85       	ldd	r24, Z+10	; 0x0a
    1282:	93 85       	ldd	r25, Z+11	; 0x0b
    1284:	a4 85       	ldd	r26, Z+12	; 0x0c
    1286:	b5 85       	ldd	r27, Z+13	; 0x0d
    1288:	26 81       	ldd	r18, Z+6	; 0x06
    128a:	37 81       	ldd	r19, Z+7	; 0x07
    128c:	40 85       	ldd	r20, Z+8	; 0x08
    128e:	51 85       	ldd	r21, Z+9	; 0x09
    1290:	82 1b       	sub	r24, r18
    1292:	93 0b       	sbc	r25, r19
    1294:	a4 0b       	sbc	r26, r20
    1296:	b5 0b       	sbc	r27, r21
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
    1298:	96 01       	movw	r18, r12
    129a:	40 e0       	ldi	r20, 0x00	; 0
    129c:	50 e0       	ldi	r21, 0x00	; 0
    129e:	82 17       	cp	r24, r18
    12a0:	93 07       	cpc	r25, r19
    12a2:	a4 07       	cpc	r26, r20
    12a4:	b5 07       	cpc	r27, r21
    12a6:	08 f4       	brcc	.+2      	; 0x12aa <f_read+0x88>
    12a8:	6c 01       	movw	r12, r24
)
{
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
    12aa:	66 2e       	mov	r6, r22
    12ac:	77 2e       	mov	r7, r23
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    12ae:	21 2c       	mov	r2, r1
    12b0:	02 e0       	ldi	r16, 0x02	; 2
    12b2:	30 2e       	mov	r3, r16
    12b4:	04 c1       	rjmp	.+520    	; 0x14be <f_read+0x29c>
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
    12b6:	ab 81       	ldd	r26, Y+3	; 0x03
    12b8:	bc 81       	ldd	r27, Y+4	; 0x04
    12ba:	16 96       	adiw	r26, 0x06	; 6
    12bc:	2d 91       	ld	r18, X+
    12be:	3d 91       	ld	r19, X+
    12c0:	4d 91       	ld	r20, X+
    12c2:	5c 91       	ld	r21, X
    12c4:	19 97       	sbiw	r26, 0x09	; 9
    12c6:	da 01       	movw	r26, r20
    12c8:	c9 01       	movw	r24, r18
    12ca:	91 70       	andi	r25, 0x01	; 1
    12cc:	a0 70       	andi	r26, 0x00	; 0
    12ce:	b0 70       	andi	r27, 0x00	; 0
    12d0:	00 97       	sbiw	r24, 0x00	; 0
    12d2:	a1 05       	cpc	r26, r1
    12d4:	b1 05       	cpc	r27, r1
    12d6:	09 f0       	breq	.+2      	; 0x12da <f_read+0xb8>
    12d8:	8b c0       	rjmp	.+278    	; 0x13f0 <f_read+0x1ce>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    12da:	eb 81       	ldd	r30, Y+3	; 0x03
    12dc:	fc 81       	ldd	r31, Y+4	; 0x04
    12de:	80 81       	ld	r24, Z
    12e0:	91 81       	ldd	r25, Z+1	; 0x01
    12e2:	49 01       	movw	r8, r18
    12e4:	5a 01       	movw	r10, r20
    12e6:	19 e0       	ldi	r17, 0x09	; 9
    12e8:	b6 94       	lsr	r11
    12ea:	a7 94       	ror	r10
    12ec:	97 94       	ror	r9
    12ee:	87 94       	ror	r8
    12f0:	1a 95       	dec	r17
    12f2:	d1 f7       	brne	.-12     	; 0x12e8 <f_read+0xc6>
    12f4:	dc 01       	movw	r26, r24
    12f6:	12 96       	adiw	r26, 0x02	; 2
    12f8:	1c 91       	ld	r17, X
    12fa:	12 97       	sbiw	r26, 0x02	; 2
    12fc:	11 50       	subi	r17, 0x01	; 1
    12fe:	18 21       	and	r17, r8
			if (!csect) {						/* On the cluster boundary? */
    1300:	41 f5       	brne	.+80     	; 0x1352 <f_read+0x130>
				if (fp->fptr == 0) {			/* On the top of the file? */
    1302:	21 15       	cp	r18, r1
    1304:	31 05       	cpc	r19, r1
    1306:	41 05       	cpc	r20, r1
    1308:	51 05       	cpc	r21, r1
    130a:	29 f4       	brne	.+10     	; 0x1316 <f_read+0xf4>
					clst = fp->sclust;			/* Follow from the origin */
    130c:	66 85       	ldd	r22, Z+14	; 0x0e
    130e:	77 85       	ldd	r23, Z+15	; 0x0f
    1310:	80 89       	ldd	r24, Z+16	; 0x10
    1312:	91 89       	ldd	r25, Z+17	; 0x11
    1314:	08 c0       	rjmp	.+16     	; 0x1326 <f_read+0x104>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
    1316:	eb 81       	ldd	r30, Y+3	; 0x03
    1318:	fc 81       	ldd	r31, Y+4	; 0x04
    131a:	42 89       	ldd	r20, Z+18	; 0x12
    131c:	53 89       	ldd	r21, Z+19	; 0x13
    131e:	64 89       	ldd	r22, Z+20	; 0x14
    1320:	75 89       	ldd	r23, Z+21	; 0x15
    1322:	0e 94 3b 05 	call	0xa76	; 0xa76 <get_fat>
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
    1326:	62 30       	cpi	r22, 0x02	; 2
    1328:	71 05       	cpc	r23, r1
    132a:	81 05       	cpc	r24, r1
    132c:	91 05       	cpc	r25, r1
    132e:	18 f1       	brcs	.+70     	; 0x1376 <f_read+0x154>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    1330:	6f 3f       	cpi	r22, 0xFF	; 255
    1332:	bf ef       	ldi	r27, 0xFF	; 255
    1334:	7b 07       	cpc	r23, r27
    1336:	bf ef       	ldi	r27, 0xFF	; 255
    1338:	8b 07       	cpc	r24, r27
    133a:	bf ef       	ldi	r27, 0xFF	; 255
    133c:	9b 07       	cpc	r25, r27
    133e:	09 f4       	brne	.+2      	; 0x1342 <f_read+0x120>
    1340:	45 c0       	rjmp	.+138    	; 0x13cc <f_read+0x1aa>
				fp->clust = clst;				/* Update current cluster */
    1342:	ab 81       	ldd	r26, Y+3	; 0x03
    1344:	bc 81       	ldd	r27, Y+4	; 0x04
    1346:	52 96       	adiw	r26, 0x12	; 18
    1348:	6d 93       	st	X+, r22
    134a:	7d 93       	st	X+, r23
    134c:	8d 93       	st	X+, r24
    134e:	9c 93       	st	X, r25
    1350:	55 97       	sbiw	r26, 0x15	; 21
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    1352:	eb 81       	ldd	r30, Y+3	; 0x03
    1354:	fc 81       	ldd	r31, Y+4	; 0x04
    1356:	80 80       	ld	r8, Z
    1358:	91 80       	ldd	r9, Z+1	; 0x01
    135a:	42 89       	ldd	r20, Z+18	; 0x12
    135c:	53 89       	ldd	r21, Z+19	; 0x13
    135e:	64 89       	ldd	r22, Z+20	; 0x14
    1360:	75 89       	ldd	r23, Z+21	; 0x15
    1362:	c4 01       	movw	r24, r8
    1364:	0e 94 0c 05 	call	0xa18	; 0xa18 <clust2sect>
    1368:	9b 01       	movw	r18, r22
    136a:	ac 01       	movw	r20, r24
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    136c:	61 15       	cp	r22, r1
    136e:	71 05       	cpc	r23, r1
    1370:	81 05       	cpc	r24, r1
    1372:	91 05       	cpc	r25, r1
    1374:	49 f4       	brne	.+18     	; 0x1388 <f_read+0x166>
    1376:	82 e0       	ldi	r24, 0x02	; 2
    1378:	ab 81       	ldd	r26, Y+3	; 0x03
    137a:	bc 81       	ldd	r27, Y+4	; 0x04
    137c:	15 96       	adiw	r26, 0x05	; 5
    137e:	8c 93       	st	X, r24
    1380:	15 97       	sbiw	r26, 0x05	; 5
    1382:	b2 e0       	ldi	r27, 0x02	; 2
    1384:	fb 2e       	mov	r15, r27
    1386:	a2 c0       	rjmp	.+324    	; 0x14cc <f_read+0x2aa>
			sect += csect;
    1388:	21 0f       	add	r18, r17
    138a:	31 1d       	adc	r19, r1
    138c:	41 1d       	adc	r20, r1
    138e:	51 1d       	adc	r21, r1
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
    1390:	56 01       	movw	r10, r12
    1392:	ab 2c       	mov	r10, r11
    1394:	bb 24       	eor	r11, r11
    1396:	a6 94       	lsr	r10
			if (cc) {							/* Read maximum contiguous sectors directly */
    1398:	a1 14       	cp	r10, r1
    139a:	b1 04       	cpc	r11, r1
    139c:	09 f1       	breq	.+66     	; 0x13e0 <f_read+0x1be>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    139e:	f4 01       	movw	r30, r8
    13a0:	62 81       	ldd	r22, Z+2	; 0x02
    13a2:	81 2f       	mov	r24, r17
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	f5 01       	movw	r30, r10
    13a8:	e8 0f       	add	r30, r24
    13aa:	f9 1f       	adc	r31, r25
    13ac:	70 e0       	ldi	r23, 0x00	; 0
    13ae:	6e 17       	cp	r22, r30
    13b0:	7f 07       	cpc	r23, r31
    13b2:	18 f4       	brcc	.+6      	; 0x13ba <f_read+0x198>
					cc = fp->fs->csize - csect;
    13b4:	5b 01       	movw	r10, r22
    13b6:	a8 1a       	sub	r10, r24
    13b8:	b9 0a       	sbc	r11, r25
				if (disk_read(fp->fs->drv, rbuff, sect, cc))
    13ba:	d4 01       	movw	r26, r8
    13bc:	11 96       	adiw	r26, 0x01	; 1
    13be:	8c 91       	ld	r24, X
    13c0:	b3 01       	movw	r22, r6
    13c2:	85 01       	movw	r16, r10
    13c4:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <disk_read>
    13c8:	88 23       	and	r24, r24
    13ca:	29 f0       	breq	.+10     	; 0x13d6 <f_read+0x1b4>
					ABORT(fp->fs, FR_DISK_ERR);
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	eb 81       	ldd	r30, Y+3	; 0x03
    13d0:	fc 81       	ldd	r31, Y+4	; 0x04
    13d2:	85 83       	std	Z+5, r24	; 0x05
    13d4:	23 c0       	rjmp	.+70     	; 0x141c <f_read+0x1fa>
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
    13d6:	b5 01       	movw	r22, r10
    13d8:	76 2f       	mov	r23, r22
    13da:	66 27       	eor	r22, r22
    13dc:	77 0f       	add	r23, r23
				continue;
    13de:	51 c0       	rjmp	.+162    	; 0x1482 <f_read+0x260>
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1))	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    13e0:	ab 81       	ldd	r26, Y+3	; 0x03
    13e2:	bc 81       	ldd	r27, Y+4	; 0x04
    13e4:	56 96       	adiw	r26, 0x16	; 22
    13e6:	2d 93       	st	X+, r18
    13e8:	3d 93       	st	X+, r19
    13ea:	4d 93       	st	X+, r20
    13ec:	5c 93       	st	X, r21
    13ee:	59 97       	sbiw	r26, 0x19	; 25
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    13f0:	eb 81       	ldd	r30, Y+3	; 0x03
    13f2:	fc 81       	ldd	r31, Y+4	; 0x04
    13f4:	86 80       	ldd	r8, Z+6	; 0x06
    13f6:	97 80       	ldd	r9, Z+7	; 0x07
    13f8:	a0 84       	ldd	r10, Z+8	; 0x08
    13fa:	b1 84       	ldd	r11, Z+9	; 0x09
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
    13fc:	46 89       	ldd	r20, Z+22	; 0x16
    13fe:	57 89       	ldd	r21, Z+23	; 0x17
    1400:	60 8d       	ldd	r22, Z+24	; 0x18
    1402:	71 8d       	ldd	r23, Z+25	; 0x19
    1404:	80 81       	ld	r24, Z
    1406:	91 81       	ldd	r25, Z+1	; 0x01
    1408:	0e 94 74 02 	call	0x4e8	; 0x4e8 <move_window>
    140c:	88 23       	and	r24, r24
    140e:	49 f0       	breq	.+18     	; 0x1422 <f_read+0x200>
			ABORT(fp->fs, FR_DISK_ERR);
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	ab 81       	ldd	r26, Y+3	; 0x03
    1414:	bc 81       	ldd	r27, Y+4	; 0x04
    1416:	15 96       	adiw	r26, 0x05	; 5
    1418:	8c 93       	st	X, r24
    141a:	15 97       	sbiw	r26, 0x05	; 5
    141c:	ff 24       	eor	r15, r15
    141e:	f3 94       	inc	r15
    1420:	55 c0       	rjmp	.+170    	; 0x14cc <f_read+0x2aa>
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    1422:	c4 01       	movw	r24, r8
    1424:	91 70       	andi	r25, 0x01	; 1
    1426:	f1 01       	movw	r30, r2
    1428:	e8 1b       	sub	r30, r24
    142a:	f9 0b       	sbc	r31, r25
    142c:	b6 01       	movw	r22, r12
    142e:	ec 15       	cp	r30, r12
    1430:	fd 05       	cpc	r31, r13
    1432:	08 f4       	brcc	.+2      	; 0x1436 <f_read+0x214>
    1434:	bf 01       	movw	r22, r30
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
    1436:	ab 81       	ldd	r26, Y+3	; 0x03
    1438:	bc 81       	ldd	r27, Y+4	; 0x04
    143a:	8d 91       	ld	r24, X+
    143c:	9c 91       	ld	r25, X
    143e:	11 97       	sbiw	r26, 0x01	; 1
    1440:	86 96       	adiw	r24, 0x26	; 38
    1442:	16 96       	adiw	r26, 0x06	; 6
    1444:	2d 91       	ld	r18, X+
    1446:	3c 91       	ld	r19, X
    1448:	17 97       	sbiw	r26, 0x07	; 7
    144a:	31 70       	andi	r19, 0x01	; 1
    144c:	82 0f       	add	r24, r18
    144e:	93 1f       	adc	r25, r19

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;
    1450:	dc 01       	movw	r26, r24
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
    1452:	f3 01       	movw	r30, r6
	const BYTE *s = (const BYTE*)src;
    1454:	9b 01       	movw	r18, r22
    1456:	06 c0       	rjmp	.+12     	; 0x1464 <f_read+0x242>

#if _WORD_ACCESS == 1
	while (cnt >= sizeof (int)) {
		*(int*)d = *(int*)s;
    1458:	4d 91       	ld	r20, X+
    145a:	5d 91       	ld	r21, X+
    145c:	41 93       	st	Z+, r20
    145e:	51 93       	st	Z+, r21
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
    1460:	22 50       	subi	r18, 0x02	; 2
    1462:	30 40       	sbci	r19, 0x00	; 0
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

#if _WORD_ACCESS == 1
	while (cnt >= sizeof (int)) {
    1464:	22 30       	cpi	r18, 0x02	; 2
    1466:	31 05       	cpc	r19, r1
    1468:	b8 f7       	brcc	.-18     	; 0x1458 <f_read+0x236>

/*-----------------------------------------------------------------------*/
/* Read File                                                             */
/*-----------------------------------------------------------------------*/

FRESULT f_read (
    146a:	9b 01       	movw	r18, r22
    146c:	2e 7f       	andi	r18, 0xFE	; 254
    146e:	f3 01       	movw	r30, r6
    1470:	e2 0f       	add	r30, r18
    1472:	f3 1f       	adc	r31, r19
    1474:	82 0f       	add	r24, r18
    1476:	93 1f       	adc	r25, r19
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
    1478:	60 ff       	sbrs	r22, 0
    147a:	03 c0       	rjmp	.+6      	; 0x1482 <f_read+0x260>
		*d++ = *s++;
    147c:	dc 01       	movw	r26, r24
    147e:	8c 91       	ld	r24, X
    1480:	80 83       	st	Z, r24
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    1482:	66 0e       	add	r6, r22
    1484:	77 1e       	adc	r7, r23
    1486:	9b 01       	movw	r18, r22
    1488:	40 e0       	ldi	r20, 0x00	; 0
    148a:	50 e0       	ldi	r21, 0x00	; 0
    148c:	eb 81       	ldd	r30, Y+3	; 0x03
    148e:	fc 81       	ldd	r31, Y+4	; 0x04
    1490:	86 81       	ldd	r24, Z+6	; 0x06
    1492:	97 81       	ldd	r25, Z+7	; 0x07
    1494:	a0 85       	ldd	r26, Z+8	; 0x08
    1496:	b1 85       	ldd	r27, Z+9	; 0x09
    1498:	82 0f       	add	r24, r18
    149a:	93 1f       	adc	r25, r19
    149c:	a4 1f       	adc	r26, r20
    149e:	b5 1f       	adc	r27, r21
    14a0:	86 83       	std	Z+6, r24	; 0x06
    14a2:	97 83       	std	Z+7, r25	; 0x07
    14a4:	a0 87       	std	Z+8, r26	; 0x08
    14a6:	b1 87       	std	Z+9, r27	; 0x09
    14a8:	d2 01       	movw	r26, r4
    14aa:	8d 91       	ld	r24, X+
    14ac:	9c 91       	ld	r25, X
    14ae:	11 97       	sbiw	r26, 0x01	; 1
    14b0:	86 0f       	add	r24, r22
    14b2:	97 1f       	adc	r25, r23
    14b4:	11 96       	adiw	r26, 0x01	; 1
    14b6:	9c 93       	st	X, r25
    14b8:	8e 93       	st	-X, r24
    14ba:	c6 1a       	sub	r12, r22
    14bc:	d7 0a       	sbc	r13, r23
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
    14be:	c1 14       	cp	r12, r1
    14c0:	d1 04       	cpc	r13, r1
    14c2:	09 f0       	breq	.+2      	; 0x14c6 <f_read+0x2a4>
    14c4:	f8 ce       	rjmp	.-528    	; 0x12b6 <f_read+0x94>
    14c6:	02 c0       	rjmp	.+4      	; 0x14cc <f_read+0x2aa>
	res = validate(fp);							/* Check validity */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->err)								/* Check error */
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
    14c8:	e7 e0       	ldi	r30, 0x07	; 7
    14ca:	fe 2e       	mov	r15, r30
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    14cc:	8f 2d       	mov	r24, r15
    14ce:	0f 90       	pop	r0
    14d0:	0f 90       	pop	r0
    14d2:	0f 90       	pop	r0
    14d4:	0f 90       	pop	r0
    14d6:	cf 91       	pop	r28
    14d8:	df 91       	pop	r29
    14da:	1f 91       	pop	r17
    14dc:	0f 91       	pop	r16
    14de:	ff 90       	pop	r15
    14e0:	df 90       	pop	r13
    14e2:	cf 90       	pop	r12
    14e4:	bf 90       	pop	r11
    14e6:	af 90       	pop	r10
    14e8:	9f 90       	pop	r9
    14ea:	8f 90       	pop	r8
    14ec:	7f 90       	pop	r7
    14ee:	6f 90       	pop	r6
    14f0:	5f 90       	pop	r5
    14f2:	4f 90       	pop	r4
    14f4:	3f 90       	pop	r3
    14f6:	2f 90       	pop	r2
    14f8:	08 95       	ret

000014fa <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    14fa:	cf 93       	push	r28
    14fc:	df 93       	push	r29
    14fe:	ec 01       	movw	r28, r24
#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
	if (res == FR_OK)
#endif
	{
		res = validate(fp);				/* Lock volume */
    1500:	0e 94 55 02 	call	0x4aa	; 0x4aa <validate>
		if (res == FR_OK) {
    1504:	88 23       	and	r24, r24
    1506:	11 f4       	brne	.+4      	; 0x150c <f_close+0x12>
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
				fp->fs = 0;				/* Invalidate file object */
    1508:	19 82       	std	Y+1, r1	; 0x01
    150a:	18 82       	st	Y, r1
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
    150c:	df 91       	pop	r29
    150e:	cf 91       	pop	r28
    1510:	08 95       	ret

00001512 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    1512:	2f 92       	push	r2
    1514:	3f 92       	push	r3
    1516:	4f 92       	push	r4
    1518:	5f 92       	push	r5
    151a:	6f 92       	push	r6
    151c:	7f 92       	push	r7
    151e:	9f 92       	push	r9
    1520:	af 92       	push	r10
    1522:	bf 92       	push	r11
    1524:	cf 92       	push	r12
    1526:	df 92       	push	r13
    1528:	ef 92       	push	r14
    152a:	ff 92       	push	r15
    152c:	0f 93       	push	r16
    152e:	1f 93       	push	r17
    1530:	df 93       	push	r29
    1532:	cf 93       	push	r28
    1534:	cd b7       	in	r28, 0x3d	; 61
    1536:	de b7       	in	r29, 0x3e	; 62
    1538:	28 97       	sbiw	r28, 0x08	; 8
    153a:	0f b6       	in	r0, 0x3f	; 63
    153c:	f8 94       	cli
    153e:	de bf       	out	0x3e, r29	; 62
    1540:	0f be       	out	0x3f, r0	; 63
    1542:	cd bf       	out	0x3d, r28	; 61
    1544:	1c 01       	movw	r2, r24
	FRESULT res;


	res = validate(fp);					/* Check validity of the object */
    1546:	4d 83       	std	Y+5, r20	; 0x05
    1548:	5e 83       	std	Y+6, r21	; 0x06
    154a:	6f 83       	std	Y+7, r22	; 0x07
    154c:	78 87       	std	Y+8, r23	; 0x08
    154e:	0e 94 55 02 	call	0x4aa	; 0x4aa <validate>
    1552:	98 2e       	mov	r9, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    1554:	4d 81       	ldd	r20, Y+5	; 0x05
    1556:	5e 81       	ldd	r21, Y+6	; 0x06
    1558:	6f 81       	ldd	r22, Y+7	; 0x07
    155a:	78 85       	ldd	r23, Y+8	; 0x08
    155c:	88 23       	and	r24, r24
    155e:	09 f0       	breq	.+2      	; 0x1562 <f_lseek+0x50>
    1560:	25 c1       	rjmp	.+586    	; 0x17ac <f_lseek+0x29a>
	if (fp->err)						/* Check error */
    1562:	d1 01       	movw	r26, r2
    1564:	15 96       	adiw	r26, 0x05	; 5
    1566:	9c 90       	ld	r9, X
    1568:	15 97       	sbiw	r26, 0x05	; 5
    156a:	99 20       	and	r9, r9
    156c:	09 f0       	breq	.+2      	; 0x1570 <f_lseek+0x5e>
    156e:	1e c1       	rjmp	.+572    	; 0x17ac <f_lseek+0x29a>
    1570:	1a 96       	adiw	r26, 0x0a	; 10
    1572:	8d 91       	ld	r24, X+
    1574:	9d 91       	ld	r25, X+
    1576:	0d 90       	ld	r0, X+
    1578:	bc 91       	ld	r27, X
    157a:	a0 2d       	mov	r26, r0
    157c:	e4 2e       	mov	r14, r20
    157e:	f5 2e       	mov	r15, r21
    1580:	06 2f       	mov	r16, r22
    1582:	17 2f       	mov	r17, r23
    1584:	8e 15       	cp	r24, r14
    1586:	9f 05       	cpc	r25, r15
    1588:	a0 07       	cpc	r26, r16
    158a:	b1 07       	cpc	r27, r17
    158c:	10 f4       	brcc	.+4      	; 0x1592 <f_lseek+0x80>
    158e:	7c 01       	movw	r14, r24
    1590:	8d 01       	movw	r16, r26
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
    1592:	f1 01       	movw	r30, r2
    1594:	86 81       	ldd	r24, Z+6	; 0x06
    1596:	97 81       	ldd	r25, Z+7	; 0x07
    1598:	a0 85       	ldd	r26, Z+8	; 0x08
    159a:	b1 85       	ldd	r27, Z+9	; 0x09
		fp->fptr = nsect = 0;
    159c:	16 82       	std	Z+6, r1	; 0x06
    159e:	17 82       	std	Z+7, r1	; 0x07
    15a0:	10 86       	std	Z+8, r1	; 0x08
    15a2:	11 86       	std	Z+9, r1	; 0x09
		if (ofs) {
    15a4:	e1 14       	cp	r14, r1
    15a6:	f1 04       	cpc	r15, r1
    15a8:	01 05       	cpc	r16, r1
    15aa:	11 05       	cpc	r17, r1
    15ac:	09 f4       	brne	.+2      	; 0x15b0 <f_lseek+0x9e>
    15ae:	df c0       	rjmp	.+446    	; 0x176e <f_lseek+0x25c>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    15b0:	20 81       	ld	r18, Z
    15b2:	31 81       	ldd	r19, Z+1	; 0x01
    15b4:	f9 01       	movw	r30, r18
    15b6:	a2 80       	ldd	r10, Z+2	; 0x02
    15b8:	bb 24       	eor	r11, r11
    15ba:	cc 24       	eor	r12, r12
    15bc:	dd 24       	eor	r13, r13
    15be:	49 e0       	ldi	r20, 0x09	; 9
    15c0:	aa 0c       	add	r10, r10
    15c2:	bb 1c       	adc	r11, r11
    15c4:	cc 1c       	adc	r12, r12
    15c6:	dd 1c       	adc	r13, r13
    15c8:	4a 95       	dec	r20
    15ca:	d1 f7       	brne	.-12     	; 0x15c0 <f_lseek+0xae>
			if (ifptr > 0 &&
    15cc:	00 97       	sbiw	r24, 0x00	; 0
    15ce:	a1 05       	cpc	r26, r1
    15d0:	b1 05       	cpc	r27, r1
    15d2:	e9 f1       	breq	.+122    	; 0x164e <f_lseek+0x13c>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    15d4:	2c 01       	movw	r4, r24
    15d6:	3d 01       	movw	r6, r26
    15d8:	08 94       	sec
    15da:	41 08       	sbc	r4, r1
    15dc:	51 08       	sbc	r5, r1
    15de:	61 08       	sbc	r6, r1
    15e0:	71 08       	sbc	r7, r1
    15e2:	c8 01       	movw	r24, r16
    15e4:	b7 01       	movw	r22, r14
    15e6:	61 50       	subi	r22, 0x01	; 1
    15e8:	70 40       	sbci	r23, 0x00	; 0
    15ea:	80 40       	sbci	r24, 0x00	; 0
    15ec:	90 40       	sbci	r25, 0x00	; 0
    15ee:	a6 01       	movw	r20, r12
    15f0:	95 01       	movw	r18, r10
    15f2:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__udivmodsi4>
    15f6:	29 83       	std	Y+1, r18	; 0x01
    15f8:	3a 83       	std	Y+2, r19	; 0x02
    15fa:	4b 83       	std	Y+3, r20	; 0x03
    15fc:	5c 83       	std	Y+4, r21	; 0x04
    15fe:	c3 01       	movw	r24, r6
    1600:	b2 01       	movw	r22, r4
    1602:	a6 01       	movw	r20, r12
    1604:	95 01       	movw	r18, r10
    1606:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <__udivmodsi4>

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
		if (ofs) {
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
			if (ifptr > 0 &&
    160a:	89 81       	ldd	r24, Y+1	; 0x01
    160c:	9a 81       	ldd	r25, Y+2	; 0x02
    160e:	ab 81       	ldd	r26, Y+3	; 0x03
    1610:	bc 81       	ldd	r27, Y+4	; 0x04
    1612:	82 17       	cp	r24, r18
    1614:	93 07       	cpc	r25, r19
    1616:	a4 07       	cpc	r26, r20
    1618:	b5 07       	cpc	r27, r21
    161a:	c8 f0       	brcs	.+50     	; 0x164e <f_lseek+0x13c>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    161c:	88 27       	eor	r24, r24
    161e:	99 27       	eor	r25, r25
    1620:	dc 01       	movw	r26, r24
    1622:	8a 19       	sub	r24, r10
    1624:	9b 09       	sbc	r25, r11
    1626:	ac 09       	sbc	r26, r12
    1628:	bd 09       	sbc	r27, r13
    162a:	84 21       	and	r24, r4
    162c:	95 21       	and	r25, r5
    162e:	a6 21       	and	r26, r6
    1630:	b7 21       	and	r27, r7
    1632:	f1 01       	movw	r30, r2
    1634:	86 83       	std	Z+6, r24	; 0x06
    1636:	97 83       	std	Z+7, r25	; 0x07
    1638:	a0 87       	std	Z+8, r26	; 0x08
    163a:	b1 87       	std	Z+9, r27	; 0x09
				ofs -= fp->fptr;
    163c:	e8 1a       	sub	r14, r24
    163e:	f9 0a       	sbc	r15, r25
    1640:	0a 0b       	sbc	r16, r26
    1642:	1b 0b       	sbc	r17, r27
				clst = fp->clust;
    1644:	42 89       	ldd	r20, Z+18	; 0x12
    1646:	53 89       	ldd	r21, Z+19	; 0x13
    1648:	64 89       	ldd	r22, Z+20	; 0x14
    164a:	75 89       	ldd	r23, Z+21	; 0x15
    164c:	0c c0       	rjmp	.+24     	; 0x1666 <f_lseek+0x154>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
    164e:	d1 01       	movw	r26, r2
    1650:	1e 96       	adiw	r26, 0x0e	; 14
    1652:	4d 91       	ld	r20, X+
    1654:	5d 91       	ld	r21, X+
    1656:	6d 91       	ld	r22, X+
    1658:	7c 91       	ld	r23, X
    165a:	51 97       	sbiw	r26, 0x11	; 17
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
					fp->sclust = clst;
				}
#endif
				fp->clust = clst;
    165c:	f1 01       	movw	r30, r2
    165e:	42 8b       	std	Z+18, r20	; 0x12
    1660:	53 8b       	std	Z+19, r21	; 0x13
    1662:	64 8b       	std	Z+20, r22	; 0x14
    1664:	75 8b       	std	Z+21, r23	; 0x15
			}
			if (clst != 0) {
    1666:	41 15       	cp	r20, r1
    1668:	51 05       	cpc	r21, r1
    166a:	61 05       	cpc	r22, r1
    166c:	71 05       	cpc	r23, r1
    166e:	09 f4       	brne	.+2      	; 0x1672 <f_lseek+0x160>
    1670:	7e c0       	rjmp	.+252    	; 0x176e <f_lseek+0x25c>
    1672:	44 c0       	rjmp	.+136    	; 0x16fc <f_lseek+0x1ea>
						if (clst == 0) {				/* When disk gets full, clip file size */
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    1674:	d1 01       	movw	r26, r2
    1676:	8d 91       	ld	r24, X+
    1678:	9c 91       	ld	r25, X
    167a:	0e 94 3b 05 	call	0xa76	; 0xa76 <get_fat>
    167e:	ab 01       	movw	r20, r22
    1680:	bc 01       	movw	r22, r24
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    1682:	4f 3f       	cpi	r20, 0xFF	; 255
    1684:	bf ef       	ldi	r27, 0xFF	; 255
    1686:	5b 07       	cpc	r21, r27
    1688:	bf ef       	ldi	r27, 0xFF	; 255
    168a:	6b 07       	cpc	r22, r27
    168c:	bf ef       	ldi	r27, 0xFF	; 255
    168e:	7b 07       	cpc	r23, r27
    1690:	31 f4       	brne	.+12     	; 0x169e <f_lseek+0x18c>
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	f1 01       	movw	r30, r2
    1696:	85 83       	std	Z+5, r24	; 0x05
    1698:	99 24       	eor	r9, r9
    169a:	93 94       	inc	r9
    169c:	87 c0       	rjmp	.+270    	; 0x17ac <f_lseek+0x29a>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    169e:	42 30       	cpi	r20, 0x02	; 2
    16a0:	51 05       	cpc	r21, r1
    16a2:	61 05       	cpc	r22, r1
    16a4:	71 05       	cpc	r23, r1
    16a6:	60 f0       	brcs	.+24     	; 0x16c0 <f_lseek+0x1ae>
    16a8:	d1 01       	movw	r26, r2
    16aa:	ed 91       	ld	r30, X+
    16ac:	fc 91       	ld	r31, X
    16ae:	82 85       	ldd	r24, Z+10	; 0x0a
    16b0:	93 85       	ldd	r25, Z+11	; 0x0b
    16b2:	a4 85       	ldd	r26, Z+12	; 0x0c
    16b4:	b5 85       	ldd	r27, Z+13	; 0x0d
    16b6:	48 17       	cp	r20, r24
    16b8:	59 07       	cpc	r21, r25
    16ba:	6a 07       	cpc	r22, r26
    16bc:	7b 07       	cpc	r23, r27
    16be:	20 f0       	brcs	.+8      	; 0x16c8 <f_lseek+0x1b6>
    16c0:	82 e0       	ldi	r24, 0x02	; 2
    16c2:	f1 01       	movw	r30, r2
    16c4:	85 83       	std	Z+5, r24	; 0x05
    16c6:	44 c0       	rjmp	.+136    	; 0x1750 <f_lseek+0x23e>
					fp->clust = clst;
    16c8:	d1 01       	movw	r26, r2
    16ca:	52 96       	adiw	r26, 0x12	; 18
    16cc:	4d 93       	st	X+, r20
    16ce:	5d 93       	st	X+, r21
    16d0:	6d 93       	st	X+, r22
    16d2:	7c 93       	st	X, r23
    16d4:	55 97       	sbiw	r26, 0x15	; 21
					fp->fptr += bcs;
    16d6:	16 96       	adiw	r26, 0x06	; 6
    16d8:	8d 91       	ld	r24, X+
    16da:	9d 91       	ld	r25, X+
    16dc:	0d 90       	ld	r0, X+
    16de:	bc 91       	ld	r27, X
    16e0:	a0 2d       	mov	r26, r0
    16e2:	8a 0d       	add	r24, r10
    16e4:	9b 1d       	adc	r25, r11
    16e6:	ac 1d       	adc	r26, r12
    16e8:	bd 1d       	adc	r27, r13
    16ea:	f1 01       	movw	r30, r2
    16ec:	86 83       	std	Z+6, r24	; 0x06
    16ee:	97 83       	std	Z+7, r25	; 0x07
    16f0:	a0 87       	std	Z+8, r26	; 0x08
    16f2:	b1 87       	std	Z+9, r27	; 0x09
					ofs -= bcs;
    16f4:	ea 18       	sub	r14, r10
    16f6:	fb 08       	sbc	r15, r11
    16f8:	0c 09       	sbc	r16, r12
    16fa:	1d 09       	sbc	r17, r13
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
    16fc:	ae 14       	cp	r10, r14
    16fe:	bf 04       	cpc	r11, r15
    1700:	c0 06       	cpc	r12, r16
    1702:	d1 06       	cpc	r13, r17
    1704:	08 f4       	brcc	.+2      	; 0x1708 <f_lseek+0x1f6>
    1706:	b6 cf       	rjmp	.-148    	; 0x1674 <f_lseek+0x162>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
					fp->clust = clst;
					fp->fptr += bcs;
					ofs -= bcs;
				}
				fp->fptr += ofs;
    1708:	f1 01       	movw	r30, r2
    170a:	86 81       	ldd	r24, Z+6	; 0x06
    170c:	97 81       	ldd	r25, Z+7	; 0x07
    170e:	a0 85       	ldd	r26, Z+8	; 0x08
    1710:	b1 85       	ldd	r27, Z+9	; 0x09
    1712:	8e 0d       	add	r24, r14
    1714:	9f 1d       	adc	r25, r15
    1716:	a0 1f       	adc	r26, r16
    1718:	b1 1f       	adc	r27, r17
    171a:	86 83       	std	Z+6, r24	; 0x06
    171c:	97 83       	std	Z+7, r25	; 0x07
    171e:	a0 87       	std	Z+8, r26	; 0x08
    1720:	b1 87       	std	Z+9, r27	; 0x09
				if (ofs % SS(fp->fs)) {
    1722:	d8 01       	movw	r26, r16
    1724:	c7 01       	movw	r24, r14
    1726:	91 70       	andi	r25, 0x01	; 1
    1728:	a0 70       	andi	r26, 0x00	; 0
    172a:	b0 70       	andi	r27, 0x00	; 0
    172c:	00 97       	sbiw	r24, 0x00	; 0
    172e:	a1 05       	cpc	r26, r1
    1730:	b1 05       	cpc	r27, r1
    1732:	e9 f0       	breq	.+58     	; 0x176e <f_lseek+0x25c>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    1734:	80 81       	ld	r24, Z
    1736:	91 81       	ldd	r25, Z+1	; 0x01
    1738:	0e 94 0c 05 	call	0xa18	; 0xa18 <clust2sect>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    173c:	61 15       	cp	r22, r1
    173e:	71 05       	cpc	r23, r1
    1740:	81 05       	cpc	r24, r1
    1742:	91 05       	cpc	r25, r1
    1744:	41 f4       	brne	.+16     	; 0x1756 <f_lseek+0x244>
    1746:	82 e0       	ldi	r24, 0x02	; 2
    1748:	d1 01       	movw	r26, r2
    174a:	15 96       	adiw	r26, 0x05	; 5
    174c:	8c 93       	st	X, r24
    174e:	15 97       	sbiw	r26, 0x05	; 5
    1750:	32 e0       	ldi	r19, 0x02	; 2
    1752:	93 2e       	mov	r9, r19
    1754:	2b c0       	rjmp	.+86     	; 0x17ac <f_lseek+0x29a>
					nsect += ofs / SS(fp->fs);
    1756:	29 e0       	ldi	r18, 0x09	; 9
    1758:	16 95       	lsr	r17
    175a:	07 95       	ror	r16
    175c:	f7 94       	ror	r15
    175e:	e7 94       	ror	r14
    1760:	2a 95       	dec	r18
    1762:	d1 f7       	brne	.-12     	; 0x1758 <f_lseek+0x246>
    1764:	e6 0e       	add	r14, r22
    1766:	f7 1e       	adc	r15, r23
    1768:	08 1f       	adc	r16, r24
    176a:	19 1f       	adc	r17, r25
    176c:	03 c0       	rjmp	.+6      	; 0x1774 <f_lseek+0x262>
			 && !(fp->flag & FA_WRITE)
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
    176e:	ee 24       	eor	r14, r14
    1770:	ff 24       	eor	r15, r15
    1772:	87 01       	movw	r16, r14
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
					nsect += ofs / SS(fp->fs);
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
    1774:	f1 01       	movw	r30, r2
    1776:	86 81       	ldd	r24, Z+6	; 0x06
    1778:	97 81       	ldd	r25, Z+7	; 0x07
    177a:	a0 85       	ldd	r26, Z+8	; 0x08
    177c:	b1 85       	ldd	r27, Z+9	; 0x09
    177e:	91 70       	andi	r25, 0x01	; 1
    1780:	a0 70       	andi	r26, 0x00	; 0
    1782:	b0 70       	andi	r27, 0x00	; 0
    1784:	00 97       	sbiw	r24, 0x00	; 0
    1786:	a1 05       	cpc	r26, r1
    1788:	b1 05       	cpc	r27, r1
    178a:	81 f0       	breq	.+32     	; 0x17ac <f_lseek+0x29a>
    178c:	86 89       	ldd	r24, Z+22	; 0x16
    178e:	97 89       	ldd	r25, Z+23	; 0x17
    1790:	a0 8d       	ldd	r26, Z+24	; 0x18
    1792:	b1 8d       	ldd	r27, Z+25	; 0x19
    1794:	e8 16       	cp	r14, r24
    1796:	f9 06       	cpc	r15, r25
    1798:	0a 07       	cpc	r16, r26
    179a:	1b 07       	cpc	r17, r27
    179c:	39 f0       	breq	.+14     	; 0x17ac <f_lseek+0x29a>
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1))	/* Fill sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
    179e:	d1 01       	movw	r26, r2
    17a0:	56 96       	adiw	r26, 0x16	; 22
    17a2:	ed 92       	st	X+, r14
    17a4:	fd 92       	st	X+, r15
    17a6:	0d 93       	st	X+, r16
    17a8:	1c 93       	st	X, r17
    17aa:	59 97       	sbiw	r26, 0x19	; 25
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
    17ac:	89 2d       	mov	r24, r9
    17ae:	28 96       	adiw	r28, 0x08	; 8
    17b0:	0f b6       	in	r0, 0x3f	; 63
    17b2:	f8 94       	cli
    17b4:	de bf       	out	0x3e, r29	; 62
    17b6:	0f be       	out	0x3f, r0	; 63
    17b8:	cd bf       	out	0x3d, r28	; 61
    17ba:	cf 91       	pop	r28
    17bc:	df 91       	pop	r29
    17be:	1f 91       	pop	r17
    17c0:	0f 91       	pop	r16
    17c2:	ff 90       	pop	r15
    17c4:	ef 90       	pop	r14
    17c6:	df 90       	pop	r13
    17c8:	cf 90       	pop	r12
    17ca:	bf 90       	pop	r11
    17cc:	af 90       	pop	r10
    17ce:	9f 90       	pop	r9
    17d0:	7f 90       	pop	r7
    17d2:	6f 90       	pop	r6
    17d4:	5f 90       	pop	r5
    17d6:	4f 90       	pop	r4
    17d8:	3f 90       	pop	r3
    17da:	2f 90       	pop	r2
    17dc:	08 95       	ret

000017de <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
    17de:	0f 93       	push	r16
    17e0:	1f 93       	push	r17
    17e2:	df 93       	push	r29
    17e4:	cf 93       	push	r28
    17e6:	cd b7       	in	r28, 0x3d	; 61
    17e8:	de b7       	in	r29, 0x3e	; 62
    17ea:	60 97       	sbiw	r28, 0x10	; 16
    17ec:	0f b6       	in	r0, 0x3f	; 63
    17ee:	f8 94       	cli
    17f0:	de bf       	out	0x3e, r29	; 62
    17f2:	0f be       	out	0x3f, r0	; 63
    17f4:	cd bf       	out	0x3d, r28	; 61
    17f6:	8c 01       	movw	r16, r24
    17f8:	78 8b       	std	Y+16, r23	; 0x10
    17fa:	6f 87       	std	Y+15, r22	; 0x0f
	FRESULT res;
	FATFS* fs;
	DEF_NAMEBUF;


	if (!dp) return FR_INVALID_OBJECT;
    17fc:	00 97       	sbiw	r24, 0x00	; 0
    17fe:	09 f4       	brne	.+2      	; 0x1802 <f_opendir+0x24>
    1800:	41 c0       	rjmp	.+130    	; 0x1884 <f_opendir+0xa6>

	/* Get logical drive number */
	res = find_volume(&fs, &path, 0);
    1802:	ce 01       	movw	r24, r28
    1804:	01 96       	adiw	r24, 0x01	; 1
    1806:	be 01       	movw	r22, r28
    1808:	61 5f       	subi	r22, 0xF1	; 241
    180a:	7f 4f       	sbci	r23, 0xFF	; 255
    180c:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <find_volume.clone.2>
	if (res == FR_OK) {
    1810:	88 23       	and	r24, r24
    1812:	a1 f5       	brne	.+104    	; 0x187c <f_opendir+0x9e>
		dp->fs = fs;
    1814:	89 81       	ldd	r24, Y+1	; 0x01
    1816:	9a 81       	ldd	r25, Y+2	; 0x02
    1818:	f8 01       	movw	r30, r16
    181a:	91 83       	std	Z+1, r25	; 0x01
    181c:	80 83       	st	Z, r24
		INIT_BUF(*dp);
    181e:	ce 01       	movw	r24, r28
    1820:	03 96       	adiw	r24, 0x03	; 3
    1822:	95 8b       	std	Z+21, r25	; 0x15
    1824:	84 8b       	std	Z+20, r24	; 0x14
		res = follow_path(dp, path);			/* Follow the path to the directory */
    1826:	6f 85       	ldd	r22, Y+15	; 0x0f
    1828:	78 89       	ldd	r23, Y+16	; 0x10
    182a:	c8 01       	movw	r24, r16
    182c:	0e 94 29 07 	call	0xe52	; 0xe52 <follow_path>
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
    1830:	88 23       	and	r24, r24
    1832:	f1 f4       	brne	.+60     	; 0x1870 <f_opendir+0x92>
			if (dp->dir) {						/* It is not the origin directory itself */
    1834:	f8 01       	movw	r30, r16
    1836:	62 89       	ldd	r22, Z+18	; 0x12
    1838:	73 89       	ldd	r23, Z+19	; 0x13
    183a:	61 15       	cp	r22, r1
    183c:	71 05       	cpc	r23, r1
    183e:	71 f0       	breq	.+28     	; 0x185c <f_opendir+0x7e>
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
    1840:	fb 01       	movw	r30, r22
    1842:	83 85       	ldd	r24, Z+11	; 0x0b
    1844:	84 ff       	sbrs	r24, 4
    1846:	19 c0       	rjmp	.+50     	; 0x187a <f_opendir+0x9c>
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
    1848:	e9 81       	ldd	r30, Y+1	; 0x01
    184a:	fa 81       	ldd	r31, Y+2	; 0x02
		res = follow_path(dp, path);			/* Follow the path to the directory */
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
			if (dp->dir) {						/* It is not the origin directory itself */
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
					dp->sclust = ld_clust(fs, dp->dir);
    184c:	80 81       	ld	r24, Z
    184e:	0e 94 e7 02 	call	0x5ce	; 0x5ce <ld_clust.clone.0>
    1852:	f8 01       	movw	r30, r16
    1854:	66 83       	std	Z+6, r22	; 0x06
    1856:	77 83       	std	Z+7, r23	; 0x07
    1858:	80 87       	std	Z+8, r24	; 0x08
    185a:	91 87       	std	Z+9, r25	; 0x09
				else							/* The object is a file */
					res = FR_NO_PATH;
			}
			if (res == FR_OK) {
				dp->id = fs->id;
    185c:	e9 81       	ldd	r30, Y+1	; 0x01
    185e:	fa 81       	ldd	r31, Y+2	; 0x02
    1860:	86 81       	ldd	r24, Z+6	; 0x06
    1862:	97 81       	ldd	r25, Z+7	; 0x07
    1864:	f8 01       	movw	r30, r16
    1866:	93 83       	std	Z+3, r25	; 0x03
    1868:	82 83       	std	Z+2, r24	; 0x02
				res = dir_sdi(dp, 0);			/* Rewind directory */
    186a:	c8 01       	movw	r24, r16
    186c:	0e 94 96 06 	call	0xd2c	; 0xd2c <dir_sdi.clone.4>
					}
				}
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    1870:	84 30       	cpi	r24, 0x04	; 4
    1872:	19 f0       	breq	.+6      	; 0x187a <f_opendir+0x9c>
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
    1874:	88 23       	and	r24, r24
    1876:	39 f0       	breq	.+14     	; 0x1886 <f_opendir+0xa8>
    1878:	01 c0       	rjmp	.+2      	; 0x187c <f_opendir+0x9e>
		if (res == FR_OK) {						/* Follow completed */
			if (dp->dir) {						/* It is not the origin directory itself */
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
					dp->sclust = ld_clust(fs, dp->dir);
				else							/* The object is a file */
					res = FR_NO_PATH;
    187a:	85 e0       	ldi	r24, 0x05	; 5
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
    187c:	f8 01       	movw	r30, r16
    187e:	11 82       	std	Z+1, r1	; 0x01
    1880:	10 82       	st	Z, r1
    1882:	01 c0       	rjmp	.+2      	; 0x1886 <f_opendir+0xa8>
	FRESULT res;
	FATFS* fs;
	DEF_NAMEBUF;


	if (!dp) return FR_INVALID_OBJECT;
    1884:	89 e0       	ldi	r24, 0x09	; 9
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */

	LEAVE_FF(fs, res);
}
    1886:	60 96       	adiw	r28, 0x10	; 16
    1888:	0f b6       	in	r0, 0x3f	; 63
    188a:	f8 94       	cli
    188c:	de bf       	out	0x3e, r29	; 62
    188e:	0f be       	out	0x3f, r0	; 63
    1890:	cd bf       	out	0x3d, r28	; 61
    1892:	cf 91       	pop	r28
    1894:	df 91       	pop	r29
    1896:	1f 91       	pop	r17
    1898:	0f 91       	pop	r16
    189a:	08 95       	ret

0000189c <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
    189c:	cf 93       	push	r28
    189e:	df 93       	push	r29
    18a0:	ec 01       	movw	r28, r24
	FRESULT res;


	res = validate(dp);
    18a2:	0e 94 55 02 	call	0x4aa	; 0x4aa <validate>
	if (res == FR_OK) {
    18a6:	88 23       	and	r24, r24
    18a8:	11 f4       	brne	.+4      	; 0x18ae <f_closedir+0x12>
#if _FS_LOCK
		if (dp->lockid)				/* Decrement sub-directory open counter */
			res = dec_lock(dp->lockid);
		if (res == FR_OK)
#endif
			dp->fs = 0;				/* Invalidate directory object */
    18aa:	19 82       	std	Y+1, r1	; 0x01
    18ac:	18 82       	st	Y, r1
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
}
    18ae:	df 91       	pop	r29
    18b0:	cf 91       	pop	r28
    18b2:	08 95       	ret

000018b4 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
    18b4:	df 92       	push	r13
    18b6:	ef 92       	push	r14
    18b8:	ff 92       	push	r15
    18ba:	0f 93       	push	r16
    18bc:	1f 93       	push	r17
    18be:	df 93       	push	r29
    18c0:	cf 93       	push	r28
    18c2:	cd b7       	in	r28, 0x3d	; 61
    18c4:	de b7       	in	r29, 0x3e	; 62
    18c6:	2c 97       	sbiw	r28, 0x0c	; 12
    18c8:	0f b6       	in	r0, 0x3f	; 63
    18ca:	f8 94       	cli
    18cc:	de bf       	out	0x3e, r29	; 62
    18ce:	0f be       	out	0x3f, r0	; 63
    18d0:	cd bf       	out	0x3d, r28	; 61
    18d2:	8c 01       	movw	r16, r24
    18d4:	7b 01       	movw	r14, r22
	FRESULT res;
	DEF_NAMEBUF;


	res = validate(dp);						/* Check validity of the object */
    18d6:	0e 94 55 02 	call	0x4aa	; 0x4aa <validate>
    18da:	d8 2e       	mov	r13, r24
	if (res == FR_OK) {
    18dc:	88 23       	and	r24, r24
    18de:	09 f0       	breq	.+2      	; 0x18e2 <f_readdir+0x2e>
    18e0:	55 c0       	rjmp	.+170    	; 0x198c <f_readdir+0xd8>
		if (!fno) {
    18e2:	e1 14       	cp	r14, r1
    18e4:	f1 04       	cpc	r15, r1
    18e6:	21 f4       	brne	.+8      	; 0x18f0 <f_readdir+0x3c>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
    18e8:	c8 01       	movw	r24, r16
    18ea:	0e 94 96 06 	call	0xd2c	; 0xd2c <dir_sdi.clone.4>
    18ee:	4d c0       	rjmp	.+154    	; 0x198a <f_readdir+0xd6>
		} else {
			INIT_BUF(*dp);
    18f0:	ce 01       	movw	r24, r28
    18f2:	01 96       	adiw	r24, 0x01	; 1
    18f4:	d8 01       	movw	r26, r16
    18f6:	55 96       	adiw	r26, 0x15	; 21
    18f8:	9c 93       	st	X, r25
    18fa:	8e 93       	st	-X, r24
    18fc:	54 97       	sbiw	r26, 0x14	; 20
	BYTE a, c, *dir;
#if _USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
    18fe:	84 e0       	ldi	r24, 0x04	; 4
    1900:	20 c0       	rjmp	.+64     	; 0x1942 <f_readdir+0x8e>
	while (dp->sect) {
		res = move_window(dp->fs, dp->sect);
    1902:	f8 01       	movw	r30, r16
    1904:	80 81       	ld	r24, Z
    1906:	91 81       	ldd	r25, Z+1	; 0x01
    1908:	0e 94 74 02 	call	0x4e8	; 0x4e8 <move_window>
		if (res != FR_OK) break;
    190c:	88 23       	and	r24, r24
    190e:	29 f5       	brne	.+74     	; 0x195a <f_readdir+0xa6>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
    1910:	d8 01       	movw	r26, r16
    1912:	52 96       	adiw	r26, 0x12	; 18
    1914:	ed 91       	ld	r30, X+
    1916:	fc 91       	ld	r31, X
    1918:	53 97       	sbiw	r26, 0x13	; 19
		c = dir[DIR_Name];
    191a:	80 81       	ld	r24, Z
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    191c:	88 23       	and	r24, r24
    191e:	09 f4       	brne	.+2      	; 0x1922 <f_readdir+0x6e>
    1920:	44 c0       	rjmp	.+136    	; 0x19aa <f_readdir+0xf6>
		a = dir[DIR_Attr] & AM_MASK;
    1922:	93 85       	ldd	r25, Z+11	; 0x0b
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDE && (_FS_RPATH || c != '.') && a != AM_LFN && (int)(a == AM_VOL) == vol)	/* Is it a valid entry? */
    1924:	85 3e       	cpi	r24, 0xE5	; 229
    1926:	41 f0       	breq	.+16     	; 0x1938 <f_readdir+0x84>
    1928:	8e 32       	cpi	r24, 0x2E	; 46
    192a:	31 f0       	breq	.+12     	; 0x1938 <f_readdir+0x84>
		res = move_window(dp->fs, dp->sect);
		if (res != FR_OK) break;
		dir = dp->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
		a = dir[DIR_Attr] & AM_MASK;
    192c:	89 2f       	mov	r24, r25
    192e:	8f 73       	andi	r24, 0x3F	; 63
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDE && (_FS_RPATH || c != '.') && a != AM_LFN && (int)(a == AM_VOL) == vol)	/* Is it a valid entry? */
    1930:	8f 30       	cpi	r24, 0x0F	; 15
    1932:	11 f0       	breq	.+4      	; 0x1938 <f_readdir+0x84>
    1934:	88 30       	cpi	r24, 0x08	; 8
    1936:	d1 f4       	brne	.+52     	; 0x196c <f_readdir+0xb8>
			break;
#endif
		res = dir_next(dp, 0);				/* Next entry */
    1938:	c8 01       	movw	r24, r16
    193a:	0e 94 03 06 	call	0xc06	; 0xc06 <dir_next.clone.3>
		if (res != FR_OK) break;
    193e:	88 23       	and	r24, r24
    1940:	61 f4       	brne	.+24     	; 0x195a <f_readdir+0xa6>
#if _USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dp->sect) {
    1942:	f8 01       	movw	r30, r16
    1944:	46 85       	ldd	r20, Z+14	; 0x0e
    1946:	57 85       	ldd	r21, Z+15	; 0x0f
    1948:	60 89       	ldd	r22, Z+16	; 0x10
    194a:	71 89       	ldd	r23, Z+17	; 0x11
    194c:	41 15       	cp	r20, r1
    194e:	51 05       	cpc	r21, r1
    1950:	61 05       	cpc	r22, r1
    1952:	71 05       	cpc	r23, r1
    1954:	b1 f6       	brne	.-84     	; 0x1902 <f_readdir+0x4e>
#endif
		res = dir_next(dp, 0);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dp->sect = 0;
    1956:	88 23       	and	r24, r24
    1958:	49 f0       	breq	.+18     	; 0x196c <f_readdir+0xb8>
    195a:	d8 01       	movw	r26, r16
    195c:	1e 96       	adiw	r26, 0x0e	; 14
    195e:	1d 92       	st	X+, r1
    1960:	1d 92       	st	X+, r1
    1962:	1d 92       	st	X+, r1
    1964:	1c 92       	st	X, r1
    1966:	51 97       	sbiw	r26, 0x11	; 17
		if (!fno) {
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
		} else {
			INIT_BUF(*dp);
			res = dir_read(dp, 0);			/* Read an item */
			if (res == FR_NO_FILE) {		/* Reached end of directory */
    1968:	84 30       	cpi	r24, 0x04	; 4
    196a:	79 f4       	brne	.+30     	; 0x198a <f_readdir+0xd6>
				dp->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dp, fno);		/* Get the object information */
    196c:	c8 01       	movw	r24, r16
    196e:	b7 01       	movw	r22, r14
    1970:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
    1974:	c8 01       	movw	r24, r16
    1976:	0e 94 03 06 	call	0xc06	; 0xc06 <dir_next.clone.3>
				if (res == FR_NO_FILE) {
    197a:	84 30       	cpi	r24, 0x04	; 4
    197c:	31 f4       	brne	.+12     	; 0x198a <f_readdir+0xd6>
					dp->sect = 0;
    197e:	f8 01       	movw	r30, r16
    1980:	16 86       	std	Z+14, r1	; 0x0e
    1982:	17 86       	std	Z+15, r1	; 0x0f
    1984:	10 8a       	std	Z+16, r1	; 0x10
    1986:	11 8a       	std	Z+17, r1	; 0x11
    1988:	01 c0       	rjmp	.+2      	; 0x198c <f_readdir+0xd8>
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dp, fno);		/* Get the object information */
				res = dir_next(dp, 0);		/* Increment index for next */
				if (res == FR_NO_FILE) {
    198a:	d8 2e       	mov	r13, r24
			FREE_BUF();
		}
	}

	LEAVE_FF(dp->fs, res);
}
    198c:	8d 2d       	mov	r24, r13
    198e:	2c 96       	adiw	r28, 0x0c	; 12
    1990:	0f b6       	in	r0, 0x3f	; 63
    1992:	f8 94       	cli
    1994:	de bf       	out	0x3e, r29	; 62
    1996:	0f be       	out	0x3f, r0	; 63
    1998:	cd bf       	out	0x3d, r28	; 61
    199a:	cf 91       	pop	r28
    199c:	df 91       	pop	r29
    199e:	1f 91       	pop	r17
    19a0:	0f 91       	pop	r16
    19a2:	ff 90       	pop	r15
    19a4:	ef 90       	pop	r14
    19a6:	df 90       	pop	r13
    19a8:	08 95       	ret
	while (dp->sect) {
		res = move_window(dp->fs, dp->sect);
		if (res != FR_OK) break;
		dir = dp->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    19aa:	84 e0       	ldi	r24, 0x04	; 4
    19ac:	d6 cf       	rjmp	.-84     	; 0x195a <f_readdir+0xa6>

000019ae <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
    19ae:	df 92       	push	r13
    19b0:	ef 92       	push	r14
    19b2:	ff 92       	push	r15
    19b4:	0f 93       	push	r16
    19b6:	1f 93       	push	r17
    19b8:	df 93       	push	r29
    19ba:	cf 93       	push	r28
    19bc:	cd b7       	in	r28, 0x3d	; 61
    19be:	de b7       	in	r29, 0x3e	; 62
    19c0:	a4 97       	sbiw	r28, 0x24	; 36
    19c2:	0f b6       	in	r0, 0x3f	; 63
    19c4:	f8 94       	cli
    19c6:	de bf       	out	0x3e, r29	; 62
    19c8:	0f be       	out	0x3f, r0	; 63
    19ca:	cd bf       	out	0x3d, r28	; 61
    19cc:	9c a3       	std	Y+36, r25	; 0x24
    19ce:	8b a3       	std	Y+35, r24	; 0x23
    19d0:	7b 01       	movw	r14, r22
	DIR dj;
	DEF_NAMEBUF;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 0);
    19d2:	8e 01       	movw	r16, r28
    19d4:	03 5f       	subi	r16, 0xF3	; 243
    19d6:	1f 4f       	sbci	r17, 0xFF	; 255
    19d8:	c8 01       	movw	r24, r16
    19da:	be 01       	movw	r22, r28
    19dc:	6d 5d       	subi	r22, 0xDD	; 221
    19de:	7f 4f       	sbci	r23, 0xFF	; 255
    19e0:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <find_volume.clone.2>
    19e4:	d8 2e       	mov	r13, r24
	if (res == FR_OK) {
    19e6:	88 23       	and	r24, r24
    19e8:	d9 f4       	brne	.+54     	; 0x1a20 <f_stat+0x72>
		INIT_BUF(dj);
    19ea:	ce 01       	movw	r24, r28
    19ec:	01 96       	adiw	r24, 0x01	; 1
    19ee:	9a a3       	std	Y+34, r25	; 0x22
    19f0:	89 a3       	std	Y+33, r24	; 0x21
		res = follow_path(&dj, path);	/* Follow the file path */
    19f2:	6b a1       	ldd	r22, Y+35	; 0x23
    19f4:	7c a1       	ldd	r23, Y+36	; 0x24
    19f6:	c8 01       	movw	r24, r16
    19f8:	0e 94 29 07 	call	0xe52	; 0xe52 <follow_path>
    19fc:	d8 2e       	mov	r13, r24
		if (res == FR_OK) {				/* Follow completed */
    19fe:	88 23       	and	r24, r24
    1a00:	79 f4       	brne	.+30     	; 0x1a20 <f_stat+0x72>
			if (dj.dir) {		/* Found an object */
    1a02:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1a04:	38 a1       	ldd	r19, Y+32	; 0x20
    1a06:	21 15       	cp	r18, r1
    1a08:	31 05       	cpc	r19, r1
    1a0a:	41 f0       	breq	.+16     	; 0x1a1c <f_stat+0x6e>
				if (fno) get_fileinfo(&dj, fno);
    1a0c:	e1 14       	cp	r14, r1
    1a0e:	f1 04       	cpc	r15, r1
    1a10:	39 f0       	breq	.+14     	; 0x1a20 <f_stat+0x72>
    1a12:	c8 01       	movw	r24, r16
    1a14:	b7 01       	movw	r22, r14
    1a16:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <get_fileinfo>
    1a1a:	02 c0       	rjmp	.+4      	; 0x1a20 <f_stat+0x72>
			} else {			/* It is root directory */
				res = FR_INVALID_NAME;
    1a1c:	56 e0       	ldi	r21, 0x06	; 6
    1a1e:	d5 2e       	mov	r13, r21
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
    1a20:	8d 2d       	mov	r24, r13
    1a22:	a4 96       	adiw	r28, 0x24	; 36
    1a24:	0f b6       	in	r0, 0x3f	; 63
    1a26:	f8 94       	cli
    1a28:	de bf       	out	0x3e, r29	; 62
    1a2a:	0f be       	out	0x3f, r0	; 63
    1a2c:	cd bf       	out	0x3d, r28	; 61
    1a2e:	cf 91       	pop	r28
    1a30:	df 91       	pop	r29
    1a32:	1f 91       	pop	r17
    1a34:	0f 91       	pop	r16
    1a36:	ff 90       	pop	r15
    1a38:	ef 90       	pop	r14
    1a3a:	df 90       	pop	r13
    1a3c:	08 95       	ret

00001a3e <disk_status>:

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
    1a3e:	91 e0       	ldi	r25, 0x01	; 1
    1a40:	88 23       	and	r24, r24
    1a42:	09 f4       	brne	.+2      	; 0x1a46 <disk_status+0x8>
    1a44:	90 e0       	ldi	r25, 0x00	; 0

	return 0;
}
    1a46:	89 2f       	mov	r24, r25
    1a48:	08 95       	ret

00001a4a <disk_read>:
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    1a4a:	8f 92       	push	r8
    1a4c:	9f 92       	push	r9
    1a4e:	af 92       	push	r10
    1a50:	bf 92       	push	r11
    1a52:	cf 92       	push	r12
    1a54:	df 92       	push	r13
    1a56:	ef 92       	push	r14
    1a58:	ff 92       	push	r15
    1a5a:	0f 93       	push	r16
    1a5c:	1f 93       	push	r17
    1a5e:	cf 93       	push	r28
    1a60:	df 93       	push	r29
    1a62:	59 01       	movw	r10, r18
    1a64:	6a 01       	movw	r12, r20
    1a66:	48 01       	movw	r8, r16

for (int i = 0; i < count; i++){
    1a68:	e6 2e       	mov	r14, r22
    1a6a:	e7 01       	movw	r28, r14
    1a6c:	7e 01       	movw	r14, r28
    1a6e:	f7 2e       	mov	r15, r23
    1a70:	e7 01       	movw	r28, r14
    1a72:	86 01       	movw	r16, r12
    1a74:	75 01       	movw	r14, r10
    1a76:	0c c0       	rjmp	.+24     	; 0x1a90 <disk_read+0x46>
	mmc_read_block(sector + i, buff+(i*512));
    1a78:	c8 01       	movw	r24, r16
    1a7a:	b7 01       	movw	r22, r14
    1a7c:	ae 01       	movw	r20, r28
    1a7e:	0e 94 66 01 	call	0x2cc	; 0x2cc <mmc_read_block>
    1a82:	08 94       	sec
    1a84:	e1 1c       	adc	r14, r1
    1a86:	f1 1c       	adc	r15, r1
    1a88:	01 1d       	adc	r16, r1
    1a8a:	11 1d       	adc	r17, r1
    1a8c:	c0 50       	subi	r28, 0x00	; 0
    1a8e:	de 4f       	sbci	r29, 0xFE	; 254
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{

for (int i = 0; i < count; i++){
    1a90:	c7 01       	movw	r24, r14
    1a92:	8a 19       	sub	r24, r10
    1a94:	9b 09       	sbc	r25, r11
    1a96:	88 15       	cp	r24, r8
    1a98:	99 05       	cpc	r25, r9
    1a9a:	70 f3       	brcs	.-36     	; 0x1a78 <disk_read+0x2e>
	mmc_read_block(sector + i, buff+(i*512));
}


	return RES_OK;
}
    1a9c:	80 e0       	ldi	r24, 0x00	; 0
    1a9e:	df 91       	pop	r29
    1aa0:	cf 91       	pop	r28
    1aa2:	1f 91       	pop	r17
    1aa4:	0f 91       	pop	r16
    1aa6:	ff 90       	pop	r15
    1aa8:	ef 90       	pop	r14
    1aaa:	df 90       	pop	r13
    1aac:	cf 90       	pop	r12
    1aae:	bf 90       	pop	r11
    1ab0:	af 90       	pop	r10
    1ab2:	9f 90       	pop	r9
    1ab4:	8f 90       	pop	r8
    1ab6:	08 95       	ret

00001ab8 <disk_initialize>:

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	spi_init();
    1ab8:	0e 94 49 00 	call	0x92	; 0x92 <spi_init>
	mmc_init();
    1abc:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <mmc_init>

	return 0;
}
    1ac0:	80 e0       	ldi	r24, 0x00	; 0
    1ac2:	08 95       	ret

00001ac4 <__mulsi3>:
    1ac4:	62 9f       	mul	r22, r18
    1ac6:	d0 01       	movw	r26, r0
    1ac8:	73 9f       	mul	r23, r19
    1aca:	f0 01       	movw	r30, r0
    1acc:	82 9f       	mul	r24, r18
    1ace:	e0 0d       	add	r30, r0
    1ad0:	f1 1d       	adc	r31, r1
    1ad2:	64 9f       	mul	r22, r20
    1ad4:	e0 0d       	add	r30, r0
    1ad6:	f1 1d       	adc	r31, r1
    1ad8:	92 9f       	mul	r25, r18
    1ada:	f0 0d       	add	r31, r0
    1adc:	83 9f       	mul	r24, r19
    1ade:	f0 0d       	add	r31, r0
    1ae0:	74 9f       	mul	r23, r20
    1ae2:	f0 0d       	add	r31, r0
    1ae4:	65 9f       	mul	r22, r21
    1ae6:	f0 0d       	add	r31, r0
    1ae8:	99 27       	eor	r25, r25
    1aea:	72 9f       	mul	r23, r18
    1aec:	b0 0d       	add	r27, r0
    1aee:	e1 1d       	adc	r30, r1
    1af0:	f9 1f       	adc	r31, r25
    1af2:	63 9f       	mul	r22, r19
    1af4:	b0 0d       	add	r27, r0
    1af6:	e1 1d       	adc	r30, r1
    1af8:	f9 1f       	adc	r31, r25
    1afa:	bd 01       	movw	r22, r26
    1afc:	cf 01       	movw	r24, r30
    1afe:	11 24       	eor	r1, r1
    1b00:	08 95       	ret

00001b02 <__udivmodsi4>:
    1b02:	a1 e2       	ldi	r26, 0x21	; 33
    1b04:	1a 2e       	mov	r1, r26
    1b06:	aa 1b       	sub	r26, r26
    1b08:	bb 1b       	sub	r27, r27
    1b0a:	fd 01       	movw	r30, r26
    1b0c:	0d c0       	rjmp	.+26     	; 0x1b28 <__udivmodsi4_ep>

00001b0e <__udivmodsi4_loop>:
    1b0e:	aa 1f       	adc	r26, r26
    1b10:	bb 1f       	adc	r27, r27
    1b12:	ee 1f       	adc	r30, r30
    1b14:	ff 1f       	adc	r31, r31
    1b16:	a2 17       	cp	r26, r18
    1b18:	b3 07       	cpc	r27, r19
    1b1a:	e4 07       	cpc	r30, r20
    1b1c:	f5 07       	cpc	r31, r21
    1b1e:	20 f0       	brcs	.+8      	; 0x1b28 <__udivmodsi4_ep>
    1b20:	a2 1b       	sub	r26, r18
    1b22:	b3 0b       	sbc	r27, r19
    1b24:	e4 0b       	sbc	r30, r20
    1b26:	f5 0b       	sbc	r31, r21

00001b28 <__udivmodsi4_ep>:
    1b28:	66 1f       	adc	r22, r22
    1b2a:	77 1f       	adc	r23, r23
    1b2c:	88 1f       	adc	r24, r24
    1b2e:	99 1f       	adc	r25, r25
    1b30:	1a 94       	dec	r1
    1b32:	69 f7       	brne	.-38     	; 0x1b0e <__udivmodsi4_loop>
    1b34:	60 95       	com	r22
    1b36:	70 95       	com	r23
    1b38:	80 95       	com	r24
    1b3a:	90 95       	com	r25
    1b3c:	9b 01       	movw	r18, r22
    1b3e:	ac 01       	movw	r20, r24
    1b40:	bd 01       	movw	r22, r26
    1b42:	cf 01       	movw	r24, r30
    1b44:	08 95       	ret

00001b46 <memset>:
    1b46:	dc 01       	movw	r26, r24
    1b48:	01 c0       	rjmp	.+2      	; 0x1b4c <memset+0x6>
    1b4a:	6d 93       	st	X+, r22
    1b4c:	41 50       	subi	r20, 0x01	; 1
    1b4e:	50 40       	sbci	r21, 0x00	; 0
    1b50:	e0 f7       	brcc	.-8      	; 0x1b4a <memset+0x4>
    1b52:	08 95       	ret

00001b54 <_exit>:
    1b54:	f8 94       	cli

00001b56 <__stop_program>:
    1b56:	ff cf       	rjmp	.-2      	; 0x1b56 <__stop_program>
