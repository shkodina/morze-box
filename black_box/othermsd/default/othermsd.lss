
othermsd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000356  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000206  00800060  00800060  000003ca  2**0
                  ALLOC
  2 .stab         00000738  00000000  00000000  000003cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000000e7  00000000  00000000  00000b04  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  00000beb  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000f3  00000000  00000000  00000c2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000052c  00000000  00000000  00000d1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002f1  00000000  00000000  0000124a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000068b  00000000  00000000  0000153b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  00001bc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001db  00000000  00000000  00001c98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002bd  00000000  00000000  00001e73  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000063  00000000  00000000  00002130  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	12 e0       	ldi	r17, 0x02	; 2
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 36       	cpi	r26, 0x66	; 102
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 15 01 	call	0x22a	; 0x22a <main>
  74:	0c 94 a9 01 	jmp	0x352	; 0x352 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <mmc_response>:
//--------------------------------------------------------------
//--------------------------------------------------------------
//--------------------------------------------------------------

uint8_t mmc_response(uint8_t response)
{
  7c:	1f 93       	push	r17
  7e:	cf 93       	push	r28
  80:	df 93       	push	r29
  82:	18 2f       	mov	r17, r24
  84:	cf ef       	ldi	r28, 0xFF	; 255
  86:	df e0       	ldi	r29, 0x0F	; 15
  uint16_t count = 0xFFF;
  uint8_t result;

  while(count > 0)
  {
    result = spi_receive_byte();
  88:	0e 94 5f 01 	call	0x2be	; 0x2be <spi_receive_byte>
    if (result == response)
  8c:	81 17       	cp	r24, r17
  8e:	21 f0       	breq	.+8      	; 0x98 <mmc_response+0x1c>
  90:	21 97       	sbiw	r28, 0x01	; 1
uint8_t mmc_response(uint8_t response)
{
  uint16_t count = 0xFFF;
  uint8_t result;

  while(count > 0)
  92:	d1 f7       	brne	.-12     	; 0x88 <mmc_response+0xc>
    count--;
  }

  if (count == 0){
  	//PORTA = 0xf0;
    return 1; /* Failure, loop was exited due to timeout */
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	01 c0       	rjmp	.+2      	; 0x9a <mmc_response+0x1e>
  }

  return 0; /* Normal, loop was exited before timeout */
  98:	80 e0       	ldi	r24, 0x00	; 0
}
  9a:	df 91       	pop	r29
  9c:	cf 91       	pop	r28
  9e:	1f 91       	pop	r17
  a0:	08 95       	ret

000000a2 <mmc_init>:
//--------------------------------------------------------------
//--------------------------------------------------------------


void mmc_init(void)
{
  a2:	ff 92       	push	r15
  a4:	0f 93       	push	r16
  a6:	1f 93       	push	r17
  uint8_t i;
  uint8_t byte;

  /* Init the CS output */
  DDR_CS |= _BV(DD_CS);
  a8:	bc 9a       	sbi	0x17, 4	; 23

  SET_CS();
  aa:	c4 9a       	sbi	0x18, 4	; 24
  ac:	1a e0       	ldi	r17, 0x0A	; 10
  {
    /* Init the card in SPI mode by sending 80 clks */
    for(i = 0; i < 10; i++)
      byte = spi_receive_byte();
  ae:	0e 94 5f 01 	call	0x2be	; 0x2be <spi_receive_byte>
  b2:	11 50       	subi	r17, 0x01	; 1
  DDR_CS |= _BV(DD_CS);

  SET_CS();
  {
    /* Init the card in SPI mode by sending 80 clks */
    for(i = 0; i < 10; i++)
  b4:	e1 f7       	brne	.-8      	; 0xae <mmc_init+0xc>
      byte = spi_receive_byte();
  }
  CLEAR_CS();
  b6:	c4 98       	cbi	0x18, 4	; 24



  /* Send CMD0 GO_IDLE_STATE */
  mmc_cmd[0] = 0x40;
  b8:	80 e4       	ldi	r24, 0x40	; 64
  ba:	80 93 60 00 	sts	0x0060, r24
  mmc_cmd[1] = 0x00;
  be:	10 92 61 00 	sts	0x0061, r1
  mmc_cmd[2] = 0x00;
  c2:	10 92 62 00 	sts	0x0062, r1
  mmc_cmd[3] = 0x00;
  c6:	10 92 63 00 	sts	0x0063, r1
  mmc_cmd[4] = 0x00;
  ca:	10 92 64 00 	sts	0x0064, r1
  mmc_cmd[5] = 0x95;
  ce:	85 e9       	ldi	r24, 0x95	; 149
  d0:	80 93 65 00 	sts	0x0065, r24
  spi_send(mmc_cmd, MMC_CMD_SIZE);
  d4:	80 e6       	ldi	r24, 0x60	; 96
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	66 e0       	ldi	r22, 0x06	; 6
  da:	70 e0       	ldi	r23, 0x00	; 0
  dc:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <spi_send>

  if (mmc_response(0x01))
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	0e 94 3e 00 	call	0x7c	; 0x7c <mmc_response>
  e6:	88 23       	and	r24, r24
  e8:	11 f0       	breq	.+4      	; 0xee <mmc_init+0x4c>
  {
    PORTC |= 0x10;
  ea:	ac 9a       	sbi	0x15, 4	; 21
    return;
  ec:	4d c0       	rjmp	.+154    	; 0x188 <mmc_init+0xe6>
  }

PORTC |= 0x02;
  ee:	a9 9a       	sbi	0x15, 1	; 21

  /* Send some dummy clocks after GO_IDLE_STATE */
  SET_CS();
  f0:	c4 9a       	sbi	0x18, 4	; 24
  spi_receive_byte();
  f2:	0e 94 5f 01 	call	0x2be	; 0x2be <spi_receive_byte>
  CLEAR_CS();
  f6:	c4 98       	cbi	0x18, 4	; 24

PORTC |= 0x04;
  f8:	aa 9a       	sbi	0x15, 2	; 21

  /* Send CMD1 SEND_OP_COND until response is 0 */
  i = MMC_TIMEOUT;
  fa:	1f ef       	ldi	r17, 0xFF	; 255
  do
  {
    mmc_cmd[0] = 0x41;
  fc:	81 e4       	ldi	r24, 0x41	; 65
  fe:	f8 2e       	mov	r15, r24
    mmc_cmd[1] = 0x00;
    mmc_cmd[2] = 0x00;
    mmc_cmd[3] = 0x00;
    mmc_cmd[4] = 0x00;
    mmc_cmd[5] = 0xFF;
 100:	0f ef       	ldi	r16, 0xFF	; 255

  /* Send CMD1 SEND_OP_COND until response is 0 */
  i = MMC_TIMEOUT;
  do
  {
    mmc_cmd[0] = 0x41;
 102:	f0 92 60 00 	sts	0x0060, r15
    mmc_cmd[1] = 0x00;
 106:	10 92 61 00 	sts	0x0061, r1
    mmc_cmd[2] = 0x00;
 10a:	10 92 62 00 	sts	0x0062, r1
    mmc_cmd[3] = 0x00;
 10e:	10 92 63 00 	sts	0x0063, r1
    mmc_cmd[4] = 0x00;
 112:	10 92 64 00 	sts	0x0064, r1
    mmc_cmd[5] = 0xFF;
 116:	00 93 65 00 	sts	0x0065, r16
    spi_send(mmc_cmd, MMC_CMD_SIZE);
 11a:	80 e6       	ldi	r24, 0x60	; 96
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	66 e0       	ldi	r22, 0x06	; 6
 120:	70 e0       	ldi	r23, 0x00	; 0
 122:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <spi_send>
    i--;
 126:	11 50       	subi	r17, 0x01	; 1
  } while((mmc_response(0x00) != 0) && (i > 0));
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	0e 94 3e 00 	call	0x7c	; 0x7c <mmc_response>
 12e:	88 23       	and	r24, r24
 130:	19 f0       	breq	.+6      	; 0x138 <mmc_init+0x96>
 132:	11 23       	and	r17, r17
 134:	31 f7       	brne	.-52     	; 0x102 <mmc_init+0x60>
 136:	02 c0       	rjmp	.+4      	; 0x13c <mmc_init+0x9a>

  if (i == 0)
 138:	11 23       	and	r17, r17
 13a:	11 f4       	brne	.+4      	; 0x140 <mmc_init+0x9e>
  {
    PORTC |= 0x20;
 13c:	ad 9a       	sbi	0x15, 5	; 21
    return;
 13e:	24 c0       	rjmp	.+72     	; 0x188 <mmc_init+0xe6>
  }

PORTC |= 0x08;
 140:	ab 9a       	sbi	0x15, 3	; 21

  /* Send some dummy clocks after GO_IDLE_STATE */
  SET_CS();
 142:	c4 9a       	sbi	0x18, 4	; 24
  spi_receive_byte();
 144:	0e 94 5f 01 	call	0x2be	; 0x2be <spi_receive_byte>
  CLEAR_CS();
 148:	c4 98       	cbi	0x18, 4	; 24

  PORTC &= 0b11011111;
 14a:	ad 98       	cbi	0x15, 5	; 21

  /* Send CMD16 SET_BLOCKLEN to set the block length */
  mmc_cmd[0] = 0x50;
 14c:	80 e5       	ldi	r24, 0x50	; 80
 14e:	80 93 60 00 	sts	0x0060, r24
  mmc_cmd[1] = 0x00;   /* 4 bytes from here is the block length */
 152:	10 92 61 00 	sts	0x0061, r1
                       /* LSB is first */
                       /* 00 00 00 10 set to 16 bytes */
                       /* 00 00 02 00 set to 512 bytes */
  mmc_cmd[2] = 0x00;
 156:	10 92 62 00 	sts	0x0062, r1
  /* high block length bits - 512 bytes */
  mmc_cmd[3] = 0x02;
 15a:	82 e0       	ldi	r24, 0x02	; 2
 15c:	80 93 63 00 	sts	0x0063, r24
  /* low block length bits */
  mmc_cmd[4] = 0x00;
 160:	10 92 64 00 	sts	0x0064, r1
  mmc_cmd[5] = 0xFF; /* checksum is no longer required but we always send 0xFF */
 164:	00 93 65 00 	sts	0x0065, r16
  spi_send(mmc_cmd, MMC_CMD_SIZE);
 168:	80 e6       	ldi	r24, 0x60	; 96
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	66 e0       	ldi	r22, 0x06	; 6
 16e:	70 e0       	ldi	r23, 0x00	; 0
 170:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <spi_send>

  if ((mmc_response(0x00)) == 1)
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	0e 94 3e 00 	call	0x7c	; 0x7c <mmc_response>
 17a:	81 30       	cpi	r24, 0x01	; 1
 17c:	09 f4       	brne	.+2      	; 0x180 <mmc_init+0xde>
  {
    PORTC |= 0x40;
 17e:	ae 9a       	sbi	0x15, 6	; 21
  }

  SET_CS();
 180:	c4 9a       	sbi	0x18, 4	; 24
  spi_receive_byte();
 182:	0e 94 5f 01 	call	0x2be	; 0x2be <spi_receive_byte>

  PORTA |= 0x20;
 186:	dd 9a       	sbi	0x1b, 5	; 27
}
 188:	1f 91       	pop	r17
 18a:	0f 91       	pop	r16
 18c:	ff 90       	pop	r15
 18e:	08 95       	ret

00000190 <mmc_read_block>:
//--------------------------------------------------------------
//--------------------------------------------------------------
//--------------------------------------------------------------

void mmc_read_block(uint16_t block_number, uint8_t* block_address)
{
 190:	cf 93       	push	r28
 192:	df 93       	push	r29
 194:	eb 01       	movw	r28, r22
  uint16_t checksum;
  uint16_t varh, varl;

  varl = ((block_number & 0x003F) << 9);
 196:	9c 01       	movw	r18, r24
 198:	2f 73       	andi	r18, 0x3F	; 63
 19a:	30 70       	andi	r19, 0x00	; 0
 19c:	22 0f       	add	r18, r18
  varh = ((block_number & 0xFFC0) >> 7);
 19e:	88 0f       	add	r24, r24
 1a0:	89 2f       	mov	r24, r25
 1a2:	88 1f       	adc	r24, r24
 1a4:	99 0b       	sbc	r25, r25
 1a6:	91 95       	neg	r25

 

  CLEAR_CS();
 1a8:	c4 98       	cbi	0x18, 4	; 24
  {
    /* send MMC CMD17(READ_SINGLE_BLOCK) to read the data from MMC card */
    mmc_cmd[0] = 0x51;
 1aa:	31 e5       	ldi	r19, 0x51	; 81
 1ac:	30 93 60 00 	sts	0x0060, r19
    /* high block address bits, varh HIGH and LOW */
    mmc_cmd[1] = varh >> 0x08;
 1b0:	90 93 61 00 	sts	0x0061, r25
    mmc_cmd[2] = varh & 0xFF;
 1b4:	80 93 62 00 	sts	0x0062, r24
    /* low block address bits, varl HIGH and LOW */
    mmc_cmd[3] = varl >> 0x08;
 1b8:	20 93 63 00 	sts	0x0063, r18
    mmc_cmd[4] = varl & 0xFF;
 1bc:	10 92 64 00 	sts	0x0064, r1
    /* checksum is no longer required but we always send 0xFF */
    mmc_cmd[5] = 0xFF;
 1c0:	8f ef       	ldi	r24, 0xFF	; 255
 1c2:	80 93 65 00 	sts	0x0065, r24
    spi_send(mmc_cmd, MMC_CMD_SIZE);
 1c6:	80 e6       	ldi	r24, 0x60	; 96
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	66 e0       	ldi	r22, 0x06	; 6
 1cc:	70 e0       	ldi	r23, 0x00	; 0
 1ce:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <spi_send>

    /* if mmc_response returns 1 then we failed to get a 0x00 response */
    if ((mmc_response(0x00)) == 1)
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	0e 94 3e 00 	call	0x7c	; 0x7c <mmc_response>
 1d8:	81 30       	cpi	r24, 0x01	; 1
 1da:	89 f0       	breq	.+34     	; 0x1fe <mmc_read_block+0x6e>
    {
      return;
    }

    /* wait for data token */
    if ((mmc_response(0xFE)) == 1)
 1dc:	8e ef       	ldi	r24, 0xFE	; 254
 1de:	0e 94 3e 00 	call	0x7c	; 0x7c <mmc_response>
 1e2:	81 30       	cpi	r24, 0x01	; 1
 1e4:	61 f0       	breq	.+24     	; 0x1fe <mmc_read_block+0x6e>
    }

 

    /* Get the block of data based on the length */
    spi_receive(block_address, MMC_BLOCK_SIZE);
 1e6:	ce 01       	movw	r24, r28
 1e8:	60 e0       	ldi	r22, 0x00	; 0
 1ea:	72 e0       	ldi	r23, 0x02	; 2
 1ec:	0e 94 86 01 	call	0x30c	; 0x30c <spi_receive>

    /* CRC bytes that are not needed */
    checksum = spi_receive_byte();
 1f0:	0e 94 5f 01 	call	0x2be	; 0x2be <spi_receive_byte>
    checksum = checksum << 0x08 | spi_receive_byte();
 1f4:	0e 94 5f 01 	call	0x2be	; 0x2be <spi_receive_byte>
  }
  SET_CS();
 1f8:	c4 9a       	sbi	0x18, 4	; 24
  
  spi_receive_byte();
 1fa:	0e 94 5f 01 	call	0x2be	; 0x2be <spi_receive_byte>
  
}
 1fe:	df 91       	pop	r29
 200:	cf 91       	pop	r28
 202:	08 95       	ret

00000204 <print_block>:
    printf("\n");

  }
*/

	for(i = 0; i < length ; i++){
 204:	28 2f       	mov	r18, r24
 206:	39 2f       	mov	r19, r25
 208:	f9 01       	movw	r30, r18
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	09 c0       	rjmp	.+18     	; 0x222 <print_block+0x1e>
		PORTC = block_address[i];
 210:	21 91       	ld	r18, Z+
 212:	25 bb       	out	0x15, r18	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 214:	a7 e8       	ldi	r26, 0x87	; 135
 216:	b3 e1       	ldi	r27, 0x13	; 19
 218:	11 97       	sbiw	r26, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <print_block+0x14>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <print_block+0x1a>
 21e:	00 00       	nop
    printf("\n");

  }
*/

	for(i = 0; i < length ; i++){
 220:	01 96       	adiw	r24, 0x01	; 1
 222:	86 17       	cp	r24, r22
 224:	97 07       	cpc	r25, r23
 226:	a0 f3       	brcs	.-24     	; 0x210 <print_block+0xc>
		PORTC = block_address[i];
		_delay_ms(20);
	}
}
 228:	08 95       	ret

0000022a <main>:
* Main program
******************************************************************************/
uint8_t mmc_block[MMC_BLOCK_SIZE];

int main (void)
{
 22a:	cf 93       	push	r28
 22c:	df 93       	push	r29

	DDRC = 0xff;
 22e:	8f ef       	ldi	r24, 0xFF	; 255
 230:	84 bb       	out	0x14, r24	; 20
	DDRA = 0xf0;
 232:	80 ef       	ldi	r24, 0xF0	; 240
 234:	8a bb       	out	0x1a, r24	; 26



  /* Init the SPI */

  spi_init();
 236:	0e 94 4c 01 	call	0x298	; 0x298 <spi_init>
  	PORTC |= 0x01;
 23a:	a8 9a       	sbi	0x15, 0	; 21

  /* Init the MMC */

  mmc_init();
 23c:	0e 94 51 00 	call	0xa2	; 0xa2 <mmc_init>
 
PORTA |= 0xF0;
 240:	8b b3       	in	r24, 0x1b	; 27
 242:	80 6f       	ori	r24, 0xF0	; 240
 244:	8b bb       	out	0x1b, r24	; 27

  // Reset the MMC buffer 
  memset(mmc_block, 0xCA, MMC_BLOCK_SIZE);
 246:	86 e6       	ldi	r24, 0x66	; 102
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	6a ec       	ldi	r22, 0xCA	; 202
 24c:	70 e0       	ldi	r23, 0x00	; 0
 24e:	40 e0       	ldi	r20, 0x00	; 0
 250:	52 e0       	ldi	r21, 0x02	; 2
 252:	0e 94 a2 01 	call	0x344	; 0x344 <memset>
 256:	8f e3       	ldi	r24, 0x3F	; 63
 258:	9d e0       	ldi	r25, 0x0D	; 13
 25a:	a3 e0       	ldi	r26, 0x03	; 3
 25c:	81 50       	subi	r24, 0x01	; 1
 25e:	90 40       	sbci	r25, 0x00	; 0
 260:	a0 40       	sbci	r26, 0x00	; 0
 262:	e1 f7       	brne	.-8      	; 0x25c <main+0x32>
 264:	00 c0       	rjmp	.+0      	; 0x266 <main+0x3c>
 266:	00 00       	nop

_delay_ms(1000);
PORTC = 0;
 268:	15 ba       	out	0x15, r1	; 21

  // Read the first block 
  for(int t=63; t<90; t++){
 26a:	cf e3       	ldi	r28, 0x3F	; 63
 26c:	d0 e0       	ldi	r29, 0x00	; 0
//  mmc_read_block(63, mmc_block);
  mmc_read_block(t, mmc_block);
 26e:	ce 01       	movw	r24, r28
 270:	66 e6       	ldi	r22, 0x66	; 102
 272:	70 e0       	ldi	r23, 0x00	; 0
 274:	0e 94 c8 00 	call	0x190	; 0x190 <mmc_read_block>
  print_block(mmc_block, MMC_BLOCK_SIZE);
 278:	86 e6       	ldi	r24, 0x66	; 102
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	60 e0       	ldi	r22, 0x00	; 0
 27e:	72 e0       	ldi	r23, 0x02	; 2
 280:	0e 94 02 01 	call	0x204	; 0x204 <print_block>

_delay_ms(1000);
PORTC = 0;

  // Read the first block 
  for(int t=63; t<90; t++){
 284:	21 96       	adiw	r28, 0x01	; 1
 286:	ca 35       	cpi	r28, 0x5A	; 90
 288:	d1 05       	cpc	r29, r1
 28a:	89 f7       	brne	.-30     	; 0x26e <main+0x44>
//  mmc_read_block(63, mmc_block);
  mmc_read_block(t, mmc_block);
  print_block(mmc_block, MMC_BLOCK_SIZE);
  }

PORTA &= 0x0f;
 28c:	8b b3       	in	r24, 0x1b	; 27
 28e:	8f 70       	andi	r24, 0x0F	; 15
 290:	8b bb       	out	0x1b, r24	; 27
PORTA = 0b10010000;
 292:	80 e9       	ldi	r24, 0x90	; 144
 294:	8b bb       	out	0x1b, r24	; 27
 296:	ff cf       	rjmp	.-2      	; 0x296 <main+0x6c>

00000298 <spi_init>:
#define DD_SCK  DDB7

void spi_init(void)
{
  /* Set MOSI and SCK output */
  DDR_SPI |= _BV(DD_MOSI) | _BV(DD_SCK);
 298:	87 b3       	in	r24, 0x17	; 23
 29a:	80 6a       	ori	r24, 0xA0	; 160
 29c:	87 bb       	out	0x17, r24	; 23
  DDR_SPI &= ~_BV(DD_MISO);
 29e:	be 98       	cbi	0x17, 6	; 23
  
  /* Enable SPI, Master, set clock rate fck/128 */
  SPCR = _BV(SPE) | _BV(MSTR) | _BV(SPR0) | _BV(SPR1);
 2a0:	83 e5       	ldi	r24, 0x53	; 83
 2a2:	8d b9       	out	0x0d, r24	; 13
  SPSR = _BV(SPI2X);
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	8e b9       	out	0x0e, r24	; 14




PORTB=0x00;
 2a8:	18 ba       	out	0x18, r1	; 24
DDRB=0xB0;
 2aa:	90 eb       	ldi	r25, 0xB0	; 176
 2ac:	97 bb       	out	0x17, r25	; 23
SPCR=0x50;
 2ae:	90 e5       	ldi	r25, 0x50	; 80
 2b0:	9d b9       	out	0x0d, r25	; 13
SPSR=0x01;
 2b2:	8e b9       	out	0x0e, r24	; 14

}
 2b4:	08 95       	ret

000002b6 <spi_send_byte>:

void spi_send_byte(uint8_t byte)
{
  /* Start transmission */
  SPDR = byte;
 2b6:	8f b9       	out	0x0f, r24	; 15
  
  /* Wait for transmission complete */
  while (!(SPSR & _BV(SPIF)));
 2b8:	77 9b       	sbis	0x0e, 7	; 14
 2ba:	fe cf       	rjmp	.-4      	; 0x2b8 <spi_send_byte+0x2>
}
 2bc:	08 95       	ret

000002be <spi_receive_byte>:
uint8_t spi_receive_byte(void)
{
  uint8_t byte = 0;
  
  /* Write dummy byte to generate clock */
  SPDR = 0xFF;
 2be:	8f ef       	ldi	r24, 0xFF	; 255
 2c0:	8f b9       	out	0x0f, r24	; 15
  
  /* Wait for transmission complete */
  while (!(SPSR & _BV(SPIF)));
 2c2:	77 9b       	sbis	0x0e, 7	; 14
 2c4:	fe cf       	rjmp	.-4      	; 0x2c2 <spi_receive_byte+0x4>
  
  /* Read the received byte */
  byte = SPDR;
 2c6:	8f b1       	in	r24, 0x0f	; 15
  
  return byte;
}
 2c8:	08 95       	ret

000002ca <spi_send_receive_byte>:

uint8_t spi_send_receive_byte(uint8_t byte)
{
  /* Start transmission */
  SPDR = byte;
 2ca:	8f b9       	out	0x0f, r24	; 15
  
  /* Wait for transmission complete */
  while (!(SPSR & _BV(SPIF)));
 2cc:	77 9b       	sbis	0x0e, 7	; 14
 2ce:	fe cf       	rjmp	.-4      	; 0x2cc <spi_send_receive_byte+0x2>
  
  /* Read the received byte */
  byte = SPDR;
 2d0:	8f b1       	in	r24, 0x0f	; 15
  
  return byte;
}
 2d2:	08 95       	ret

000002d4 <spi_send>:

void spi_send(uint8_t* data, uint16_t length)
{
 2d4:	ef 92       	push	r14
 2d6:	ff 92       	push	r15
 2d8:	0f 93       	push	r16
 2da:	1f 93       	push	r17
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	7b 01       	movw	r14, r22
  for(uint16_t i = 0; i < length; i++)
 2e2:	08 2f       	mov	r16, r24
 2e4:	19 2f       	mov	r17, r25
 2e6:	c0 e0       	ldi	r28, 0x00	; 0
 2e8:	d0 e0       	ldi	r29, 0x00	; 0
 2ea:	06 c0       	rjmp	.+12     	; 0x2f8 <spi_send+0x24>
    spi_send_byte(data[i]);
 2ec:	f8 01       	movw	r30, r16
 2ee:	81 91       	ld	r24, Z+
 2f0:	8f 01       	movw	r16, r30
 2f2:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <spi_send_byte>
  return byte;
}

void spi_send(uint8_t* data, uint16_t length)
{
  for(uint16_t i = 0; i < length; i++)
 2f6:	21 96       	adiw	r28, 0x01	; 1
 2f8:	ce 15       	cp	r28, r14
 2fa:	df 05       	cpc	r29, r15
 2fc:	b8 f3       	brcs	.-18     	; 0x2ec <spi_send+0x18>
    spi_send_byte(data[i]);
}
 2fe:	df 91       	pop	r29
 300:	cf 91       	pop	r28
 302:	1f 91       	pop	r17
 304:	0f 91       	pop	r16
 306:	ff 90       	pop	r15
 308:	ef 90       	pop	r14
 30a:	08 95       	ret

0000030c <spi_receive>:

void spi_receive(uint8_t* data, uint16_t length)
{
 30c:	ef 92       	push	r14
 30e:	ff 92       	push	r15
 310:	0f 93       	push	r16
 312:	1f 93       	push	r17
 314:	cf 93       	push	r28
 316:	df 93       	push	r29
 318:	7b 01       	movw	r14, r22
  for(uint16_t i = 0; i < length; i++)
 31a:	08 2f       	mov	r16, r24
 31c:	19 2f       	mov	r17, r25
 31e:	c0 e0       	ldi	r28, 0x00	; 0
 320:	d0 e0       	ldi	r29, 0x00	; 0
 322:	06 c0       	rjmp	.+12     	; 0x330 <spi_receive+0x24>
  {
    data[i] = spi_receive_byte();
 324:	0e 94 5f 01 	call	0x2be	; 0x2be <spi_receive_byte>
 328:	f8 01       	movw	r30, r16
 32a:	81 93       	st	Z+, r24
 32c:	8f 01       	movw	r16, r30
    spi_send_byte(data[i]);
}

void spi_receive(uint8_t* data, uint16_t length)
{
  for(uint16_t i = 0; i < length; i++)
 32e:	21 96       	adiw	r28, 0x01	; 1
 330:	ce 15       	cp	r28, r14
 332:	df 05       	cpc	r29, r15
 334:	b8 f3       	brcs	.-18     	; 0x324 <spi_receive+0x18>
  {
    data[i] = spi_receive_byte();
  }
}
 336:	df 91       	pop	r29
 338:	cf 91       	pop	r28
 33a:	1f 91       	pop	r17
 33c:	0f 91       	pop	r16
 33e:	ff 90       	pop	r15
 340:	ef 90       	pop	r14
 342:	08 95       	ret

00000344 <memset>:
 344:	dc 01       	movw	r26, r24
 346:	01 c0       	rjmp	.+2      	; 0x34a <memset+0x6>
 348:	6d 93       	st	X+, r22
 34a:	41 50       	subi	r20, 0x01	; 1
 34c:	50 40       	sbci	r21, 0x00	; 0
 34e:	e0 f7       	brcc	.-8      	; 0x348 <memset+0x4>
 350:	08 95       	ret

00000352 <_exit>:
 352:	f8 94       	cli

00000354 <__stop_program>:
 354:	ff cf       	rjmp	.-2      	; 0x354 <__stop_program>
