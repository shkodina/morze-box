
04.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003992  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  00003992  00003a26  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000253  0080008a  0080008a  00003a50  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00003a50  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  0000411c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000060  00000000  00000000  000041a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001cb  00000000  00000000  00004201  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000025c4  00000000  00000000  000043cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005cf  00000000  00000000  00006990  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002a78  00000000  00000000  00006f5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000003c0  00000000  00000000  000099d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000665  00000000  00000000  00009d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003898  00000000  00000000  0000a3fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000013c  00000000  00000000  0000dc95  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000b0  00000000  00000000  0000ddd1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e9       	ldi	r30, 0x92	; 146
      68:	f9 e3       	ldi	r31, 0x39	; 57
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	aa 38       	cpi	r26, 0x8A	; 138
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	aa e8       	ldi	r26, 0x8A	; 138
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 3d       	cpi	r26, 0xDD	; 221
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 44 1c 	call	0x3888	; 0x3888 <main>
      8a:	0c 94 c7 1c 	jmp	0x398e	; 0x398e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <SPI_sendchar>:
#define CS_L()		PORTB &= ~CS_P	// Set MMC CS "low" 


char SPI_sendchar(char chr) {
     char receivedchar = 0;
     SPDR = chr;
      92:	8f b9       	out	0x0f, r24	; 15
     while(!(SPSR & (1<<SPIF)));
      94:	77 9b       	sbis	0x0e, 7	; 14
      96:	fe cf       	rjmp	.-4      	; 0x94 <SPI_sendchar+0x2>
     receivedchar = SPDR;
      98:	8f b1       	in	r24, 0x0f	; 15
     return (receivedchar);
}
      9a:	08 95       	ret

0000009c <rcvr_mmc>:
static
void rcvr_mmc (
	BYTE *buff,	/* Pointer to read buffer */
	UINT bc		/* Number of bytes to receive */
)
{
      9c:	0f 93       	push	r16
      9e:	1f 93       	push	r17
      a0:	cf 93       	push	r28
      a2:	df 93       	push	r29
      a4:	ec 01       	movw	r28, r24
      a6:	8b 01       	movw	r16, r22


//	DI_H();	/* Send 0xFF */

	do {
		r = SPI_sendchar(0xff);
      a8:	8f ef       	ldi	r24, 0xFF	; 255
      aa:	0e 94 49 00 	call	0x92	; 0x92 <SPI_sendchar>
		*buff++ = r;			/* Store a received byte */
      ae:	89 93       	st	Y+, r24
	} while (--bc);
      b0:	01 50       	subi	r16, 0x01	; 1
      b2:	10 40       	sbci	r17, 0x00	; 0
      b4:	c9 f7       	brne	.-14     	; 0xa8 <rcvr_mmc+0xc>
}
      b6:	df 91       	pop	r29
      b8:	cf 91       	pop	r28
      ba:	1f 91       	pop	r17
      bc:	0f 91       	pop	r16
      be:	08 95       	ret

000000c0 <wait_ready>:
/* Wait for card ready                                                   */
/*-----------------------------------------------------------------------*/

static
int wait_ready (void)	/* 1:OK, 0:Timeout */
{
      c0:	ef 92       	push	r14
      c2:	ff 92       	push	r15
      c4:	0f 93       	push	r16
      c6:	1f 93       	push	r17
      c8:	df 93       	push	r29
      ca:	cf 93       	push	r28
      cc:	0f 92       	push	r0
      ce:	cd b7       	in	r28, 0x3d	; 61
      d0:	de b7       	in	r29, 0x3e	; 62
	BYTE d;
	UINT tmr;


	for (tmr = 5000; tmr; tmr--) {	/* Wait for ready in timeout of 500ms */
      d2:	08 e8       	ldi	r16, 0x88	; 136
      d4:	13 e1       	ldi	r17, 0x13	; 19
		rcvr_mmc(&d, 1);
      d6:	7e 01       	movw	r14, r28
      d8:	08 94       	sec
      da:	e1 1c       	adc	r14, r1
      dc:	f1 1c       	adc	r15, r1
      de:	c7 01       	movw	r24, r14
      e0:	61 e0       	ldi	r22, 0x01	; 1
      e2:	70 e0       	ldi	r23, 0x00	; 0
      e4:	0e 94 4e 00 	call	0x9c	; 0x9c <rcvr_mmc>
		if (d == 0xFF) break;
      e8:	89 81       	ldd	r24, Y+1	; 0x01
      ea:	8f 3f       	cpi	r24, 0xFF	; 255
      ec:	39 f0       	breq	.+14     	; 0xfc <wait_ready+0x3c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      ee:	81 e2       	ldi	r24, 0x21	; 33
      f0:	8a 95       	dec	r24
      f2:	f1 f7       	brne	.-4      	; 0xf0 <wait_ready+0x30>
      f4:	00 00       	nop
{
	BYTE d;
	UINT tmr;


	for (tmr = 5000; tmr; tmr--) {	/* Wait for ready in timeout of 500ms */
      f6:	01 50       	subi	r16, 0x01	; 1
      f8:	10 40       	sbci	r17, 0x00	; 0
      fa:	89 f7       	brne	.-30     	; 0xde <wait_ready+0x1e>
		rcvr_mmc(&d, 1);
		if (d == 0xFF) break;
		_delay_us(100);
	}

	return tmr ? 1 : 0;
      fc:	21 e0       	ldi	r18, 0x01	; 1
      fe:	30 e0       	ldi	r19, 0x00	; 0
     100:	01 15       	cp	r16, r1
     102:	11 05       	cpc	r17, r1
     104:	11 f4       	brne	.+4      	; 0x10a <wait_ready+0x4a>
     106:	20 e0       	ldi	r18, 0x00	; 0
     108:	30 e0       	ldi	r19, 0x00	; 0
}
     10a:	c9 01       	movw	r24, r18
     10c:	0f 90       	pop	r0
     10e:	cf 91       	pop	r28
     110:	df 91       	pop	r29
     112:	1f 91       	pop	r17
     114:	0f 91       	pop	r16
     116:	ff 90       	pop	r15
     118:	ef 90       	pop	r14
     11a:	08 95       	ret

0000011c <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Failed */
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count */
)
{
     11c:	af 92       	push	r10
     11e:	bf 92       	push	r11
     120:	cf 92       	push	r12
     122:	df 92       	push	r13
     124:	ef 92       	push	r14
     126:	ff 92       	push	r15
     128:	0f 93       	push	r16
     12a:	1f 93       	push	r17
     12c:	df 93       	push	r29
     12e:	cf 93       	push	r28
     130:	00 d0       	rcall	.+0      	; 0x132 <rcvr_datablock+0x16>
     132:	cd b7       	in	r28, 0x3d	; 61
     134:	de b7       	in	r29, 0x3e	; 62
     136:	6c 01       	movw	r12, r24
     138:	5b 01       	movw	r10, r22
     13a:	08 ee       	ldi	r16, 0xE8	; 232
     13c:	13 e0       	ldi	r17, 0x03	; 3
	BYTE d[2];
	UINT tmr;


	for (tmr = 1000; tmr; tmr--) {	/* Wait for data packet in timeout of 100ms */
		rcvr_mmc(d, 1);
     13e:	7e 01       	movw	r14, r28
     140:	08 94       	sec
     142:	e1 1c       	adc	r14, r1
     144:	f1 1c       	adc	r15, r1
     146:	c7 01       	movw	r24, r14
     148:	61 e0       	ldi	r22, 0x01	; 1
     14a:	70 e0       	ldi	r23, 0x00	; 0
     14c:	0e 94 4e 00 	call	0x9c	; 0x9c <rcvr_mmc>
		if (d[0] != 0xFF) break;
     150:	89 81       	ldd	r24, Y+1	; 0x01
     152:	8f 3f       	cpi	r24, 0xFF	; 255
     154:	39 f4       	brne	.+14     	; 0x164 <rcvr_datablock+0x48>
     156:	81 e2       	ldi	r24, 0x21	; 33
     158:	8a 95       	dec	r24
     15a:	f1 f7       	brne	.-4      	; 0x158 <rcvr_datablock+0x3c>
     15c:	00 00       	nop
     15e:	01 50       	subi	r16, 0x01	; 1
     160:	10 40       	sbci	r17, 0x00	; 0
{
	BYTE d[2];
	UINT tmr;


	for (tmr = 1000; tmr; tmr--) {	/* Wait for data packet in timeout of 100ms */
     162:	89 f7       	brne	.-30     	; 0x146 <rcvr_datablock+0x2a>
		rcvr_mmc(d, 1);
		if (d[0] != 0xFF) break;
		_delay_us(100);
	}
	if (d[0] != 0xFE) return 0;		/* If not valid data token, return with error */
     164:	89 81       	ldd	r24, Y+1	; 0x01
     166:	8e 3f       	cpi	r24, 0xFE	; 254
     168:	69 f4       	brne	.+26     	; 0x184 <rcvr_datablock+0x68>

	rcvr_mmc(buff, btr);			/* Receive the data block into buffer */
     16a:	c6 01       	movw	r24, r12
     16c:	b5 01       	movw	r22, r10
     16e:	0e 94 4e 00 	call	0x9c	; 0x9c <rcvr_mmc>
	rcvr_mmc(d, 2);					/* Discard CRC */
     172:	ce 01       	movw	r24, r28
     174:	01 96       	adiw	r24, 0x01	; 1
     176:	62 e0       	ldi	r22, 0x02	; 2
     178:	70 e0       	ldi	r23, 0x00	; 0
     17a:	0e 94 4e 00 	call	0x9c	; 0x9c <rcvr_mmc>

	return 1;						/* Return with success */
     17e:	21 e0       	ldi	r18, 0x01	; 1
     180:	30 e0       	ldi	r19, 0x00	; 0
     182:	02 c0       	rjmp	.+4      	; 0x188 <rcvr_datablock+0x6c>
	for (tmr = 1000; tmr; tmr--) {	/* Wait for data packet in timeout of 100ms */
		rcvr_mmc(d, 1);
		if (d[0] != 0xFF) break;
		_delay_us(100);
	}
	if (d[0] != 0xFE) return 0;		/* If not valid data token, return with error */
     184:	20 e0       	ldi	r18, 0x00	; 0
     186:	30 e0       	ldi	r19, 0x00	; 0

	rcvr_mmc(buff, btr);			/* Receive the data block into buffer */
	rcvr_mmc(d, 2);					/* Discard CRC */

	return 1;						/* Return with success */
}
     188:	c9 01       	movw	r24, r18
     18a:	0f 90       	pop	r0
     18c:	0f 90       	pop	r0
     18e:	cf 91       	pop	r28
     190:	df 91       	pop	r29
     192:	1f 91       	pop	r17
     194:	0f 91       	pop	r16
     196:	ff 90       	pop	r15
     198:	ef 90       	pop	r14
     19a:	df 90       	pop	r13
     19c:	cf 90       	pop	r12
     19e:	bf 90       	pop	r11
     1a0:	af 90       	pop	r10
     1a2:	08 95       	ret

000001a4 <deselect>:
/* Deselect the card and release SPI bus                                 */
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
     1a4:	df 93       	push	r29
     1a6:	cf 93       	push	r28
     1a8:	0f 92       	push	r0
     1aa:	cd b7       	in	r28, 0x3d	; 61
     1ac:	de b7       	in	r29, 0x3e	; 62
	BYTE d;

	CS_H();
     1ae:	c3 9a       	sbi	0x18, 3	; 24
	rcvr_mmc(&d, 1);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
     1b0:	ce 01       	movw	r24, r28
     1b2:	01 96       	adiw	r24, 0x01	; 1
     1b4:	61 e0       	ldi	r22, 0x01	; 1
     1b6:	70 e0       	ldi	r23, 0x00	; 0
     1b8:	0e 94 4e 00 	call	0x9c	; 0x9c <rcvr_mmc>
}
     1bc:	0f 90       	pop	r0
     1be:	cf 91       	pop	r28
     1c0:	df 91       	pop	r29
     1c2:	08 95       	ret

000001c4 <select>:
/* Select the card and wait for ready                                    */
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:OK, 0:Timeout */
{
     1c4:	df 93       	push	r29
     1c6:	cf 93       	push	r28
     1c8:	0f 92       	push	r0
     1ca:	cd b7       	in	r28, 0x3d	; 61
     1cc:	de b7       	in	r29, 0x3e	; 62
	BYTE d;

	CS_L();
     1ce:	c3 98       	cbi	0x18, 3	; 24
	rcvr_mmc(&d, 1);	/* Dummy clock (force DO enabled) */
     1d0:	ce 01       	movw	r24, r28
     1d2:	01 96       	adiw	r24, 0x01	; 1
     1d4:	61 e0       	ldi	r22, 0x01	; 1
     1d6:	70 e0       	ldi	r23, 0x00	; 0
     1d8:	0e 94 4e 00 	call	0x9c	; 0x9c <rcvr_mmc>

	if (wait_ready()) return 1;	/* OK */
     1dc:	0e 94 60 00 	call	0xc0	; 0xc0 <wait_ready>
     1e0:	00 97       	sbiw	r24, 0x00	; 0
     1e2:	29 f4       	brne	.+10     	; 0x1ee <select+0x2a>
	deselect();
     1e4:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <deselect>
	return 0;			/* Failed */
     1e8:	20 e0       	ldi	r18, 0x00	; 0
     1ea:	30 e0       	ldi	r19, 0x00	; 0
     1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <select+0x2e>
	BYTE d;

	CS_L();
	rcvr_mmc(&d, 1);	/* Dummy clock (force DO enabled) */

	if (wait_ready()) return 1;	/* OK */
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
	deselect();
	return 0;			/* Failed */
}
     1f2:	c9 01       	movw	r24, r18
     1f4:	0f 90       	pop	r0
     1f6:	cf 91       	pop	r28
     1f8:	df 91       	pop	r29
     1fa:	08 95       	ret

000001fc <xmit_mmc>:
static
void xmit_mmc (
	const BYTE* buff,	/* Data to be sent */
	UINT bc				/* Number of bytes to send */
)
{
     1fc:	0f 93       	push	r16
     1fe:	1f 93       	push	r17
     200:	cf 93       	push	r28
     202:	df 93       	push	r29
     204:	ec 01       	movw	r28, r24
     206:	8b 01       	movw	r16, r22
	BYTE d;


	do {
		d = *buff++;	/* Get a byte to be sent */
		SPI_sendchar(d);
     208:	89 91       	ld	r24, Y+
     20a:	0e 94 49 00 	call	0x92	; 0x92 <SPI_sendchar>
	} while (--bc);
     20e:	01 50       	subi	r16, 0x01	; 1
     210:	10 40       	sbci	r17, 0x00	; 0
     212:	d1 f7       	brne	.-12     	; 0x208 <xmit_mmc+0xc>
}
     214:	df 91       	pop	r29
     216:	cf 91       	pop	r28
     218:	1f 91       	pop	r17
     21a:	0f 91       	pop	r16
     21c:	08 95       	ret

0000021e <send_cmd>:
static
BYTE send_cmd (		/* Returns command response (bit7==1:Send failed)*/
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
     21e:	df 92       	push	r13
     220:	ef 92       	push	r14
     222:	ff 92       	push	r15
     224:	0f 93       	push	r16
     226:	1f 93       	push	r17
     228:	df 93       	push	r29
     22a:	cf 93       	push	r28
     22c:	cd b7       	in	r28, 0x3d	; 61
     22e:	de b7       	in	r29, 0x3e	; 62
     230:	27 97       	sbiw	r28, 0x07	; 7
     232:	0f b6       	in	r0, 0x3f	; 63
     234:	f8 94       	cli
     236:	de bf       	out	0x3e, r29	; 62
     238:	0f be       	out	0x3f, r0	; 63
     23a:	cd bf       	out	0x3d, r28	; 61
     23c:	08 2f       	mov	r16, r24
     23e:	14 2f       	mov	r17, r20
     240:	f5 2e       	mov	r15, r21
     242:	e6 2e       	mov	r14, r22
     244:	d7 2e       	mov	r13, r23
	BYTE n, d, buf[6];


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
     246:	87 ff       	sbrs	r24, 7
     248:	09 c0       	rjmp	.+18     	; 0x25c <send_cmd+0x3e>
		cmd &= 0x7F;
		n = send_cmd(CMD55, 0);
     24a:	87 e3       	ldi	r24, 0x37	; 55
     24c:	40 e0       	ldi	r20, 0x00	; 0
     24e:	50 e0       	ldi	r21, 0x00	; 0
     250:	ba 01       	movw	r22, r20
     252:	0e 94 0f 01 	call	0x21e	; 0x21e <send_cmd>
		if (n > 1) return n;
     256:	82 30       	cpi	r24, 0x02	; 2
     258:	c8 f5       	brcc	.+114    	; 0x2cc <send_cmd+0xae>
{
	BYTE n, d, buf[6];


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
     25a:	0f 77       	andi	r16, 0x7F	; 127
		n = send_cmd(CMD55, 0);
		if (n > 1) return n;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
     25c:	0c 30       	cpi	r16, 0x0C	; 12
     25e:	31 f0       	breq	.+12     	; 0x26c <send_cmd+0x4e>
		deselect();
     260:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <deselect>
		if (!select()) return 0xFF;
     264:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <select>
     268:	00 97       	sbiw	r24, 0x00	; 0
     26a:	79 f1       	breq	.+94     	; 0x2ca <send_cmd+0xac>
	}

	/* Send a command packet */
	buf[0] = 0x40 | cmd;			/* Start + Command index */
     26c:	80 2f       	mov	r24, r16
     26e:	80 64       	ori	r24, 0x40	; 64
     270:	8a 83       	std	Y+2, r24	; 0x02
	buf[1] = (BYTE)(arg >> 24);		/* Argument[31..24] */
     272:	db 82       	std	Y+3, r13	; 0x03
	buf[2] = (BYTE)(arg >> 16);		/* Argument[23..16] */
     274:	ec 82       	std	Y+4, r14	; 0x04
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
     276:	fd 82       	std	Y+5, r15	; 0x05
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
     278:	1e 83       	std	Y+6, r17	; 0x06
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
     27a:	00 23       	and	r16, r16
     27c:	21 f0       	breq	.+8      	; 0x286 <send_cmd+0x68>
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
     27e:	08 30       	cpi	r16, 0x08	; 8
     280:	21 f0       	breq	.+8      	; 0x28a <send_cmd+0x6c>
	buf[0] = 0x40 | cmd;			/* Start + Command index */
	buf[1] = (BYTE)(arg >> 24);		/* Argument[31..24] */
	buf[2] = (BYTE)(arg >> 16);		/* Argument[23..16] */
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
	n = 0x01;						/* Dummy CRC + Stop */
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	03 c0       	rjmp	.+6      	; 0x28c <send_cmd+0x6e>
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
     286:	85 e9       	ldi	r24, 0x95	; 149
     288:	01 c0       	rjmp	.+2      	; 0x28c <send_cmd+0x6e>
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
     28a:	87 e8       	ldi	r24, 0x87	; 135
	buf[5] = n;
     28c:	8f 83       	std	Y+7, r24	; 0x07
	xmit_mmc(buf, 6);
     28e:	ce 01       	movw	r24, r28
     290:	02 96       	adiw	r24, 0x02	; 2
     292:	66 e0       	ldi	r22, 0x06	; 6
     294:	70 e0       	ldi	r23, 0x00	; 0
     296:	0e 94 fe 00 	call	0x1fc	; 0x1fc <xmit_mmc>

	/* Receive command response */
	if (cmd == CMD12) rcvr_mmc(&d, 1);	/* Skip a stuff byte when stop reading */
     29a:	0c 30       	cpi	r16, 0x0C	; 12
     29c:	31 f4       	brne	.+12     	; 0x2aa <send_cmd+0x8c>
     29e:	ce 01       	movw	r24, r28
     2a0:	01 96       	adiw	r24, 0x01	; 1
     2a2:	61 e0       	ldi	r22, 0x01	; 1
     2a4:	70 e0       	ldi	r23, 0x00	; 0
     2a6:	0e 94 4e 00 	call	0x9c	; 0x9c <rcvr_mmc>
	buf[2] = (BYTE)(arg >> 16);		/* Argument[23..16] */
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
     2aa:	8a e0       	ldi	r24, 0x0A	; 10
     2ac:	f8 2e       	mov	r15, r24

	/* Receive command response */
	if (cmd == CMD12) rcvr_mmc(&d, 1);	/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		rcvr_mmc(&d, 1);
     2ae:	8e 01       	movw	r16, r28
     2b0:	0f 5f       	subi	r16, 0xFF	; 255
     2b2:	1f 4f       	sbci	r17, 0xFF	; 255
     2b4:	c8 01       	movw	r24, r16
     2b6:	61 e0       	ldi	r22, 0x01	; 1
     2b8:	70 e0       	ldi	r23, 0x00	; 0
     2ba:	0e 94 4e 00 	call	0x9c	; 0x9c <rcvr_mmc>
	while ((d & 0x80) && --n);
     2be:	89 81       	ldd	r24, Y+1	; 0x01
     2c0:	87 ff       	sbrs	r24, 7
     2c2:	04 c0       	rjmp	.+8      	; 0x2cc <send_cmd+0xae>
     2c4:	fa 94       	dec	r15
     2c6:	b1 f7       	brne	.-20     	; 0x2b4 <send_cmd+0x96>
     2c8:	01 c0       	rjmp	.+2      	; 0x2cc <send_cmd+0xae>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
		deselect();
		if (!select()) return 0xFF;
     2ca:	8f ef       	ldi	r24, 0xFF	; 255
	do
		rcvr_mmc(&d, 1);
	while ((d & 0x80) && --n);

	return d;			/* Return with the response value */
}
     2cc:	27 96       	adiw	r28, 0x07	; 7
     2ce:	0f b6       	in	r0, 0x3f	; 63
     2d0:	f8 94       	cli
     2d2:	de bf       	out	0x3e, r29	; 62
     2d4:	0f be       	out	0x3f, r0	; 63
     2d6:	cd bf       	out	0x3d, r28	; 61
     2d8:	cf 91       	pop	r28
     2da:	df 91       	pop	r29
     2dc:	1f 91       	pop	r17
     2de:	0f 91       	pop	r16
     2e0:	ff 90       	pop	r15
     2e2:	ef 90       	pop	r14
     2e4:	df 90       	pop	r13
     2e6:	08 95       	ret

000002e8 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
     2e8:	df 92       	push	r13
     2ea:	ef 92       	push	r14
     2ec:	ff 92       	push	r15
     2ee:	0f 93       	push	r16
     2f0:	1f 93       	push	r17
     2f2:	df 93       	push	r29
     2f4:	cf 93       	push	r28
     2f6:	00 d0       	rcall	.+0      	; 0x2f8 <xmit_datablock+0x10>
     2f8:	cd b7       	in	r28, 0x3d	; 61
     2fa:	de b7       	in	r29, 0x3e	; 62
     2fc:	7c 01       	movw	r14, r24
     2fe:	d6 2e       	mov	r13, r22
	BYTE d[2];


	if (!wait_ready()) return 0;
     300:	0e 94 60 00 	call	0xc0	; 0xc0 <wait_ready>
     304:	00 97       	sbiw	r24, 0x00	; 0
     306:	09 f1       	breq	.+66     	; 0x34a <xmit_datablock+0x62>

	d[0] = token;
     308:	d9 82       	std	Y+1, r13	; 0x01
	xmit_mmc(d, 1);				/* Xmit a token */
     30a:	8e 01       	movw	r16, r28
     30c:	0f 5f       	subi	r16, 0xFF	; 255
     30e:	1f 4f       	sbci	r17, 0xFF	; 255
     310:	c8 01       	movw	r24, r16
     312:	61 e0       	ldi	r22, 0x01	; 1
     314:	70 e0       	ldi	r23, 0x00	; 0
     316:	0e 94 fe 00 	call	0x1fc	; 0x1fc <xmit_mmc>
	if (token != 0xFD) {		/* Is it data token? */
     31a:	8d 2d       	mov	r24, r13
     31c:	8d 3f       	cpi	r24, 0xFD	; 253
     31e:	c1 f0       	breq	.+48     	; 0x350 <xmit_datablock+0x68>
		xmit_mmc(buff, 512);	/* Xmit the 512 byte data block to MMC */
     320:	c7 01       	movw	r24, r14
     322:	60 e0       	ldi	r22, 0x00	; 0
     324:	72 e0       	ldi	r23, 0x02	; 2
     326:	0e 94 fe 00 	call	0x1fc	; 0x1fc <xmit_mmc>
		rcvr_mmc(d, 2);			/* Xmit dummy CRC (0xFF,0xFF) */
     32a:	c8 01       	movw	r24, r16
     32c:	62 e0       	ldi	r22, 0x02	; 2
     32e:	70 e0       	ldi	r23, 0x00	; 0
     330:	0e 94 4e 00 	call	0x9c	; 0x9c <rcvr_mmc>
		rcvr_mmc(d, 1);			/* Receive data response */
     334:	c8 01       	movw	r24, r16
     336:	61 e0       	ldi	r22, 0x01	; 1
     338:	70 e0       	ldi	r23, 0x00	; 0
     33a:	0e 94 4e 00 	call	0x9c	; 0x9c <rcvr_mmc>
		if ((d[0] & 0x1F) != 0x05)	/* If not accepted, return with error */
     33e:	89 81       	ldd	r24, Y+1	; 0x01
     340:	8f 71       	andi	r24, 0x1F	; 31
/*-----------------------------------------------------------------------*/
/* Send a data packet to the card                                        */
/*-----------------------------------------------------------------------*/

static
int xmit_datablock (	/* 1:OK, 0:Failed */
     342:	21 e0       	ldi	r18, 0x01	; 1
     344:	30 e0       	ldi	r19, 0x00	; 0
     346:	85 30       	cpi	r24, 0x05	; 5
     348:	29 f0       	breq	.+10     	; 0x354 <xmit_datablock+0x6c>
)
{
	BYTE d[2];


	if (!wait_ready()) return 0;
     34a:	20 e0       	ldi	r18, 0x00	; 0
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	02 c0       	rjmp	.+4      	; 0x354 <xmit_datablock+0x6c>
		rcvr_mmc(d, 1);			/* Receive data response */
		if ((d[0] & 0x1F) != 0x05)	/* If not accepted, return with error */
			return 0;
	}

	return 1;
     350:	21 e0       	ldi	r18, 0x01	; 1
     352:	30 e0       	ldi	r19, 0x00	; 0
}
     354:	c9 01       	movw	r24, r18
     356:	0f 90       	pop	r0
     358:	0f 90       	pop	r0
     35a:	cf 91       	pop	r28
     35c:	df 91       	pop	r29
     35e:	1f 91       	pop	r17
     360:	0f 91       	pop	r16
     362:	ff 90       	pop	r15
     364:	ef 90       	pop	r14
     366:	df 90       	pop	r13
     368:	08 95       	ret

0000036a <disk_status>:

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
     36a:	88 23       	and	r24, r24
     36c:	19 f4       	brne	.+6      	; 0x374 <disk_status+0xa>

	return Stat;
     36e:	80 91 60 00 	lds	r24, 0x0060
     372:	08 95       	ret

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
     374:	81 e0       	ldi	r24, 0x01	; 1

	return Stat;
}
     376:	08 95       	ret

00000378 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
     378:	ff 92       	push	r15
     37a:	0f 93       	push	r16
     37c:	1f 93       	push	r17
     37e:	df 93       	push	r29
     380:	cf 93       	push	r28
     382:	00 d0       	rcall	.+0      	; 0x384 <disk_initialize+0xc>
     384:	00 d0       	rcall	.+0      	; 0x386 <disk_initialize+0xe>
     386:	00 d0       	rcall	.+0      	; 0x388 <disk_initialize+0x10>
     388:	cd b7       	in	r28, 0x3d	; 61
     38a:	de b7       	in	r29, 0x3e	; 62
	BYTE n, ty, cmd, buf[4];
	UINT tmr;
	DSTATUS s;


	if (drv) return RES_NOTRDY;
     38c:	88 23       	and	r24, r24
     38e:	09 f0       	breq	.+2      	; 0x392 <disk_initialize+0x1a>
     390:	9f c0       	rjmp	.+318    	; 0x4d0 <__stack+0x71>
     392:	83 ec       	ldi	r24, 0xC3	; 195
     394:	99 e0       	ldi	r25, 0x09	; 9
     396:	01 97       	sbiw	r24, 0x01	; 1
     398:	f1 f7       	brne	.-4      	; 0x396 <disk_initialize+0x1e>
     39a:	00 c0       	rjmp	.+0      	; 0x39c <disk_initialize+0x24>
     39c:	00 00       	nop

	_delay_us(10000);			/* 10ms */
	CS_INIT(); CS_H();		/* Initialize port pin tied to CS */
     39e:	bb 9a       	sbi	0x17, 3	; 23
     3a0:	c3 9a       	sbi	0x18, 3	; 24
	CK_INIT(); CK_L();		/* Initialize port pin tied to SCLK */
     3a2:	be 9a       	sbi	0x17, 6	; 23
     3a4:	c6 98       	cbi	0x18, 6	; 24
	DI_INIT();				/* Initialize port pin tied to DI */
     3a6:	bc 9a       	sbi	0x17, 4	; 23
     3a8:	9a e0       	ldi	r25, 0x0A	; 10
     3aa:	f9 2e       	mov	r15, r25
	DO_INIT();				/* Initialize port pin tied to DO */

	for (n = 10; n; n--) rcvr_mmc(buf, 1);	/* Apply 80 dummy clocks and the card gets ready to receive command */
     3ac:	8e 01       	movw	r16, r28
     3ae:	0f 5f       	subi	r16, 0xFF	; 255
     3b0:	1f 4f       	sbci	r17, 0xFF	; 255
     3b2:	c8 01       	movw	r24, r16
     3b4:	61 e0       	ldi	r22, 0x01	; 1
     3b6:	70 e0       	ldi	r23, 0x00	; 0
     3b8:	0e 94 4e 00 	call	0x9c	; 0x9c <rcvr_mmc>
     3bc:	fa 94       	dec	r15
     3be:	c9 f7       	brne	.-14     	; 0x3b2 <disk_initialize+0x3a>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
     3c0:	80 e0       	ldi	r24, 0x00	; 0
     3c2:	40 e0       	ldi	r20, 0x00	; 0
     3c4:	50 e0       	ldi	r21, 0x00	; 0
     3c6:	ba 01       	movw	r22, r20
     3c8:	0e 94 0f 01 	call	0x21e	; 0x21e <send_cmd>
     3cc:	81 30       	cpi	r24, 0x01	; 1
     3ce:	09 f0       	breq	.+2      	; 0x3d2 <disk_initialize+0x5a>
     3d0:	72 c0       	rjmp	.+228    	; 0x4b6 <__stack+0x57>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
     3d2:	88 e0       	ldi	r24, 0x08	; 8
     3d4:	4a ea       	ldi	r20, 0xAA	; 170
     3d6:	51 e0       	ldi	r21, 0x01	; 1
     3d8:	60 e0       	ldi	r22, 0x00	; 0
     3da:	70 e0       	ldi	r23, 0x00	; 0
     3dc:	0e 94 0f 01 	call	0x21e	; 0x21e <send_cmd>
     3e0:	81 30       	cpi	r24, 0x01	; 1
     3e2:	b1 f5       	brne	.+108    	; 0x450 <disk_initialize+0xd8>
			rcvr_mmc(buf, 4);							/* Get trailing return value of R7 resp */
     3e4:	c8 01       	movw	r24, r16
     3e6:	64 e0       	ldi	r22, 0x04	; 4
     3e8:	70 e0       	ldi	r23, 0x00	; 0
     3ea:	0e 94 4e 00 	call	0x9c	; 0x9c <rcvr_mmc>
			if (buf[2] == 0x01 && buf[3] == 0xAA) {		/* The card can work at vdd range of 2.7-3.6V */
     3ee:	8b 81       	ldd	r24, Y+3	; 0x03
     3f0:	81 30       	cpi	r24, 0x01	; 1
     3f2:	09 f0       	breq	.+2      	; 0x3f6 <disk_initialize+0x7e>
     3f4:	60 c0       	rjmp	.+192    	; 0x4b6 <__stack+0x57>
     3f6:	8c 81       	ldd	r24, Y+4	; 0x04
     3f8:	8a 3a       	cpi	r24, 0xAA	; 170
     3fa:	09 f0       	breq	.+2      	; 0x3fe <disk_initialize+0x86>
     3fc:	5c c0       	rjmp	.+184    	; 0x4b6 <__stack+0x57>
     3fe:	08 ee       	ldi	r16, 0xE8	; 232
     400:	13 e0       	ldi	r17, 0x03	; 3
				for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state (ACMD41 with HCS bit) */
					if (send_cmd(ACMD41, 1UL << 30) == 0) break;
     402:	89 ea       	ldi	r24, 0xA9	; 169
     404:	40 e0       	ldi	r20, 0x00	; 0
     406:	50 e0       	ldi	r21, 0x00	; 0
     408:	60 e0       	ldi	r22, 0x00	; 0
     40a:	70 e4       	ldi	r23, 0x40	; 64
     40c:	0e 94 0f 01 	call	0x21e	; 0x21e <send_cmd>
     410:	88 23       	and	r24, r24
     412:	51 f0       	breq	.+20     	; 0x428 <disk_initialize+0xb0>
     414:	e9 ef       	ldi	r30, 0xF9	; 249
     416:	f0 e0       	ldi	r31, 0x00	; 0
     418:	31 97       	sbiw	r30, 0x01	; 1
     41a:	f1 f7       	brne	.-4      	; 0x418 <disk_initialize+0xa0>
     41c:	00 c0       	rjmp	.+0      	; 0x41e <disk_initialize+0xa6>
     41e:	00 00       	nop
     420:	01 50       	subi	r16, 0x01	; 1
     422:	10 40       	sbci	r17, 0x00	; 0
	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			rcvr_mmc(buf, 4);							/* Get trailing return value of R7 resp */
			if (buf[2] == 0x01 && buf[3] == 0xAA) {		/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state (ACMD41 with HCS bit) */
     424:	71 f7       	brne	.-36     	; 0x402 <disk_initialize+0x8a>
     426:	47 c0       	rjmp	.+142    	; 0x4b6 <__stack+0x57>
					if (send_cmd(ACMD41, 1UL << 30) == 0) break;
					_delay_us(1000);
				}
				if (tmr && send_cmd(CMD58, 0) == 0) {	/* Check CCS bit in the OCR */
     428:	8a e3       	ldi	r24, 0x3A	; 58
     42a:	40 e0       	ldi	r20, 0x00	; 0
     42c:	50 e0       	ldi	r21, 0x00	; 0
     42e:	ba 01       	movw	r22, r20
     430:	0e 94 0f 01 	call	0x21e	; 0x21e <send_cmd>
     434:	88 23       	and	r24, r24
     436:	09 f0       	breq	.+2      	; 0x43a <disk_initialize+0xc2>
     438:	3e c0       	rjmp	.+124    	; 0x4b6 <__stack+0x57>
					rcvr_mmc(buf, 4);
     43a:	ce 01       	movw	r24, r28
     43c:	01 96       	adiw	r24, 0x01	; 1
     43e:	64 e0       	ldi	r22, 0x04	; 4
     440:	70 e0       	ldi	r23, 0x00	; 0
     442:	0e 94 4e 00 	call	0x9c	; 0x9c <rcvr_mmc>
					ty = (buf[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
     446:	89 81       	ldd	r24, Y+1	; 0x01
     448:	86 ff       	sbrs	r24, 6
     44a:	33 c0       	rjmp	.+102    	; 0x4b2 <__stack+0x53>
     44c:	9c e0       	ldi	r25, 0x0C	; 12
     44e:	34 c0       	rjmp	.+104    	; 0x4b8 <__stack+0x59>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
     450:	89 ea       	ldi	r24, 0xA9	; 169
     452:	40 e0       	ldi	r20, 0x00	; 0
     454:	50 e0       	ldi	r21, 0x00	; 0
     456:	ba 01       	movw	r22, r20
     458:	0e 94 0f 01 	call	0x21e	; 0x21e <send_cmd>
     45c:	82 30       	cpi	r24, 0x02	; 2
     45e:	18 f4       	brcc	.+6      	; 0x466 <__stack+0x7>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
     460:	29 ea       	ldi	r18, 0xA9	; 169
     462:	92 e0       	ldi	r25, 0x02	; 2
     464:	02 c0       	rjmp	.+4      	; 0x46a <__stack+0xb>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
     466:	21 e0       	ldi	r18, 0x01	; 1
     468:	91 e0       	ldi	r25, 0x01	; 1
     46a:	08 ee       	ldi	r16, 0xE8	; 232
     46c:	13 e0       	ldi	r17, 0x03	; 3
			}
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
				if (send_cmd(cmd, 0) == 0) break;
     46e:	82 2f       	mov	r24, r18
     470:	40 e0       	ldi	r20, 0x00	; 0
     472:	50 e0       	ldi	r21, 0x00	; 0
     474:	ba 01       	movw	r22, r20
     476:	2d 83       	std	Y+5, r18	; 0x05
     478:	9e 83       	std	Y+6, r25	; 0x06
     47a:	0e 94 0f 01 	call	0x21e	; 0x21e <send_cmd>
     47e:	2d 81       	ldd	r18, Y+5	; 0x05
     480:	9e 81       	ldd	r25, Y+6	; 0x06
     482:	88 23       	and	r24, r24
     484:	51 f0       	breq	.+20     	; 0x49a <__stack+0x3b>
     486:	e9 ef       	ldi	r30, 0xF9	; 249
     488:	f0 e0       	ldi	r31, 0x00	; 0
     48a:	31 97       	sbiw	r30, 0x01	; 1
     48c:	f1 f7       	brne	.-4      	; 0x48a <__stack+0x2b>
     48e:	00 c0       	rjmp	.+0      	; 0x490 <__stack+0x31>
     490:	00 00       	nop
     492:	01 50       	subi	r16, 0x01	; 1
     494:	10 40       	sbci	r17, 0x00	; 0
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
     496:	59 f7       	brne	.-42     	; 0x46e <__stack+0xf>
     498:	0e c0       	rjmp	.+28     	; 0x4b6 <__stack+0x57>
				if (send_cmd(cmd, 0) == 0) break;
				_delay_us(1000);
			}
			if (!tmr || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
     49a:	80 e1       	ldi	r24, 0x10	; 16
     49c:	40 e0       	ldi	r20, 0x00	; 0
     49e:	52 e0       	ldi	r21, 0x02	; 2
     4a0:	60 e0       	ldi	r22, 0x00	; 0
     4a2:	70 e0       	ldi	r23, 0x00	; 0
     4a4:	9e 83       	std	Y+6, r25	; 0x06
     4a6:	0e 94 0f 01 	call	0x21e	; 0x21e <send_cmd>
     4aa:	9e 81       	ldd	r25, Y+6	; 0x06
     4ac:	88 23       	and	r24, r24
     4ae:	19 f4       	brne	.+6      	; 0x4b6 <__stack+0x57>
     4b0:	03 c0       	rjmp	.+6      	; 0x4b8 <__stack+0x59>
					if (send_cmd(ACMD41, 1UL << 30) == 0) break;
					_delay_us(1000);
				}
				if (tmr && send_cmd(CMD58, 0) == 0) {	/* Check CCS bit in the OCR */
					rcvr_mmc(buf, 4);
					ty = (buf[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
     4b2:	94 e0       	ldi	r25, 0x04	; 4
     4b4:	01 c0       	rjmp	.+2      	; 0x4b8 <__stack+0x59>
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
				if (send_cmd(cmd, 0) == 0) break;
				_delay_us(1000);
			}
			if (!tmr || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
     4b6:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	CardType = ty;
     4b8:	90 93 8a 00 	sts	0x008A, r25
	s = ty ? 0 : STA_NOINIT;
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	91 11       	cpse	r25, r1
     4c0:	80 e0       	ldi	r24, 0x00	; 0
	Stat = s;
     4c2:	80 93 60 00 	sts	0x0060, r24

	deselect();
     4c6:	8d 83       	std	Y+5, r24	; 0x05
     4c8:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <deselect>

	return s;
     4cc:	8d 81       	ldd	r24, Y+5	; 0x05
     4ce:	01 c0       	rjmp	.+2      	; 0x4d2 <__stack+0x73>
	BYTE n, ty, cmd, buf[4];
	UINT tmr;
	DSTATUS s;


	if (drv) return RES_NOTRDY;
     4d0:	83 e0       	ldi	r24, 0x03	; 3
	Stat = s;

	deselect();

	return s;
}
     4d2:	26 96       	adiw	r28, 0x06	; 6
     4d4:	0f b6       	in	r0, 0x3f	; 63
     4d6:	f8 94       	cli
     4d8:	de bf       	out	0x3e, r29	; 62
     4da:	0f be       	out	0x3f, r0	; 63
     4dc:	cd bf       	out	0x3d, r28	; 61
     4de:	cf 91       	pop	r28
     4e0:	df 91       	pop	r29
     4e2:	1f 91       	pop	r17
     4e4:	0f 91       	pop	r16
     4e6:	ff 90       	pop	r15
     4e8:	08 95       	ret

000004ea <disk_read>:
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
     4ea:	ff 92       	push	r15
     4ec:	0f 93       	push	r16
     4ee:	1f 93       	push	r17
     4f0:	cf 93       	push	r28
     4f2:	df 93       	push	r29
     4f4:	eb 01       	movw	r28, r22
     4f6:	ba 01       	movw	r22, r20
     4f8:	a9 01       	movw	r20, r18

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
     4fa:	88 23       	and	r24, r24
     4fc:	19 f4       	brne	.+6      	; 0x504 <disk_read+0x1a>

	return Stat;
     4fe:	80 91 60 00 	lds	r24, 0x0060
     502:	01 c0       	rjmp	.+2      	; 0x506 <disk_read+0x1c>

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
     504:	81 e0       	ldi	r24, 0x01	; 1
)
{
	BYTE cmd;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
     506:	80 fd       	sbrc	r24, 0
     508:	36 c0       	rjmp	.+108    	; 0x576 <disk_read+0x8c>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert LBA to byte address if needed */
     50a:	80 91 8a 00 	lds	r24, 0x008A
     50e:	83 fd       	sbrc	r24, 3
     510:	07 c0       	rjmp	.+14     	; 0x520 <disk_read+0x36>
     512:	e9 e0       	ldi	r30, 0x09	; 9
     514:	44 0f       	add	r20, r20
     516:	55 1f       	adc	r21, r21
     518:	66 1f       	adc	r22, r22
     51a:	77 1f       	adc	r23, r23
     51c:	ea 95       	dec	r30
     51e:	d1 f7       	brne	.-12     	; 0x514 <disk_read+0x2a>

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
     520:	02 30       	cpi	r16, 0x02	; 2
     522:	11 05       	cpc	r17, r1
     524:	18 f0       	brcs	.+6      	; 0x52c <disk_read+0x42>
     526:	32 e1       	ldi	r19, 0x12	; 18
     528:	f3 2e       	mov	r15, r19
     52a:	02 c0       	rjmp	.+4      	; 0x530 <disk_read+0x46>
     52c:	21 e1       	ldi	r18, 0x11	; 17
     52e:	f2 2e       	mov	r15, r18
	if (send_cmd(cmd, sector) == 0) {
     530:	8f 2d       	mov	r24, r15
     532:	0e 94 0f 01 	call	0x21e	; 0x21e <send_cmd>
     536:	88 23       	and	r24, r24
     538:	b1 f4       	brne	.+44     	; 0x566 <disk_read+0x7c>
		do {
			if (!rcvr_datablock(buff, 512)) break;
     53a:	ce 01       	movw	r24, r28
     53c:	60 e0       	ldi	r22, 0x00	; 0
     53e:	72 e0       	ldi	r23, 0x02	; 2
     540:	0e 94 8e 00 	call	0x11c	; 0x11c <rcvr_datablock>
     544:	00 97       	sbiw	r24, 0x00	; 0
     546:	31 f0       	breq	.+12     	; 0x554 <disk_read+0x6a>
			buff += 512;
		} while (--count);
     548:	01 50       	subi	r16, 0x01	; 1
     54a:	10 40       	sbci	r17, 0x00	; 0
     54c:	19 f0       	breq	.+6      	; 0x554 <disk_read+0x6a>

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
	if (send_cmd(cmd, sector) == 0) {
		do {
			if (!rcvr_datablock(buff, 512)) break;
			buff += 512;
     54e:	c0 50       	subi	r28, 0x00	; 0
     550:	de 4f       	sbci	r29, 0xFE	; 254
     552:	f3 cf       	rjmp	.-26     	; 0x53a <disk_read+0x50>
		} while (--count);
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
     554:	8f 2d       	mov	r24, r15
     556:	82 31       	cpi	r24, 0x12	; 18
     558:	31 f4       	brne	.+12     	; 0x566 <disk_read+0x7c>
     55a:	8c e0       	ldi	r24, 0x0C	; 12
     55c:	40 e0       	ldi	r20, 0x00	; 0
     55e:	50 e0       	ldi	r21, 0x00	; 0
     560:	ba 01       	movw	r22, r20
     562:	0e 94 0f 01 	call	0x21e	; 0x21e <send_cmd>
	}
	deselect();
     566:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <deselect>

	return count ? RES_ERROR : RES_OK;
     56a:	81 e0       	ldi	r24, 0x01	; 1
     56c:	01 15       	cp	r16, r1
     56e:	11 05       	cpc	r17, r1
     570:	19 f4       	brne	.+6      	; 0x578 <disk_read+0x8e>
     572:	80 e0       	ldi	r24, 0x00	; 0
     574:	01 c0       	rjmp	.+2      	; 0x578 <disk_read+0x8e>
)
{
	BYTE cmd;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
     576:	83 e0       	ldi	r24, 0x03	; 3
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
     578:	df 91       	pop	r29
     57a:	cf 91       	pop	r28
     57c:	1f 91       	pop	r17
     57e:	0f 91       	pop	r16
     580:	ff 90       	pop	r15
     582:	08 95       	ret

00000584 <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
     584:	cf 92       	push	r12
     586:	df 92       	push	r13
     588:	ef 92       	push	r14
     58a:	ff 92       	push	r15
     58c:	0f 93       	push	r16
     58e:	1f 93       	push	r17
     590:	cf 93       	push	r28
     592:	df 93       	push	r29
     594:	eb 01       	movw	r28, r22
     596:	69 01       	movw	r12, r18
     598:	7a 01       	movw	r14, r20

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
     59a:	88 23       	and	r24, r24
     59c:	19 f4       	brne	.+6      	; 0x5a4 <disk_write+0x20>

	return Stat;
     59e:	80 91 60 00 	lds	r24, 0x0060
     5a2:	01 c0       	rjmp	.+2      	; 0x5a6 <disk_write+0x22>

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
     5a4:	81 e0       	ldi	r24, 0x01	; 1
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
     5a6:	80 fd       	sbrc	r24, 0
     5a8:	4f c0       	rjmp	.+158    	; 0x648 <disk_write+0xc4>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert LBA to byte address if needed */
     5aa:	80 91 8a 00 	lds	r24, 0x008A
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	83 fd       	sbrc	r24, 3
     5b2:	07 c0       	rjmp	.+14     	; 0x5c2 <disk_write+0x3e>
     5b4:	f9 e0       	ldi	r31, 0x09	; 9
     5b6:	cc 0c       	add	r12, r12
     5b8:	dd 1c       	adc	r13, r13
     5ba:	ee 1c       	adc	r14, r14
     5bc:	ff 1c       	adc	r15, r15
     5be:	fa 95       	dec	r31
     5c0:	d1 f7       	brne	.-12     	; 0x5b6 <disk_write+0x32>

	if (count == 1) {	/* Single block write */
     5c2:	01 30       	cpi	r16, 0x01	; 1
     5c4:	11 05       	cpc	r17, r1
     5c6:	71 f4       	brne	.+28     	; 0x5e4 <disk_write+0x60>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
     5c8:	88 e1       	ldi	r24, 0x18	; 24
     5ca:	b7 01       	movw	r22, r14
     5cc:	a6 01       	movw	r20, r12
     5ce:	0e 94 0f 01 	call	0x21e	; 0x21e <send_cmd>
     5d2:	88 23       	and	r24, r24
     5d4:	89 f5       	brne	.+98     	; 0x638 <disk_write+0xb4>
			&& xmit_datablock(buff, 0xFE))
     5d6:	ce 01       	movw	r24, r28
     5d8:	6e ef       	ldi	r22, 0xFE	; 254
     5da:	0e 94 74 01 	call	0x2e8	; 0x2e8 <xmit_datablock>
     5de:	00 97       	sbiw	r24, 0x00	; 0
     5e0:	31 f5       	brne	.+76     	; 0x62e <disk_write+0xaa>
     5e2:	2a c0       	rjmp	.+84     	; 0x638 <disk_write+0xb4>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
     5e4:	86 70       	andi	r24, 0x06	; 6
     5e6:	90 70       	andi	r25, 0x00	; 0
     5e8:	00 97       	sbiw	r24, 0x00	; 0
     5ea:	31 f0       	breq	.+12     	; 0x5f8 <disk_write+0x74>
     5ec:	a8 01       	movw	r20, r16
     5ee:	60 e0       	ldi	r22, 0x00	; 0
     5f0:	70 e0       	ldi	r23, 0x00	; 0
     5f2:	87 e9       	ldi	r24, 0x97	; 151
     5f4:	0e 94 0f 01 	call	0x21e	; 0x21e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
     5f8:	89 e1       	ldi	r24, 0x19	; 25
     5fa:	b7 01       	movw	r22, r14
     5fc:	a6 01       	movw	r20, r12
     5fe:	0e 94 0f 01 	call	0x21e	; 0x21e <send_cmd>
     602:	88 23       	and	r24, r24
     604:	c9 f4       	brne	.+50     	; 0x638 <disk_write+0xb4>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
     606:	ce 01       	movw	r24, r28
     608:	6c ef       	ldi	r22, 0xFC	; 252
     60a:	0e 94 74 01 	call	0x2e8	; 0x2e8 <xmit_datablock>
     60e:	00 97       	sbiw	r24, 0x00	; 0
     610:	31 f0       	breq	.+12     	; 0x61e <disk_write+0x9a>
				buff += 512;
			} while (--count);
     612:	01 50       	subi	r16, 0x01	; 1
     614:	10 40       	sbci	r17, 0x00	; 0
     616:	19 f0       	breq	.+6      	; 0x61e <disk_write+0x9a>
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
				buff += 512;
     618:	c0 50       	subi	r28, 0x00	; 0
     61a:	de 4f       	sbci	r29, 0xFE	; 254
     61c:	f4 cf       	rjmp	.-24     	; 0x606 <disk_write+0x82>
			} while (--count);
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	6d ef       	ldi	r22, 0xFD	; 253
     624:	0e 94 74 01 	call	0x2e8	; 0x2e8 <xmit_datablock>
     628:	00 97       	sbiw	r24, 0x00	; 0
     62a:	21 f0       	breq	.+8      	; 0x634 <disk_write+0xb0>
     62c:	05 c0       	rjmp	.+10     	; 0x638 <disk_write+0xb4>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert LBA to byte address if needed */

	if (count == 1) {	/* Single block write */
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
			&& xmit_datablock(buff, 0xFE))
			count = 0;
     62e:	00 e0       	ldi	r16, 0x00	; 0
     630:	10 e0       	ldi	r17, 0x00	; 0
     632:	02 c0       	rjmp	.+4      	; 0x638 <disk_write+0xb4>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
				buff += 512;
			} while (--count);
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
				count = 1;
     634:	01 e0       	ldi	r16, 0x01	; 1
     636:	10 e0       	ldi	r17, 0x00	; 0
		}
	}
	deselect();
     638:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <deselect>

	return count ? RES_ERROR : RES_OK;
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	01 15       	cp	r16, r1
     640:	11 05       	cpc	r17, r1
     642:	19 f4       	brne	.+6      	; 0x64a <disk_write+0xc6>
     644:	80 e0       	ldi	r24, 0x00	; 0
     646:	01 c0       	rjmp	.+2      	; 0x64a <disk_write+0xc6>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
     648:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
     64a:	df 91       	pop	r29
     64c:	cf 91       	pop	r28
     64e:	1f 91       	pop	r17
     650:	0f 91       	pop	r16
     652:	ff 90       	pop	r15
     654:	ef 90       	pop	r14
     656:	df 90       	pop	r13
     658:	cf 90       	pop	r12
     65a:	08 95       	ret

0000065c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive nmuber (0) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
     65c:	0f 93       	push	r16
     65e:	1f 93       	push	r17
     660:	df 93       	push	r29
     662:	cf 93       	push	r28
     664:	cd b7       	in	r28, 0x3d	; 61
     666:	de b7       	in	r29, 0x3e	; 62
     668:	61 97       	sbiw	r28, 0x11	; 17
     66a:	0f b6       	in	r0, 0x3f	; 63
     66c:	f8 94       	cli
     66e:	de bf       	out	0x3e, r29	; 62
     670:	0f be       	out	0x3f, r0	; 63
     672:	cd bf       	out	0x3d, r28	; 61
     674:	8a 01       	movw	r16, r20

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
     676:	88 23       	and	r24, r24
     678:	19 f4       	brne	.+6      	; 0x680 <disk_ioctl+0x24>

	return Stat;
     67a:	80 91 60 00 	lds	r24, 0x0060
     67e:	01 c0       	rjmp	.+2      	; 0x682 <disk_ioctl+0x26>

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
     680:	81 e0       	ldi	r24, 0x01	; 1
	DRESULT res;
	BYTE n, csd[16];
	DWORD cs;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;	/* Check if card is in the socket */
     682:	80 fd       	sbrc	r24, 0
     684:	8b c0       	rjmp	.+278    	; 0x79c <disk_ioctl+0x140>

	res = RES_ERROR;
	switch (ctrl) {
     686:	61 30       	cpi	r22, 0x01	; 1
     688:	61 f0       	breq	.+24     	; 0x6a2 <disk_ioctl+0x46>
     68a:	61 30       	cpi	r22, 0x01	; 1
     68c:	20 f0       	brcs	.+8      	; 0x696 <disk_ioctl+0x3a>
     68e:	63 30       	cpi	r22, 0x03	; 3
     690:	09 f0       	breq	.+2      	; 0x694 <disk_ioctl+0x38>
     692:	7c c0       	rjmp	.+248    	; 0x78c <disk_ioctl+0x130>
     694:	76 c0       	rjmp	.+236    	; 0x782 <disk_ioctl+0x126>
		case CTRL_SYNC :		/* Make sure that no pending write process */
			if (select()) res = RES_OK;
     696:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <select>
     69a:	00 97       	sbiw	r24, 0x00	; 0
     69c:	09 f0       	breq	.+2      	; 0x6a0 <disk_ioctl+0x44>
     69e:	6f c0       	rjmp	.+222    	; 0x77e <disk_ioctl+0x122>
     6a0:	77 c0       	rjmp	.+238    	; 0x790 <disk_ioctl+0x134>
			break;

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
     6a2:	89 e0       	ldi	r24, 0x09	; 9
     6a4:	40 e0       	ldi	r20, 0x00	; 0
     6a6:	50 e0       	ldi	r21, 0x00	; 0
     6a8:	ba 01       	movw	r22, r20
     6aa:	0e 94 0f 01 	call	0x21e	; 0x21e <send_cmd>
     6ae:	88 23       	and	r24, r24
     6b0:	09 f0       	breq	.+2      	; 0x6b4 <disk_ioctl+0x58>
     6b2:	6e c0       	rjmp	.+220    	; 0x790 <disk_ioctl+0x134>
     6b4:	ce 01       	movw	r24, r28
     6b6:	01 96       	adiw	r24, 0x01	; 1
     6b8:	60 e1       	ldi	r22, 0x10	; 16
     6ba:	70 e0       	ldi	r23, 0x00	; 0
     6bc:	0e 94 8e 00 	call	0x11c	; 0x11c <rcvr_datablock>
     6c0:	00 97       	sbiw	r24, 0x00	; 0
     6c2:	09 f4       	brne	.+2      	; 0x6c6 <disk_ioctl+0x6a>
     6c4:	65 c0       	rjmp	.+202    	; 0x790 <disk_ioctl+0x134>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
     6c6:	99 81       	ldd	r25, Y+1	; 0x01
     6c8:	92 95       	swap	r25
     6ca:	96 95       	lsr	r25
     6cc:	96 95       	lsr	r25
     6ce:	93 70       	andi	r25, 0x03	; 3
     6d0:	88 85       	ldd	r24, Y+8	; 0x08
     6d2:	49 85       	ldd	r20, Y+9	; 0x09
     6d4:	5a 85       	ldd	r21, Y+10	; 0x0a
     6d6:	91 30       	cpi	r25, 0x01	; 1
     6d8:	f9 f4       	brne	.+62     	; 0x718 <disk_ioctl+0xbc>
					cs = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	a0 e0       	ldi	r26, 0x00	; 0
     6de:	b0 e0       	ldi	r27, 0x00	; 0
     6e0:	8f 73       	andi	r24, 0x3F	; 63
     6e2:	90 70       	andi	r25, 0x00	; 0
     6e4:	a0 70       	andi	r26, 0x00	; 0
     6e6:	b0 70       	andi	r27, 0x00	; 0
     6e8:	dc 01       	movw	r26, r24
     6ea:	99 27       	eor	r25, r25
     6ec:	88 27       	eor	r24, r24
     6ee:	01 96       	adiw	r24, 0x01	; 1
     6f0:	a1 1d       	adc	r26, r1
     6f2:	b1 1d       	adc	r27, r1
     6f4:	34 2f       	mov	r19, r20
     6f6:	20 e0       	ldi	r18, 0x00	; 0
     6f8:	25 0f       	add	r18, r21
     6fa:	31 1d       	adc	r19, r1
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	82 0f       	add	r24, r18
     702:	93 1f       	adc	r25, r19
     704:	a4 1f       	adc	r26, r20
     706:	b5 1f       	adc	r27, r21
					*(DWORD*)buff = cs << 10;
     708:	2a e0       	ldi	r18, 0x0A	; 10
     70a:	88 0f       	add	r24, r24
     70c:	99 1f       	adc	r25, r25
     70e:	aa 1f       	adc	r26, r26
     710:	bb 1f       	adc	r27, r27
     712:	2a 95       	dec	r18
     714:	d1 f7       	brne	.-12     	; 0x70a <disk_ioctl+0xae>
     716:	2e c0       	rjmp	.+92     	; 0x774 <disk_ioctl+0x118>
				} else {					/* SDC ver 1.XX or MMC */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
     718:	42 95       	swap	r20
     71a:	46 95       	lsr	r20
     71c:	46 95       	lsr	r20
     71e:	43 70       	andi	r20, 0x03	; 3
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	88 0f       	add	r24, r24
     724:	99 1f       	adc	r25, r25
     726:	88 0f       	add	r24, r24
     728:	99 1f       	adc	r25, r25
     72a:	84 0f       	add	r24, r20
     72c:	91 1d       	adc	r25, r1
     72e:	01 96       	adiw	r24, 0x01	; 1
     730:	2f 81       	ldd	r18, Y+7	; 0x07
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	23 70       	andi	r18, 0x03	; 3
     736:	30 70       	andi	r19, 0x00	; 0
     738:	32 2f       	mov	r19, r18
     73a:	22 27       	eor	r18, r18
     73c:	33 0f       	add	r19, r19
     73e:	33 0f       	add	r19, r19
     740:	82 0f       	add	r24, r18
     742:	93 1f       	adc	r25, r19
     744:	a0 e0       	ldi	r26, 0x00	; 0
     746:	b0 e0       	ldi	r27, 0x00	; 0
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
					cs = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
					*(DWORD*)buff = cs << 10;
				} else {					/* SDC ver 1.XX or MMC */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
     748:	2e 81       	ldd	r18, Y+6	; 0x06
     74a:	2f 70       	andi	r18, 0x0F	; 15
     74c:	4b 85       	ldd	r20, Y+11	; 0x0b
     74e:	44 1f       	adc	r20, r20
     750:	44 27       	eor	r20, r20
     752:	44 1f       	adc	r20, r20
     754:	24 0f       	add	r18, r20
     756:	2e 5f       	subi	r18, 0xFE	; 254
     758:	35 2f       	mov	r19, r21
     75a:	33 70       	andi	r19, 0x03	; 3
     75c:	33 0f       	add	r19, r19
     75e:	23 0f       	add	r18, r19
					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = cs << (n - 9);
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	29 50       	subi	r18, 0x09	; 9
     764:	30 40       	sbci	r19, 0x00	; 0
     766:	04 c0       	rjmp	.+8      	; 0x770 <disk_ioctl+0x114>
     768:	88 0f       	add	r24, r24
     76a:	99 1f       	adc	r25, r25
     76c:	aa 1f       	adc	r26, r26
     76e:	bb 1f       	adc	r27, r27
     770:	2a 95       	dec	r18
     772:	d2 f7       	brpl	.-12     	; 0x768 <disk_ioctl+0x10c>
     774:	f8 01       	movw	r30, r16
     776:	80 83       	st	Z, r24
     778:	91 83       	std	Z+1, r25	; 0x01
     77a:	a2 83       	std	Z+2, r26	; 0x02
     77c:	b3 83       	std	Z+3, r27	; 0x03
				}
				res = RES_OK;
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	08 c0       	rjmp	.+16     	; 0x792 <disk_ioctl+0x136>
			}
			break;

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			*(DWORD*)buff = 128;
     782:	80 e8       	ldi	r24, 0x80	; 128
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	a0 e0       	ldi	r26, 0x00	; 0
     788:	b0 e0       	ldi	r27, 0x00	; 0
     78a:	f4 cf       	rjmp	.-24     	; 0x774 <disk_ioctl+0x118>
			res = RES_OK;
			break;

		default:
			res = RES_PARERR;
     78c:	84 e0       	ldi	r24, 0x04	; 4
     78e:	01 c0       	rjmp	.+2      	; 0x792 <disk_ioctl+0x136>
	DWORD cs;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;	/* Check if card is in the socket */

	res = RES_ERROR;
     790:	81 e0       	ldi	r24, 0x01	; 1

		default:
			res = RES_PARERR;
	}

	deselect();
     792:	89 8b       	std	Y+17, r24	; 0x11
     794:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <deselect>

	return res;
     798:	89 89       	ldd	r24, Y+17	; 0x11
     79a:	01 c0       	rjmp	.+2      	; 0x79e <disk_ioctl+0x142>
	DRESULT res;
	BYTE n, csd[16];
	DWORD cs;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;	/* Check if card is in the socket */
     79c:	83 e0       	ldi	r24, 0x03	; 3
	}

	deselect();

	return res;
}
     79e:	61 96       	adiw	r28, 0x11	; 17
     7a0:	0f b6       	in	r0, 0x3f	; 63
     7a2:	f8 94       	cli
     7a4:	de bf       	out	0x3e, r29	; 62
     7a6:	0f be       	out	0x3f, r0	; 63
     7a8:	cd bf       	out	0x3d, r28	; 61
     7aa:	cf 91       	pop	r28
     7ac:	df 91       	pop	r29
     7ae:	1f 91       	pop	r17
     7b0:	0f 91       	pop	r16
     7b2:	08 95       	ret

000007b4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
     7b4:	cf 93       	push	r28
     7b6:	df 93       	push	r29
	BYTE *d = (BYTE*)dst;
     7b8:	9c 01       	movw	r18, r24
	const BYTE *s = (const BYTE*)src;
     7ba:	cb 01       	movw	r24, r22
     7bc:	db 01       	movw	r26, r22
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
     7be:	f9 01       	movw	r30, r18
	const BYTE *s = (const BYTE*)src;

#if _WORD_ACCESS == 1
	while (cnt >= sizeof (int)) {
     7c0:	ba 01       	movw	r22, r20
     7c2:	06 c0       	rjmp	.+12     	; 0x7d0 <mem_cpy+0x1c>
		*(int*)d = *(int*)s;
     7c4:	cd 91       	ld	r28, X+
     7c6:	dd 91       	ld	r29, X+
     7c8:	c1 93       	st	Z+, r28
     7ca:	d1 93       	st	Z+, r29
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
     7cc:	62 50       	subi	r22, 0x02	; 2
     7ce:	70 40       	sbci	r23, 0x00	; 0
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

#if _WORD_ACCESS == 1
	while (cnt >= sizeof (int)) {
     7d0:	62 30       	cpi	r22, 0x02	; 2
     7d2:	71 05       	cpc	r23, r1
     7d4:	b8 f7       	brcc	.-18     	; 0x7c4 <mem_cpy+0x10>
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
     7d6:	ba 01       	movw	r22, r20
     7d8:	6e 7f       	andi	r22, 0xFE	; 254
     7da:	26 0f       	add	r18, r22
     7dc:	37 1f       	adc	r19, r23
     7de:	86 0f       	add	r24, r22
     7e0:	97 1f       	adc	r25, r23
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
     7e2:	40 ff       	sbrs	r20, 0
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <mem_cpy+0x3a>
		*d++ = *s++;
     7e6:	fc 01       	movw	r30, r24
     7e8:	80 81       	ld	r24, Z
     7ea:	f9 01       	movw	r30, r18
     7ec:	80 83       	st	Z, r24
}
     7ee:	df 91       	pop	r29
     7f0:	cf 91       	pop	r28
     7f2:	08 95       	ret

000007f4 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
     7f4:	28 2f       	mov	r18, r24
     7f6:	39 2f       	mov	r19, r25
     7f8:	f9 01       	movw	r30, r18

	while (cnt--)
     7fa:	03 c0       	rjmp	.+6      	; 0x802 <mem_set+0xe>
		*d++ = (BYTE)val;
     7fc:	61 93       	st	Z+, r22
     7fe:	41 50       	subi	r20, 0x01	; 1
     800:	50 40       	sbci	r21, 0x00	; 0
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
     802:	41 15       	cp	r20, r1
     804:	51 05       	cpc	r21, r1
     806:	d1 f7       	brne	.-12     	; 0x7fc <mem_set+0x8>
		*d++ = (BYTE)val;
}
     808:	08 95       	ret

0000080a <st_clust>:
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
	ST_WORD(dir+DIR_FstClusLO, cl);
     80a:	fc 01       	movw	r30, r24
     80c:	53 8f       	std	Z+27, r21	; 0x1b
     80e:	42 8f       	std	Z+26, r20	; 0x1a
	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
     810:	75 8b       	std	Z+21, r23	; 0x15
     812:	64 8b       	std	Z+20, r22	; 0x14
}
     814:	08 95       	ret

00000816 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
     816:	cf 93       	push	r28
     818:	df 93       	push	r29
     81a:	fc 01       	movw	r30, r24
	UINT i;
	TCHAR *p, c;


	p = fno->fname;
     81c:	eb 01       	movw	r28, r22
     81e:	29 96       	adiw	r28, 0x09	; 9
	if (dp->sect) {		/* Get SFN */
     820:	26 85       	ldd	r18, Z+14	; 0x0e
     822:	37 85       	ldd	r19, Z+15	; 0x0f
     824:	40 89       	ldd	r20, Z+16	; 0x10
     826:	51 89       	ldd	r21, Z+17	; 0x11
     828:	21 15       	cp	r18, r1
     82a:	31 05       	cpc	r19, r1
     82c:	41 05       	cpc	r20, r1
     82e:	51 05       	cpc	r21, r1
     830:	81 f1       	breq	.+96     	; 0x892 <get_fileinfo+0x7c>
		BYTE *dir = dp->dir;
     832:	02 88       	ldd	r0, Z+18	; 0x12
     834:	f3 89       	ldd	r31, Z+19	; 0x13
     836:	e0 2d       	mov	r30, r0
     838:	df 01       	movw	r26, r30

		i = 0;
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	90 e0       	ldi	r25, 0x00	; 0
		while (i < 11) {		/* Copy name body and extension */
			c = (TCHAR)dir[i++];
			if (c == ' ') continue;			/* Skip padding spaces */
			if (c == NDDE) c = (TCHAR)DDE;	/* Restore replaced DDE character */
			if (i == 9) *p++ = '.';			/* Insert a . if extension is exist */
     83e:	3e e2       	ldi	r19, 0x2E	; 46
	if (dp->sect) {		/* Get SFN */
		BYTE *dir = dp->dir;

		i = 0;
		while (i < 11) {		/* Copy name body and extension */
			c = (TCHAR)dir[i++];
     840:	2d 91       	ld	r18, X+
     842:	01 96       	adiw	r24, 0x01	; 1
			if (c == ' ') continue;			/* Skip padding spaces */
     844:	20 32       	cpi	r18, 0x20	; 32
     846:	41 f0       	breq	.+16     	; 0x858 <get_fileinfo+0x42>
			if (c == NDDE) c = (TCHAR)DDE;	/* Restore replaced DDE character */
     848:	25 30       	cpi	r18, 0x05	; 5
     84a:	09 f4       	brne	.+2      	; 0x84e <get_fileinfo+0x38>
     84c:	25 ee       	ldi	r18, 0xE5	; 229
			if (i == 9) *p++ = '.';			/* Insert a . if extension is exist */
     84e:	89 30       	cpi	r24, 0x09	; 9
     850:	91 05       	cpc	r25, r1
     852:	09 f4       	brne	.+2      	; 0x856 <get_fileinfo+0x40>
     854:	39 93       	st	Y+, r19
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
     856:	29 93       	st	Y+, r18
	p = fno->fname;
	if (dp->sect) {		/* Get SFN */
		BYTE *dir = dp->dir;

		i = 0;
		while (i < 11) {		/* Copy name body and extension */
     858:	8b 30       	cpi	r24, 0x0B	; 11
     85a:	91 05       	cpc	r25, r1
     85c:	89 f7       	brne	.-30     	; 0x840 <get_fileinfo+0x2a>
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
     85e:	83 85       	ldd	r24, Z+11	; 0x0b
     860:	db 01       	movw	r26, r22
     862:	18 96       	adiw	r26, 0x08	; 8
     864:	8c 93       	st	X, r24
     866:	18 97       	sbiw	r26, 0x08	; 8
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
     868:	24 8d       	ldd	r18, Z+28	; 0x1c
     86a:	35 8d       	ldd	r19, Z+29	; 0x1d
     86c:	46 8d       	ldd	r20, Z+30	; 0x1e
     86e:	57 8d       	ldd	r21, Z+31	; 0x1f
     870:	2d 93       	st	X+, r18
     872:	3d 93       	st	X+, r19
     874:	4d 93       	st	X+, r20
     876:	5c 93       	st	X, r21
     878:	13 97       	sbiw	r26, 0x03	; 3
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
     87a:	80 8d       	ldd	r24, Z+24	; 0x18
     87c:	91 8d       	ldd	r25, Z+25	; 0x19
     87e:	15 96       	adiw	r26, 0x05	; 5
     880:	9c 93       	st	X, r25
     882:	8e 93       	st	-X, r24
     884:	14 97       	sbiw	r26, 0x04	; 4
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
     886:	86 89       	ldd	r24, Z+22	; 0x16
     888:	97 89       	ldd	r25, Z+23	; 0x17
     88a:	17 96       	adiw	r26, 0x07	; 7
     88c:	9c 93       	st	X, r25
     88e:	8e 93       	st	-X, r24
     890:	16 97       	sbiw	r26, 0x06	; 6
	}
	*p = 0;		/* Terminate SFN string by a \0 */
     892:	18 82       	st	Y, r1
			}
		}
		p[i] = 0;	/* Terminate LFN string by a \0 */
	}
#endif
}
     894:	df 91       	pop	r29
     896:	cf 91       	pop	r28
     898:	08 95       	ret

0000089a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
     89a:	cf 93       	push	r28
     89c:	df 93       	push	r29
     89e:	ec 01       	movw	r28, r24
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;


	if (*path) {	/* If the pointer is not a null */
     8a0:	e8 81       	ld	r30, Y
     8a2:	f9 81       	ldd	r31, Y+1	; 0x01
     8a4:	30 97       	sbiw	r30, 0x00	; 0
     8a6:	e1 f0       	breq	.+56     	; 0x8e0 <get_ldnumber+0x46>
     8a8:	df 01       	movw	r26, r30
     8aa:	cd 01       	movw	r24, r26
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
     8ac:	2d 91       	ld	r18, X+
     8ae:	21 32       	cpi	r18, 0x21	; 33
     8b0:	a0 f0       	brcs	.+40     	; 0x8da <get_ldnumber+0x40>
     8b2:	2a 33       	cpi	r18, 0x3A	; 58
     8b4:	d1 f7       	brne	.-12     	; 0x8aa <get_ldnumber+0x10>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
     8b6:	20 81       	ld	r18, Z
     8b8:	30 e0       	ldi	r19, 0x00	; 0
     8ba:	20 53       	subi	r18, 0x30	; 48
     8bc:	30 40       	sbci	r19, 0x00	; 0
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
     8be:	2a 30       	cpi	r18, 0x0A	; 10
     8c0:	31 05       	cpc	r19, r1
     8c2:	70 f4       	brcc	.+28     	; 0x8e0 <get_ldnumber+0x46>

	if (*path) {	/* If the pointer is not a null */
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
     8c4:	31 96       	adiw	r30, 0x01	; 1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
     8c6:	e8 17       	cp	r30, r24
     8c8:	f9 07       	cpc	r31, r25
     8ca:	51 f4       	brne	.+20     	; 0x8e0 <get_ldnumber+0x46>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
     8cc:	21 15       	cp	r18, r1
     8ce:	31 05       	cpc	r19, r1
     8d0:	39 f4       	brne	.+14     	; 0x8e0 <get_ldnumber+0x46>
					vol = (int)i;
					*path = ++tt;
     8d2:	31 96       	adiw	r30, 0x01	; 1
     8d4:	f9 83       	std	Y+1, r31	; 0x01
     8d6:	e8 83       	st	Y, r30
     8d8:	05 c0       	rjmp	.+10     	; 0x8e4 <get_ldnumber+0x4a>
			return vol;
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
     8da:	20 e0       	ldi	r18, 0x00	; 0
     8dc:	30 e0       	ldi	r19, 0x00	; 0
     8de:	02 c0       	rjmp	.+4      	; 0x8e4 <get_ldnumber+0x4a>
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
     8e0:	2f ef       	ldi	r18, 0xFF	; 255
     8e2:	3f ef       	ldi	r19, 0xFF	; 255
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
     8e4:	c9 01       	movw	r24, r18
     8e6:	df 91       	pop	r29
     8e8:	cf 91       	pop	r28
     8ea:	08 95       	ret

000008ec <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
     8ec:	fc 01       	movw	r30, r24


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
     8ee:	00 97       	sbiw	r24, 0x00	; 0
     8f0:	c1 f0       	breq	.+48     	; 0x922 <validate+0x36>
     8f2:	a0 81       	ld	r26, Z
     8f4:	b1 81       	ldd	r27, Z+1	; 0x01
     8f6:	10 97       	sbiw	r26, 0x00	; 0
     8f8:	a1 f0       	breq	.+40     	; 0x922 <validate+0x36>
     8fa:	8c 91       	ld	r24, X
     8fc:	88 23       	and	r24, r24
     8fe:	89 f0       	breq	.+34     	; 0x922 <validate+0x36>
     900:	16 96       	adiw	r26, 0x06	; 6
     902:	2d 91       	ld	r18, X+
     904:	3c 91       	ld	r19, X
     906:	17 97       	sbiw	r26, 0x07	; 7
     908:	82 81       	ldd	r24, Z+2	; 0x02
     90a:	93 81       	ldd	r25, Z+3	; 0x03
     90c:	28 17       	cp	r18, r24
     90e:	39 07       	cpc	r19, r25
     910:	41 f4       	brne	.+16     	; 0x922 <validate+0x36>
		return FR_INVALID_OBJECT;

	ENTER_FF(fil->fs);		/* Lock file system */

	if (disk_status(fil->fs->drv) & STA_NOINIT)
     912:	11 96       	adiw	r26, 0x01	; 1
     914:	8c 91       	ld	r24, X
     916:	0e 94 b5 01 	call	0x36a	; 0x36a <disk_status>
     91a:	80 ff       	sbrs	r24, 0
     91c:	04 c0       	rjmp	.+8      	; 0x926 <validate+0x3a>
		return FR_NOT_READY;
     91e:	83 e0       	ldi	r24, 0x03	; 3
     920:	08 95       	ret
{
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
		return FR_INVALID_OBJECT;
     922:	89 e0       	ldi	r24, 0x09	; 9
     924:	08 95       	ret
	ENTER_FF(fil->fs);		/* Lock file system */

	if (disk_status(fil->fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
     926:	80 e0       	ldi	r24, 0x00	; 0
}
     928:	08 95       	ret

0000092a <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
     92a:	8f 92       	push	r8
     92c:	9f 92       	push	r9
     92e:	af 92       	push	r10
     930:	bf 92       	push	r11
     932:	cf 92       	push	r12
     934:	df 92       	push	r13
     936:	ef 92       	push	r14
     938:	ff 92       	push	r15
     93a:	0f 93       	push	r16
     93c:	1f 93       	push	r17
     93e:	cf 93       	push	r28
     940:	df 93       	push	r29
     942:	ec 01       	movw	r28, r24
	DWORD wsect;
	UINT nf;


	if (fs->wflag) {	/* Write back the sector if it is dirty */
     944:	8c 81       	ldd	r24, Y+4	; 0x04
     946:	88 23       	and	r24, r24
     948:	09 f4       	brne	.+2      	; 0x94c <sync_window+0x22>
     94a:	44 c0       	rjmp	.+136    	; 0x9d4 <sync_window+0xaa>
		wsect = fs->winsect;	/* Current sector number */
     94c:	ca a4       	ldd	r12, Y+42	; 0x2a
     94e:	db a4       	ldd	r13, Y+43	; 0x2b
     950:	ec a4       	ldd	r14, Y+44	; 0x2c
     952:	fd a4       	ldd	r15, Y+45	; 0x2d
		if (disk_write(fs->drv, fs->win, wsect, 1))
     954:	8e e2       	ldi	r24, 0x2E	; 46
     956:	88 2e       	mov	r8, r24
     958:	91 2c       	mov	r9, r1
     95a:	8c 0e       	add	r8, r28
     95c:	9d 1e       	adc	r9, r29
     95e:	89 81       	ldd	r24, Y+1	; 0x01
     960:	b4 01       	movw	r22, r8
     962:	a7 01       	movw	r20, r14
     964:	96 01       	movw	r18, r12
     966:	01 e0       	ldi	r16, 0x01	; 1
     968:	10 e0       	ldi	r17, 0x00	; 0
     96a:	0e 94 c2 02 	call	0x584	; 0x584 <disk_write>
     96e:	88 23       	and	r24, r24
     970:	79 f5       	brne	.+94     	; 0x9d0 <sync_window+0xa6>
			return FR_DISK_ERR;
		fs->wflag = 0;
     972:	1c 82       	std	Y+4, r1	; 0x04
		if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
     974:	8e 8d       	ldd	r24, Y+30	; 0x1e
     976:	9f 8d       	ldd	r25, Y+31	; 0x1f
     978:	a8 a1       	ldd	r26, Y+32	; 0x20
     97a:	b9 a1       	ldd	r27, Y+33	; 0x21
     97c:	a7 01       	movw	r20, r14
     97e:	96 01       	movw	r18, r12
     980:	28 1b       	sub	r18, r24
     982:	39 0b       	sbc	r19, r25
     984:	4a 0b       	sbc	r20, r26
     986:	5b 0b       	sbc	r21, r27
     988:	8e 89       	ldd	r24, Y+22	; 0x16
     98a:	9f 89       	ldd	r25, Y+23	; 0x17
     98c:	a8 8d       	ldd	r26, Y+24	; 0x18
     98e:	b9 8d       	ldd	r27, Y+25	; 0x19
     990:	28 17       	cp	r18, r24
     992:	39 07       	cpc	r19, r25
     994:	4a 07       	cpc	r20, r26
     996:	5b 07       	cpc	r21, r27
     998:	e8 f4       	brcc	.+58     	; 0x9d4 <sync_window+0xaa>
			for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
     99a:	ab 80       	ldd	r10, Y+3	; 0x03
     99c:	bb 24       	eor	r11, r11
     99e:	13 c0       	rjmp	.+38     	; 0x9c6 <sync_window+0x9c>
				wsect += fs->fsize;
     9a0:	8e 89       	ldd	r24, Y+22	; 0x16
     9a2:	9f 89       	ldd	r25, Y+23	; 0x17
     9a4:	a8 8d       	ldd	r26, Y+24	; 0x18
     9a6:	b9 8d       	ldd	r27, Y+25	; 0x19
     9a8:	c8 0e       	add	r12, r24
     9aa:	d9 1e       	adc	r13, r25
     9ac:	ea 1e       	adc	r14, r26
     9ae:	fb 1e       	adc	r15, r27
				disk_write(fs->drv, fs->win, wsect, 1);
     9b0:	89 81       	ldd	r24, Y+1	; 0x01
     9b2:	b4 01       	movw	r22, r8
     9b4:	a7 01       	movw	r20, r14
     9b6:	96 01       	movw	r18, r12
     9b8:	01 e0       	ldi	r16, 0x01	; 1
     9ba:	10 e0       	ldi	r17, 0x00	; 0
     9bc:	0e 94 c2 02 	call	0x584	; 0x584 <disk_write>
		wsect = fs->winsect;	/* Current sector number */
		if (disk_write(fs->drv, fs->win, wsect, 1))
			return FR_DISK_ERR;
		fs->wflag = 0;
		if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
			for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
     9c0:	08 94       	sec
     9c2:	a1 08       	sbc	r10, r1
     9c4:	b1 08       	sbc	r11, r1
     9c6:	82 e0       	ldi	r24, 0x02	; 2
     9c8:	a8 16       	cp	r10, r24
     9ca:	b1 04       	cpc	r11, r1
     9cc:	48 f7       	brcc	.-46     	; 0x9a0 <sync_window+0x76>
     9ce:	02 c0       	rjmp	.+4      	; 0x9d4 <sync_window+0xaa>


	if (fs->wflag) {	/* Write back the sector if it is dirty */
		wsect = fs->winsect;	/* Current sector number */
		if (disk_write(fs->drv, fs->win, wsect, 1))
			return FR_DISK_ERR;
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	01 c0       	rjmp	.+2      	; 0x9d6 <sync_window+0xac>
				wsect += fs->fsize;
				disk_write(fs->drv, fs->win, wsect, 1);
			}
		}
	}
	return FR_OK;
     9d4:	80 e0       	ldi	r24, 0x00	; 0
}
     9d6:	df 91       	pop	r29
     9d8:	cf 91       	pop	r28
     9da:	1f 91       	pop	r17
     9dc:	0f 91       	pop	r16
     9de:	ff 90       	pop	r15
     9e0:	ef 90       	pop	r14
     9e2:	df 90       	pop	r13
     9e4:	cf 90       	pop	r12
     9e6:	bf 90       	pop	r11
     9e8:	af 90       	pop	r10
     9ea:	9f 90       	pop	r9
     9ec:	8f 90       	pop	r8
     9ee:	08 95       	ret

000009f0 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)
{
     9f0:	cf 92       	push	r12
     9f2:	df 92       	push	r13
     9f4:	ef 92       	push	r14
     9f6:	ff 92       	push	r15
     9f8:	0f 93       	push	r16
     9fa:	1f 93       	push	r17
     9fc:	cf 93       	push	r28
     9fe:	df 93       	push	r29
     a00:	ec 01       	movw	r28, r24
     a02:	6a 01       	movw	r12, r20
     a04:	7b 01       	movw	r14, r22
	if (sector != fs->winsect) {	/* Changed current window */
     a06:	8a a5       	ldd	r24, Y+42	; 0x2a
     a08:	9b a5       	ldd	r25, Y+43	; 0x2b
     a0a:	ac a5       	ldd	r26, Y+44	; 0x2c
     a0c:	bd a5       	ldd	r27, Y+45	; 0x2d
     a0e:	48 17       	cp	r20, r24
     a10:	59 07       	cpc	r21, r25
     a12:	6a 07       	cpc	r22, r26
     a14:	7b 07       	cpc	r23, r27
     a16:	b1 f0       	breq	.+44     	; 0xa44 <move_window+0x54>
#if !_FS_READONLY
		if (sync_window(fs) != FR_OK)
     a18:	ce 01       	movw	r24, r28
     a1a:	0e 94 95 04 	call	0x92a	; 0x92a <sync_window>
     a1e:	88 23       	and	r24, r24
     a20:	99 f4       	brne	.+38     	; 0xa48 <move_window+0x58>
			return FR_DISK_ERR;
#endif
		if (disk_read(fs->drv, fs->win, sector, 1))
     a22:	be 01       	movw	r22, r28
     a24:	62 5d       	subi	r22, 0xD2	; 210
     a26:	7f 4f       	sbci	r23, 0xFF	; 255
     a28:	89 81       	ldd	r24, Y+1	; 0x01
     a2a:	a7 01       	movw	r20, r14
     a2c:	96 01       	movw	r18, r12
     a2e:	01 e0       	ldi	r16, 0x01	; 1
     a30:	10 e0       	ldi	r17, 0x00	; 0
     a32:	0e 94 75 02 	call	0x4ea	; 0x4ea <disk_read>
     a36:	88 23       	and	r24, r24
     a38:	39 f4       	brne	.+14     	; 0xa48 <move_window+0x58>
			return FR_DISK_ERR;
		fs->winsect = sector;
     a3a:	ca a6       	std	Y+42, r12	; 0x2a
     a3c:	db a6       	std	Y+43, r13	; 0x2b
     a3e:	ec a6       	std	Y+44, r14	; 0x2c
     a40:	fd a6       	std	Y+45, r15	; 0x2d
     a42:	03 c0       	rjmp	.+6      	; 0xa4a <move_window+0x5a>
	}

	return FR_OK;
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	01 c0       	rjmp	.+2      	; 0xa4a <move_window+0x5a>
#if !_FS_READONLY
		if (sync_window(fs) != FR_OK)
			return FR_DISK_ERR;
#endif
		if (disk_read(fs->drv, fs->win, sector, 1))
			return FR_DISK_ERR;
     a48:	81 e0       	ldi	r24, 0x01	; 1
		fs->winsect = sector;
	}

	return FR_OK;
}
     a4a:	df 91       	pop	r29
     a4c:	cf 91       	pop	r28
     a4e:	1f 91       	pop	r17
     a50:	0f 91       	pop	r16
     a52:	ff 90       	pop	r15
     a54:	ef 90       	pop	r14
     a56:	df 90       	pop	r13
     a58:	cf 90       	pop	r12
     a5a:	08 95       	ret

00000a5c <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
     a5c:	cf 93       	push	r28
     a5e:	df 93       	push	r29
     a60:	ec 01       	movw	r28, r24
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
     a62:	1c 82       	std	Y+4, r1	; 0x04
     a64:	8f ef       	ldi	r24, 0xFF	; 255
     a66:	9f ef       	ldi	r25, 0xFF	; 255
     a68:	dc 01       	movw	r26, r24
     a6a:	8a a7       	std	Y+42, r24	; 0x2a
     a6c:	9b a7       	std	Y+43, r25	; 0x2b
     a6e:	ac a7       	std	Y+44, r26	; 0x2c
     a70:	bd a7       	std	Y+45, r27	; 0x2d
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
     a72:	ce 01       	movw	r24, r28
     a74:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <move_window>
     a78:	88 23       	and	r24, r24
     a7a:	51 f5       	brne	.+84     	; 0xad0 <check_fs+0x74>
		return 3;

	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
     a7c:	fe 01       	movw	r30, r28
     a7e:	be 96       	adiw	r30, 0x2e	; 46
     a80:	de 01       	movw	r26, r28
     a82:	a4 5d       	subi	r26, 0xD4	; 212
     a84:	bd 4f       	sbci	r27, 0xFD	; 253
     a86:	8d 91       	ld	r24, X+
     a88:	9c 91       	ld	r25, X
     a8a:	11 97       	sbiw	r26, 0x01	; 1
     a8c:	2a ea       	ldi	r18, 0xAA	; 170
     a8e:	85 35       	cpi	r24, 0x55	; 85
     a90:	92 07       	cpc	r25, r18
     a92:	01 f5       	brne	.+64     	; 0xad4 <check_fs+0x78>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
     a94:	86 a9       	ldd	r24, Z+54	; 0x36
     a96:	97 a9       	ldd	r25, Z+55	; 0x37
     a98:	a0 ad       	ldd	r26, Z+56	; 0x38
     a9a:	b1 ad       	ldd	r27, Z+57	; 0x39
     a9c:	b0 70       	andi	r27, 0x00	; 0
     a9e:	86 34       	cpi	r24, 0x46	; 70
     aa0:	21 e4       	ldi	r18, 0x41	; 65
     aa2:	92 07       	cpc	r25, r18
     aa4:	24 e5       	ldi	r18, 0x54	; 84
     aa6:	a2 07       	cpc	r26, r18
     aa8:	20 e0       	ldi	r18, 0x00	; 0
     aaa:	b2 07       	cpc	r27, r18
     aac:	a9 f0       	breq	.+42     	; 0xad8 <check_fs+0x7c>
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
     aae:	c0 58       	subi	r28, 0x80	; 128
     ab0:	df 4f       	sbci	r29, 0xFF	; 255
     ab2:	28 81       	ld	r18, Y
     ab4:	39 81       	ldd	r19, Y+1	; 0x01
     ab6:	4a 81       	ldd	r20, Y+2	; 0x02
     ab8:	5b 81       	ldd	r21, Y+3	; 0x03
     aba:	50 70       	andi	r21, 0x00	; 0
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
		return 3;
     abc:	81 e0       	ldi	r24, 0x01	; 1
     abe:	26 34       	cpi	r18, 0x46	; 70
     ac0:	91 e4       	ldi	r25, 0x41	; 65
     ac2:	39 07       	cpc	r19, r25
     ac4:	94 e5       	ldi	r25, 0x54	; 84
     ac6:	49 07       	cpc	r20, r25
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	59 07       	cpc	r21, r25
     acc:	31 f4       	brne	.+12     	; 0xada <check_fs+0x7e>
     ace:	04 c0       	rjmp	.+8      	; 0xad8 <check_fs+0x7c>
     ad0:	83 e0       	ldi	r24, 0x03	; 3
     ad2:	03 c0       	rjmp	.+6      	; 0xada <check_fs+0x7e>

	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
		return 2;
     ad4:	82 e0       	ldi	r24, 0x02	; 2
     ad6:	01 c0       	rjmp	.+2      	; 0xada <check_fs+0x7e>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
		return 0;
     ad8:	80 e0       	ldi	r24, 0x00	; 0
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
		return 0;

	return 1;
}
     ada:	df 91       	pop	r29
     adc:	cf 91       	pop	r28
     ade:	08 95       	ret

00000ae0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
     ae0:	2f 92       	push	r2
     ae2:	3f 92       	push	r3
     ae4:	4f 92       	push	r4
     ae6:	5f 92       	push	r5
     ae8:	6f 92       	push	r6
     aea:	7f 92       	push	r7
     aec:	8f 92       	push	r8
     aee:	9f 92       	push	r9
     af0:	af 92       	push	r10
     af2:	bf 92       	push	r11
     af4:	cf 92       	push	r12
     af6:	df 92       	push	r13
     af8:	ef 92       	push	r14
     afa:	ff 92       	push	r15
     afc:	0f 93       	push	r16
     afe:	1f 93       	push	r17
     b00:	df 93       	push	r29
     b02:	cf 93       	push	r28
     b04:	cd b7       	in	r28, 0x3d	; 61
     b06:	de b7       	in	r29, 0x3e	; 62
     b08:	a0 97       	sbiw	r28, 0x20	; 32
     b0a:	0f b6       	in	r0, 0x3f	; 63
     b0c:	f8 94       	cli
     b0e:	de bf       	out	0x3e, r29	; 62
     b10:	0f be       	out	0x3f, r0	; 63
     b12:	cd bf       	out	0x3d, r28	; 61
     b14:	7c 01       	movw	r14, r24
     b16:	cb 01       	movw	r24, r22
     b18:	94 2e       	mov	r9, r20
	WORD nrsv;
	FATFS *fs;


	/* Get logical drive number from the path name */
	*rfs = 0;
     b1a:	d7 01       	movw	r26, r14
     b1c:	1d 92       	st	X+, r1
     b1e:	1c 92       	st	X, r1
	vol = get_ldnumber(path);
     b20:	0e 94 4d 04 	call	0x89a	; 0x89a <get_ldnumber>
     b24:	5c 01       	movw	r10, r24
	if (vol < 0) return FR_INVALID_DRIVE;
     b26:	97 fd       	sbrc	r25, 7
     b28:	51 c2       	rjmp	.+1186   	; 0xfcc <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
     b2a:	fc 01       	movw	r30, r24
     b2c:	ee 0f       	add	r30, r30
     b2e:	ff 1f       	adc	r31, r31
     b30:	e5 57       	subi	r30, 0x75	; 117
     b32:	ff 4f       	sbci	r31, 0xFF	; 255
     b34:	00 81       	ld	r16, Z
     b36:	11 81       	ldd	r17, Z+1	; 0x01
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
     b38:	01 15       	cp	r16, r1
     b3a:	11 05       	cpc	r17, r1
     b3c:	09 f4       	brne	.+2      	; 0xb40 <find_volume+0x60>
     b3e:	48 c2       	rjmp	.+1168   	; 0xfd0 <find_volume+0x4f0>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
     b40:	f7 01       	movw	r30, r14
     b42:	11 83       	std	Z+1, r17	; 0x01
     b44:	00 83       	st	Z, r16

	if (fs->fs_type) {					/* If the volume has been mounted */
     b46:	d8 01       	movw	r26, r16
     b48:	8c 91       	ld	r24, X
     b4a:	88 23       	and	r24, r24
     b4c:	61 f0       	breq	.+24     	; 0xb66 <find_volume+0x86>
		stat = disk_status(fs->drv);
     b4e:	11 96       	adiw	r26, 0x01	; 1
     b50:	8c 91       	ld	r24, X
     b52:	0e 94 b5 01 	call	0x36a	; 0x36a <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
     b56:	80 fd       	sbrc	r24, 0
     b58:	06 c0       	rjmp	.+12     	; 0xb66 <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
     b5a:	99 20       	and	r9, r9
     b5c:	09 f4       	brne	.+2      	; 0xb60 <find_volume+0x80>
     b5e:	3a c2       	rjmp	.+1140   	; 0xfd4 <find_volume+0x4f4>
     b60:	82 ff       	sbrs	r24, 2
     b62:	38 c2       	rjmp	.+1136   	; 0xfd4 <find_volume+0x4f4>
     b64:	3b c2       	rjmp	.+1142   	; 0xfdc <find_volume+0x4fc>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
     b66:	f8 01       	movw	r30, r16
     b68:	10 82       	st	Z, r1
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
     b6a:	a1 82       	std	Z+1, r10	; 0x01
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
     b6c:	8a 2d       	mov	r24, r10
     b6e:	0e 94 bc 01 	call	0x378	; 0x378 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
     b72:	80 fd       	sbrc	r24, 0
     b74:	31 c2       	rjmp	.+1122   	; 0xfd8 <find_volume+0x4f8>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
     b76:	99 20       	and	r9, r9
     b78:	11 f0       	breq	.+4      	; 0xb7e <find_volume+0x9e>
     b7a:	82 fd       	sbrc	r24, 2
     b7c:	2f c2       	rjmp	.+1118   	; 0xfdc <find_volume+0x4fc>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
     b7e:	c8 01       	movw	r24, r16
     b80:	40 e0       	ldi	r20, 0x00	; 0
     b82:	50 e0       	ldi	r21, 0x00	; 0
     b84:	ba 01       	movw	r22, r20
     b86:	0e 94 2e 05 	call	0xa5c	; 0xa5c <check_fs>
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
     b8a:	81 30       	cpi	r24, 0x01	; 1
     b8c:	09 f0       	breq	.+2      	; 0xb90 <find_volume+0xb0>
     b8e:	47 c0       	rjmp	.+142    	; 0xc1e <find_volume+0x13e>
     b90:	7e 01       	movw	r14, r28
     b92:	08 94       	sec
     b94:	e1 1c       	adc	r14, r1
     b96:	f1 1c       	adc	r15, r1
     b98:	a7 01       	movw	r20, r14
     b9a:	2e eb       	ldi	r18, 0xBE	; 190
     b9c:	31 e0       	ldi	r19, 0x01	; 1
		UINT i;
		DWORD br[4];

		for (i = 0; i < 4; i++) {			/* Get partition offset */
			BYTE *pt = fs->win+MBR_Table + i * SZ_PTE;
     b9e:	f9 01       	movw	r30, r18
     ba0:	be 96       	adiw	r30, 0x2e	; 46
     ba2:	e0 0f       	add	r30, r16
     ba4:	f1 1f       	adc	r31, r17
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
     ba6:	84 81       	ldd	r24, Z+4	; 0x04
     ba8:	88 23       	and	r24, r24
     baa:	29 f0       	breq	.+10     	; 0xbb6 <find_volume+0xd6>
     bac:	80 85       	ldd	r24, Z+8	; 0x08
     bae:	91 85       	ldd	r25, Z+9	; 0x09
     bb0:	a2 85       	ldd	r26, Z+10	; 0x0a
     bb2:	b3 85       	ldd	r27, Z+11	; 0x0b
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <find_volume+0xdc>
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	dc 01       	movw	r26, r24
     bbc:	fa 01       	movw	r30, r20
     bbe:	81 93       	st	Z+, r24
     bc0:	91 93       	st	Z+, r25
     bc2:	a1 93       	st	Z+, r26
     bc4:	b1 93       	st	Z+, r27
     bc6:	af 01       	movw	r20, r30
     bc8:	20 5f       	subi	r18, 0xF0	; 240
     bca:	3f 4f       	sbci	r19, 0xFF	; 255
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
		UINT i;
		DWORD br[4];

		for (i = 0; i < 4; i++) {			/* Get partition offset */
     bcc:	f1 e0       	ldi	r31, 0x01	; 1
     bce:	2e 3f       	cpi	r18, 0xFE	; 254
     bd0:	3f 07       	cpc	r19, r31
     bd2:	29 f7       	brne	.-54     	; 0xb9e <find_volume+0xbe>
/*-----------------------------------------------------------------------*/
/* Find logical drive and check if the volume is mounted                 */
/*-----------------------------------------------------------------------*/

static
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
     bd4:	91 e1       	ldi	r25, 0x11	; 17
     bd6:	a9 2e       	mov	r10, r25
     bd8:	b1 2c       	mov	r11, r1
     bda:	ac 0e       	add	r10, r28
     bdc:	bd 1e       	adc	r11, r29
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
		if (i) i--;
		do {								/* Find an FAT volume */
			bsect = br[i];
     bde:	d7 01       	movw	r26, r14
     be0:	6d 90       	ld	r6, X+
     be2:	7d 90       	ld	r7, X+
     be4:	8d 90       	ld	r8, X+
     be6:	9d 90       	ld	r9, X+
     be8:	7d 01       	movw	r14, r26
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
     bea:	61 14       	cp	r6, r1
     bec:	71 04       	cpc	r7, r1
     bee:	81 04       	cpc	r8, r1
     bf0:	91 04       	cpc	r9, r1
     bf2:	61 f0       	breq	.+24     	; 0xc0c <find_volume+0x12c>
     bf4:	c8 01       	movw	r24, r16
     bf6:	b4 01       	movw	r22, r8
     bf8:	a3 01       	movw	r20, r6
     bfa:	0e 94 2e 05 	call	0xa5c	; 0xa5c <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
     bfe:	88 23       	and	r24, r24
     c00:	31 f4       	brne	.+12     	; 0xc0e <find_volume+0x12e>
     c02:	69 8a       	std	Y+17, r6	; 0x11
     c04:	7a 8a       	std	Y+18, r7	; 0x12
     c06:	8b 8a       	std	Y+19, r8	; 0x13
     c08:	9c 8a       	std	Y+20, r9	; 0x14
     c0a:	13 c0       	rjmp	.+38     	; 0xc32 <find_volume+0x152>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
		if (i) i--;
		do {								/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
     c0c:	82 e0       	ldi	r24, 0x02	; 2
		} while (!LD2PT(vol) && fmt && ++i < 4);
     c0e:	ea 14       	cp	r14, r10
     c10:	fb 04       	cpc	r15, r11
     c12:	29 f7       	brne	.-54     	; 0xbde <find_volume+0xfe>
     c14:	69 8a       	std	Y+17, r6	; 0x11
     c16:	7a 8a       	std	Y+18, r7	; 0x12
     c18:	8b 8a       	std	Y+19, r8	; 0x13
     c1a:	9c 8a       	std	Y+20, r9	; 0x14
     c1c:	04 c0       	rjmp	.+8      	; 0xc26 <find_volume+0x146>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
     c1e:	19 8a       	std	Y+17, r1	; 0x11
     c20:	1a 8a       	std	Y+18, r1	; 0x12
     c22:	1b 8a       	std	Y+19, r1	; 0x13
     c24:	1c 8a       	std	Y+20, r1	; 0x14
		do {								/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
		} while (!LD2PT(vol) && fmt && ++i < 4);
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
     c26:	83 30       	cpi	r24, 0x03	; 3
     c28:	09 f4       	brne	.+2      	; 0xc2c <find_volume+0x14c>
     c2a:	da c1       	rjmp	.+948    	; 0xfe0 <find_volume+0x500>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
     c2c:	88 23       	and	r24, r24
     c2e:	09 f0       	breq	.+2      	; 0xc32 <find_volume+0x152>
     c30:	d9 c1       	rjmp	.+946    	; 0xfe4 <find_volume+0x504>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
     c32:	8e e2       	ldi	r24, 0x2E	; 46
     c34:	e8 2e       	mov	r14, r24
     c36:	f1 2c       	mov	r15, r1
     c38:	e0 0e       	add	r14, r16
     c3a:	f1 1e       	adc	r15, r17
     c3c:	f7 01       	movw	r30, r14
     c3e:	83 85       	ldd	r24, Z+11	; 0x0b
     c40:	94 85       	ldd	r25, Z+12	; 0x0c
     c42:	f2 e0       	ldi	r31, 0x02	; 2
     c44:	80 30       	cpi	r24, 0x00	; 0
     c46:	9f 07       	cpc	r25, r31
     c48:	09 f0       	breq	.+2      	; 0xc4c <find_volume+0x16c>
     c4a:	cc c1       	rjmp	.+920    	; 0xfe4 <find_volume+0x504>
		return FR_NO_FILESYSTEM;

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
     c4c:	d7 01       	movw	r26, r14
     c4e:	56 96       	adiw	r26, 0x16	; 22
     c50:	8d 91       	ld	r24, X+
     c52:	9c 91       	ld	r25, X
     c54:	57 97       	sbiw	r26, 0x17	; 23
     c56:	9c 01       	movw	r18, r24
     c58:	40 e0       	ldi	r20, 0x00	; 0
     c5a:	50 e0       	ldi	r21, 0x00	; 0
     c5c:	2d 8b       	std	Y+21, r18	; 0x15
     c5e:	3e 8b       	std	Y+22, r19	; 0x16
     c60:	4f 8b       	std	Y+23, r20	; 0x17
     c62:	58 8f       	std	Y+24, r21	; 0x18
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
     c64:	21 15       	cp	r18, r1
     c66:	31 05       	cpc	r19, r1
     c68:	41 05       	cpc	r20, r1
     c6a:	51 05       	cpc	r21, r1
     c6c:	51 f4       	brne	.+20     	; 0xc82 <find_volume+0x1a2>
     c6e:	94 96       	adiw	r26, 0x24	; 36
     c70:	8d 91       	ld	r24, X+
     c72:	9d 91       	ld	r25, X+
     c74:	0d 90       	ld	r0, X+
     c76:	bc 91       	ld	r27, X
     c78:	a0 2d       	mov	r26, r0
     c7a:	8d 8b       	std	Y+21, r24	; 0x15
     c7c:	9e 8b       	std	Y+22, r25	; 0x16
     c7e:	af 8b       	std	Y+23, r26	; 0x17
     c80:	b8 8f       	std	Y+24, r27	; 0x18
	fs->fsize = fasize;
     c82:	2d 89       	ldd	r18, Y+21	; 0x15
     c84:	3e 89       	ldd	r19, Y+22	; 0x16
     c86:	4f 89       	ldd	r20, Y+23	; 0x17
     c88:	58 8d       	ldd	r21, Y+24	; 0x18
     c8a:	d8 01       	movw	r26, r16
     c8c:	56 96       	adiw	r26, 0x16	; 22
     c8e:	2d 93       	st	X+, r18
     c90:	3d 93       	st	X+, r19
     c92:	4d 93       	st	X+, r20
     c94:	5c 93       	st	X, r21
     c96:	59 97       	sbiw	r26, 0x19	; 25

	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
     c98:	de 96       	adiw	r26, 0x3e	; 62
     c9a:	2c 91       	ld	r18, X
     c9c:	de 97       	sbiw	r26, 0x3e	; 62
     c9e:	13 96       	adiw	r26, 0x03	; 3
     ca0:	2c 93       	st	X, r18
     ca2:	13 97       	sbiw	r26, 0x03	; 3
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
     ca4:	82 2f       	mov	r24, r18
     ca6:	81 50       	subi	r24, 0x01	; 1
     ca8:	82 30       	cpi	r24, 0x02	; 2
     caa:	08 f0       	brcs	.+2      	; 0xcae <find_volume+0x1ce>
     cac:	9b c1       	rjmp	.+822    	; 0xfe4 <find_volume+0x504>
		return FR_NO_FILESYSTEM;
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */

	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
     cae:	db 96       	adiw	r26, 0x3b	; 59
     cb0:	5c 90       	ld	r5, X
     cb2:	db 97       	sbiw	r26, 0x3b	; 59
     cb4:	12 96       	adiw	r26, 0x02	; 2
     cb6:	5c 92       	st	X, r5
     cb8:	12 97       	sbiw	r26, 0x02	; 2
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
     cba:	55 20       	and	r5, r5
     cbc:	09 f4       	brne	.+2      	; 0xcc0 <find_volume+0x1e0>
     cbe:	92 c1       	rjmp	.+804    	; 0xfe4 <find_volume+0x504>
     cc0:	45 2d       	mov	r20, r5
     cc2:	50 e0       	ldi	r21, 0x00	; 0
     cc4:	ca 01       	movw	r24, r20
     cc6:	01 97       	sbiw	r24, 0x01	; 1
     cc8:	84 23       	and	r24, r20
     cca:	95 23       	and	r25, r21
     ccc:	00 97       	sbiw	r24, 0x00	; 0
     cce:	09 f0       	breq	.+2      	; 0xcd2 <find_volume+0x1f2>
     cd0:	89 c1       	rjmp	.+786    	; 0xfe4 <find_volume+0x504>
		return FR_NO_FILESYSTEM;

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
     cd2:	f7 01       	movw	r30, r14
     cd4:	21 88       	ldd	r2, Z+17	; 0x11
     cd6:	32 88       	ldd	r3, Z+18	; 0x12
     cd8:	19 96       	adiw	r26, 0x09	; 9
     cda:	3c 92       	st	X, r3
     cdc:	2e 92       	st	-X, r2
     cde:	18 97       	sbiw	r26, 0x08	; 8
	if (fs->n_rootdir % (SS(fs) / SZ_DIR))				/* (Must be sector aligned) */
     ce0:	c1 01       	movw	r24, r2
     ce2:	8f 70       	andi	r24, 0x0F	; 15
     ce4:	90 70       	andi	r25, 0x00	; 0
     ce6:	00 97       	sbiw	r24, 0x00	; 0
     ce8:	09 f0       	breq	.+2      	; 0xcec <find_volume+0x20c>
     cea:	7c c1       	rjmp	.+760    	; 0xfe4 <find_volume+0x504>
		return FR_NO_FILESYSTEM;

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
     cec:	63 88       	ldd	r6, Z+19	; 0x13
     cee:	74 88       	ldd	r7, Z+20	; 0x14
     cf0:	88 24       	eor	r8, r8
     cf2:	99 24       	eor	r9, r9
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
     cf4:	61 14       	cp	r6, r1
     cf6:	71 04       	cpc	r7, r1
     cf8:	81 04       	cpc	r8, r1
     cfa:	91 04       	cpc	r9, r1
     cfc:	21 f4       	brne	.+8      	; 0xd06 <find_volume+0x226>
     cfe:	60 a0       	ldd	r6, Z+32	; 0x20
     d00:	71 a0       	ldd	r7, Z+33	; 0x21
     d02:	82 a0       	ldd	r8, Z+34	; 0x22
     d04:	93 a0       	ldd	r9, Z+35	; 0x23

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
     d06:	d7 01       	movw	r26, r14
     d08:	1e 96       	adiw	r26, 0x0e	; 14
     d0a:	ad 90       	ld	r10, X+
     d0c:	bc 90       	ld	r11, X
     d0e:	1f 97       	sbiw	r26, 0x0f	; 15
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
     d10:	a1 14       	cp	r10, r1
     d12:	b1 04       	cpc	r11, r1
     d14:	09 f4       	brne	.+2      	; 0xd18 <find_volume+0x238>
     d16:	66 c1       	rjmp	.+716    	; 0xfe4 <find_volume+0x504>
	fs->fsize = fasize;

	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
		return FR_NO_FILESYSTEM;
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	40 e0       	ldi	r20, 0x00	; 0
     d1c:	50 e0       	ldi	r21, 0x00	; 0
     d1e:	6d 89       	ldd	r22, Y+21	; 0x15
     d20:	7e 89       	ldd	r23, Y+22	; 0x16
     d22:	8f 89       	ldd	r24, Y+23	; 0x17
     d24:	98 8d       	ldd	r25, Y+24	; 0x18
     d26:	0e 94 86 1c 	call	0x390c	; 0x390c <__mulsi3>
     d2a:	69 8f       	std	Y+25, r22	; 0x19
     d2c:	7a 8f       	std	Y+26, r23	; 0x1a
     d2e:	8b 8f       	std	Y+27, r24	; 0x1b
     d30:	9c 8f       	std	Y+28, r25	; 0x1c

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
     d32:	95 01       	movw	r18, r10
     d34:	40 e0       	ldi	r20, 0x00	; 0
     d36:	50 e0       	ldi	r21, 0x00	; 0
     d38:	2d 8f       	std	Y+29, r18	; 0x1d
     d3a:	3e 8f       	std	Y+30, r19	; 0x1e
     d3c:	4f 8f       	std	Y+31, r20	; 0x1f
     d3e:	58 a3       	std	Y+32, r21	; 0x20
     d40:	51 01       	movw	r10, r2
     d42:	b4 e0       	ldi	r27, 0x04	; 4
     d44:	b6 94       	lsr	r11
     d46:	a7 94       	ror	r10
     d48:	ba 95       	dec	r27
     d4a:	e1 f7       	brne	.-8      	; 0xd44 <find_volume+0x264>
     d4c:	cc 24       	eor	r12, r12
     d4e:	dd 24       	eor	r13, r13
     d50:	a2 0e       	add	r10, r18
     d52:	b3 1e       	adc	r11, r19
     d54:	c4 1e       	adc	r12, r20
     d56:	d5 1e       	adc	r13, r21
     d58:	a6 0e       	add	r10, r22
     d5a:	b7 1e       	adc	r11, r23
     d5c:	c8 1e       	adc	r12, r24
     d5e:	d9 1e       	adc	r13, r25
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
     d60:	6a 14       	cp	r6, r10
     d62:	7b 04       	cpc	r7, r11
     d64:	8c 04       	cpc	r8, r12
     d66:	9d 04       	cpc	r9, r13
     d68:	08 f4       	brcc	.+2      	; 0xd6c <find_volume+0x28c>
     d6a:	3c c1       	rjmp	.+632    	; 0xfe4 <find_volume+0x504>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
     d6c:	c4 01       	movw	r24, r8
     d6e:	b3 01       	movw	r22, r6
     d70:	6a 19       	sub	r22, r10
     d72:	7b 09       	sbc	r23, r11
     d74:	8c 09       	sbc	r24, r12
     d76:	9d 09       	sbc	r25, r13
     d78:	25 2d       	mov	r18, r5
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	40 e0       	ldi	r20, 0x00	; 0
     d7e:	50 e0       	ldi	r21, 0x00	; 0
     d80:	0e 94 a5 1c 	call	0x394a	; 0x394a <__udivmodsi4>
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
     d84:	21 15       	cp	r18, r1
     d86:	31 05       	cpc	r19, r1
     d88:	41 05       	cpc	r20, r1
     d8a:	51 05       	cpc	r21, r1
     d8c:	09 f4       	brne	.+2      	; 0xd90 <find_volume+0x2b0>
     d8e:	2a c1       	rjmp	.+596    	; 0xfe4 <find_volume+0x504>
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
     d90:	26 3f       	cpi	r18, 0xF6	; 246
     d92:	6f e0       	ldi	r22, 0x0F	; 15
     d94:	36 07       	cpc	r19, r22
     d96:	60 e0       	ldi	r22, 0x00	; 0
     d98:	46 07       	cpc	r20, r22
     d9a:	60 e0       	ldi	r22, 0x00	; 0
     d9c:	56 07       	cpc	r21, r22
     d9e:	58 f0       	brcs	.+22     	; 0xdb6 <find_volume+0x2d6>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
     da0:	26 3f       	cpi	r18, 0xF6	; 246
     da2:	8f ef       	ldi	r24, 0xFF	; 255
     da4:	38 07       	cpc	r19, r24
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	48 07       	cpc	r20, r24
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	58 07       	cpc	r21, r24
     dae:	30 f4       	brcc	.+12     	; 0xdbc <find_volume+0x2dc>
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
     db0:	a2 e0       	ldi	r26, 0x02	; 2
     db2:	9a 2e       	mov	r9, r26
     db4:	05 c0       	rjmp	.+10     	; 0xdc0 <find_volume+0x2e0>
	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
	fmt = FS_FAT12;
     db6:	99 24       	eor	r9, r9
     db8:	93 94       	inc	r9
     dba:	02 c0       	rjmp	.+4      	; 0xdc0 <find_volume+0x2e0>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
     dbc:	f3 e0       	ldi	r31, 0x03	; 3
     dbe:	9f 2e       	mov	r9, r31

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
     dc0:	2e 5f       	subi	r18, 0xFE	; 254
     dc2:	3f 4f       	sbci	r19, 0xFF	; 255
     dc4:	4f 4f       	sbci	r20, 0xFF	; 255
     dc6:	5f 4f       	sbci	r21, 0xFF	; 255
     dc8:	d8 01       	movw	r26, r16
     dca:	52 96       	adiw	r26, 0x12	; 18
     dcc:	2d 93       	st	X+, r18
     dce:	3d 93       	st	X+, r19
     dd0:	4d 93       	st	X+, r20
     dd2:	5c 93       	st	X, r21
     dd4:	55 97       	sbiw	r26, 0x15	; 21
	fs->volbase = bsect;								/* Volume start sector */
     dd6:	89 89       	ldd	r24, Y+17	; 0x11
     dd8:	9a 89       	ldd	r25, Y+18	; 0x12
     dda:	ab 89       	ldd	r26, Y+19	; 0x13
     ddc:	bc 89       	ldd	r27, Y+20	; 0x14
     dde:	f8 01       	movw	r30, r16
     de0:	82 8f       	std	Z+26, r24	; 0x1a
     de2:	93 8f       	std	Z+27, r25	; 0x1b
     de4:	a4 8f       	std	Z+28, r26	; 0x1c
     de6:	b5 8f       	std	Z+29, r27	; 0x1d
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
     de8:	2c 01       	movw	r4, r24
     dea:	3d 01       	movw	r6, r26
     dec:	8d 8d       	ldd	r24, Y+29	; 0x1d
     dee:	9e 8d       	ldd	r25, Y+30	; 0x1e
     df0:	af 8d       	ldd	r26, Y+31	; 0x1f
     df2:	b8 a1       	ldd	r27, Y+32	; 0x20
     df4:	48 0e       	add	r4, r24
     df6:	59 1e       	adc	r5, r25
     df8:	6a 1e       	adc	r6, r26
     dfa:	7b 1e       	adc	r7, r27
     dfc:	d8 01       	movw	r26, r16
     dfe:	5e 96       	adiw	r26, 0x1e	; 30
     e00:	4d 92       	st	X+, r4
     e02:	5d 92       	st	X+, r5
     e04:	6d 92       	st	X+, r6
     e06:	7c 92       	st	X, r7
     e08:	91 97       	sbiw	r26, 0x21	; 33
	fs->database = bsect + sysect;						/* Data start sector */
     e0a:	89 89       	ldd	r24, Y+17	; 0x11
     e0c:	9a 89       	ldd	r25, Y+18	; 0x12
     e0e:	ab 89       	ldd	r26, Y+19	; 0x13
     e10:	bc 89       	ldd	r27, Y+20	; 0x14
     e12:	a8 0e       	add	r10, r24
     e14:	b9 1e       	adc	r11, r25
     e16:	ca 1e       	adc	r12, r26
     e18:	db 1e       	adc	r13, r27
     e1a:	d8 01       	movw	r26, r16
     e1c:	96 96       	adiw	r26, 0x26	; 38
     e1e:	ad 92       	st	X+, r10
     e20:	bd 92       	st	X+, r11
     e22:	cd 92       	st	X+, r12
     e24:	dc 92       	st	X, r13
     e26:	99 97       	sbiw	r26, 0x29	; 41
	if (fmt == FS_FAT32) {
     e28:	b9 2d       	mov	r27, r9
     e2a:	b3 30       	cpi	r27, 0x03	; 3
     e2c:	c1 f4       	brne	.+48     	; 0xe5e <find_volume+0x37e>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
     e2e:	21 14       	cp	r2, r1
     e30:	31 04       	cpc	r3, r1
     e32:	09 f0       	breq	.+2      	; 0xe36 <find_volume+0x356>
     e34:	d7 c0       	rjmp	.+430    	; 0xfe4 <find_volume+0x504>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
     e36:	f7 01       	movw	r30, r14
     e38:	84 a5       	ldd	r24, Z+44	; 0x2c
     e3a:	95 a5       	ldd	r25, Z+45	; 0x2d
     e3c:	a6 a5       	ldd	r26, Z+46	; 0x2e
     e3e:	b7 a5       	ldd	r27, Z+47	; 0x2f
     e40:	f8 01       	movw	r30, r16
     e42:	82 a3       	std	Z+34, r24	; 0x22
     e44:	93 a3       	std	Z+35, r25	; 0x23
     e46:	a4 a3       	std	Z+36, r26	; 0x24
     e48:	b5 a3       	std	Z+37, r27	; 0x25
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
     e4a:	da 01       	movw	r26, r20
     e4c:	c9 01       	movw	r24, r18
     e4e:	e2 e0       	ldi	r30, 0x02	; 2
     e50:	88 0f       	add	r24, r24
     e52:	99 1f       	adc	r25, r25
     e54:	aa 1f       	adc	r26, r26
     e56:	bb 1f       	adc	r27, r27
     e58:	ea 95       	dec	r30
     e5a:	d1 f7       	brne	.-12     	; 0xe50 <find_volume+0x370>
     e5c:	2a c0       	rjmp	.+84     	; 0xeb2 <find_volume+0x3d2>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
     e5e:	21 14       	cp	r2, r1
     e60:	31 04       	cpc	r3, r1
     e62:	09 f4       	brne	.+2      	; 0xe66 <find_volume+0x386>
     e64:	bf c0       	rjmp	.+382    	; 0xfe4 <find_volume+0x504>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
     e66:	89 8d       	ldd	r24, Y+25	; 0x19
     e68:	9a 8d       	ldd	r25, Y+26	; 0x1a
     e6a:	ab 8d       	ldd	r26, Y+27	; 0x1b
     e6c:	bc 8d       	ldd	r27, Y+28	; 0x1c
     e6e:	84 0d       	add	r24, r4
     e70:	95 1d       	adc	r25, r5
     e72:	a6 1d       	adc	r26, r6
     e74:	b7 1d       	adc	r27, r7
     e76:	f8 01       	movw	r30, r16
     e78:	82 a3       	std	Z+34, r24	; 0x22
     e7a:	93 a3       	std	Z+35, r25	; 0x23
     e7c:	a4 a3       	std	Z+36, r26	; 0x24
     e7e:	b5 a3       	std	Z+37, r27	; 0x25
     e80:	da 01       	movw	r26, r20
     e82:	c9 01       	movw	r24, r18
     e84:	88 0f       	add	r24, r24
     e86:	99 1f       	adc	r25, r25
     e88:	aa 1f       	adc	r26, r26
     e8a:	bb 1f       	adc	r27, r27
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
     e8c:	f9 2d       	mov	r31, r9
     e8e:	f2 30       	cpi	r31, 0x02	; 2
     e90:	81 f0       	breq	.+32     	; 0xeb2 <find_volume+0x3d2>
     e92:	82 0f       	add	r24, r18
     e94:	93 1f       	adc	r25, r19
     e96:	a4 1f       	adc	r26, r20
     e98:	b5 1f       	adc	r27, r21
     e9a:	b6 95       	lsr	r27
     e9c:	a7 95       	ror	r26
     e9e:	97 95       	ror	r25
     ea0:	87 95       	ror	r24
     ea2:	21 70       	andi	r18, 0x01	; 1
     ea4:	30 70       	andi	r19, 0x00	; 0
     ea6:	40 70       	andi	r20, 0x00	; 0
     ea8:	50 70       	andi	r21, 0x00	; 0
     eaa:	82 0f       	add	r24, r18
     eac:	93 1f       	adc	r25, r19
     eae:	a4 1f       	adc	r26, r20
     eb0:	b5 1f       	adc	r27, r21
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than needed) */
     eb2:	81 50       	subi	r24, 0x01	; 1
     eb4:	9e 4f       	sbci	r25, 0xFE	; 254
     eb6:	af 4f       	sbci	r26, 0xFF	; 255
     eb8:	bf 4f       	sbci	r27, 0xFF	; 255
     eba:	29 e0       	ldi	r18, 0x09	; 9
     ebc:	b6 95       	lsr	r27
     ebe:	a7 95       	ror	r26
     ec0:	97 95       	ror	r25
     ec2:	87 95       	ror	r24
     ec4:	2a 95       	dec	r18
     ec6:	d1 f7       	brne	.-12     	; 0xebc <find_volume+0x3dc>
     ec8:	2d 89       	ldd	r18, Y+21	; 0x15
     eca:	3e 89       	ldd	r19, Y+22	; 0x16
     ecc:	4f 89       	ldd	r20, Y+23	; 0x17
     ece:	58 8d       	ldd	r21, Y+24	; 0x18
     ed0:	28 17       	cp	r18, r24
     ed2:	39 07       	cpc	r19, r25
     ed4:	4a 07       	cpc	r20, r26
     ed6:	5b 07       	cpc	r21, r27
     ed8:	08 f4       	brcc	.+2      	; 0xedc <find_volume+0x3fc>
     eda:	84 c0       	rjmp	.+264    	; 0xfe4 <find_volume+0x504>
		return FR_NO_FILESYSTEM;

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
     edc:	8f ef       	ldi	r24, 0xFF	; 255
     ede:	9f ef       	ldi	r25, 0xFF	; 255
     ee0:	dc 01       	movw	r26, r24
     ee2:	f8 01       	movw	r30, r16
     ee4:	86 87       	std	Z+14, r24	; 0x0e
     ee6:	97 87       	std	Z+15, r25	; 0x0f
     ee8:	a0 8b       	std	Z+16, r26	; 0x10
     eea:	b1 8b       	std	Z+17, r27	; 0x11
     eec:	82 87       	std	Z+10, r24	; 0x0a
     eee:	93 87       	std	Z+11, r25	; 0x0b
     ef0:	a4 87       	std	Z+12, r26	; 0x0c
     ef2:	b5 87       	std	Z+13, r27	; 0x0d

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
     ef4:	80 e8       	ldi	r24, 0x80	; 128
     ef6:	85 83       	std	Z+5, r24	; 0x05
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
     ef8:	f9 2d       	mov	r31, r9
     efa:	f3 30       	cpi	r31, 0x03	; 3
     efc:	09 f0       	breq	.+2      	; 0xf00 <find_volume+0x420>
     efe:	56 c0       	rjmp	.+172    	; 0xfac <find_volume+0x4cc>
		&& LD_WORD(fs->win+BPB_FSInfo) == 1
     f00:	d7 01       	movw	r26, r14
     f02:	d0 96       	adiw	r26, 0x30	; 48
     f04:	8d 91       	ld	r24, X+
     f06:	9c 91       	ld	r25, X
     f08:	d1 97       	sbiw	r26, 0x31	; 49
     f0a:	81 30       	cpi	r24, 0x01	; 1
     f0c:	91 05       	cpc	r25, r1
     f0e:	09 f0       	breq	.+2      	; 0xf12 <find_volume+0x432>
     f10:	4d c0       	rjmp	.+154    	; 0xfac <find_volume+0x4cc>
		&& move_window(fs, bsect + 1) == FR_OK)
     f12:	49 89       	ldd	r20, Y+17	; 0x11
     f14:	5a 89       	ldd	r21, Y+18	; 0x12
     f16:	6b 89       	ldd	r22, Y+19	; 0x13
     f18:	7c 89       	ldd	r23, Y+20	; 0x14
     f1a:	4f 5f       	subi	r20, 0xFF	; 255
     f1c:	5f 4f       	sbci	r21, 0xFF	; 255
     f1e:	6f 4f       	sbci	r22, 0xFF	; 255
     f20:	7f 4f       	sbci	r23, 0xFF	; 255
     f22:	c8 01       	movw	r24, r16
     f24:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <move_window>
     f28:	88 23       	and	r24, r24
     f2a:	09 f0       	breq	.+2      	; 0xf2e <find_volume+0x44e>
     f2c:	3f c0       	rjmp	.+126    	; 0xfac <find_volume+0x4cc>
	{
		fs->fsi_flag = 0;
     f2e:	f8 01       	movw	r30, r16
     f30:	15 82       	std	Z+5, r1	; 0x05
		if (LD_WORD(fs->win+BS_55AA) == 0xAA55	/* Load FSINFO data if available */
     f32:	f7 01       	movw	r30, r14
     f34:	e2 50       	subi	r30, 0x02	; 2
     f36:	fe 4f       	sbci	r31, 0xFE	; 254
     f38:	80 81       	ld	r24, Z
     f3a:	91 81       	ldd	r25, Z+1	; 0x01
     f3c:	fa ea       	ldi	r31, 0xAA	; 170
     f3e:	85 35       	cpi	r24, 0x55	; 85
     f40:	9f 07       	cpc	r25, r31
     f42:	a1 f5       	brne	.+104    	; 0xfac <find_volume+0x4cc>
			&& LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252
     f44:	f8 01       	movw	r30, r16
     f46:	86 a5       	ldd	r24, Z+46	; 0x2e
     f48:	97 a5       	ldd	r25, Z+47	; 0x2f
     f4a:	a0 a9       	ldd	r26, Z+48	; 0x30
     f4c:	b1 a9       	ldd	r27, Z+49	; 0x31
     f4e:	82 35       	cpi	r24, 0x52	; 82
     f50:	f2 e5       	ldi	r31, 0x52	; 82
     f52:	9f 07       	cpc	r25, r31
     f54:	f1 e6       	ldi	r31, 0x61	; 97
     f56:	af 07       	cpc	r26, r31
     f58:	f1 e4       	ldi	r31, 0x41	; 65
     f5a:	bf 07       	cpc	r27, r31
     f5c:	39 f5       	brne	.+78     	; 0xfac <find_volume+0x4cc>
			&& LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272)
     f5e:	f7 01       	movw	r30, r14
     f60:	ec 51       	subi	r30, 0x1C	; 28
     f62:	fe 4f       	sbci	r31, 0xFE	; 254
     f64:	80 81       	ld	r24, Z
     f66:	91 81       	ldd	r25, Z+1	; 0x01
     f68:	a2 81       	ldd	r26, Z+2	; 0x02
     f6a:	b3 81       	ldd	r27, Z+3	; 0x03
     f6c:	82 37       	cpi	r24, 0x72	; 114
     f6e:	22 e7       	ldi	r18, 0x72	; 114
     f70:	92 07       	cpc	r25, r18
     f72:	21 e4       	ldi	r18, 0x41	; 65
     f74:	a2 07       	cpc	r26, r18
     f76:	21 e6       	ldi	r18, 0x61	; 97
     f78:	b2 07       	cpc	r27, r18
     f7a:	c1 f4       	brne	.+48     	; 0xfac <find_volume+0x4cc>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
     f7c:	f7 01       	movw	r30, r14
     f7e:	e8 51       	subi	r30, 0x18	; 24
     f80:	fe 4f       	sbci	r31, 0xFE	; 254
     f82:	80 81       	ld	r24, Z
     f84:	91 81       	ldd	r25, Z+1	; 0x01
     f86:	a2 81       	ldd	r26, Z+2	; 0x02
     f88:	b3 81       	ldd	r27, Z+3	; 0x03
     f8a:	f8 01       	movw	r30, r16
     f8c:	86 87       	std	Z+14, r24	; 0x0e
     f8e:	97 87       	std	Z+15, r25	; 0x0f
     f90:	a0 8b       	std	Z+16, r26	; 0x10
     f92:	b1 8b       	std	Z+17, r27	; 0x11
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
     f94:	f7 01       	movw	r30, r14
     f96:	e4 51       	subi	r30, 0x14	; 20
     f98:	fe 4f       	sbci	r31, 0xFE	; 254
     f9a:	80 81       	ld	r24, Z
     f9c:	91 81       	ldd	r25, Z+1	; 0x01
     f9e:	a2 81       	ldd	r26, Z+2	; 0x02
     fa0:	b3 81       	ldd	r27, Z+3	; 0x03
     fa2:	f8 01       	movw	r30, r16
     fa4:	82 87       	std	Z+10, r24	; 0x0a
     fa6:	93 87       	std	Z+11, r25	; 0x0b
     fa8:	a4 87       	std	Z+12, r26	; 0x0c
     faa:	b5 87       	std	Z+13, r27	; 0x0d
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
     fac:	d8 01       	movw	r26, r16
     fae:	9c 92       	st	X, r9
	fs->id = ++Fsid;	/* File system mount ID */
     fb0:	80 91 8d 00 	lds	r24, 0x008D
     fb4:	90 91 8e 00 	lds	r25, 0x008E
     fb8:	01 96       	adiw	r24, 0x01	; 1
     fba:	90 93 8e 00 	sts	0x008E, r25
     fbe:	80 93 8d 00 	sts	0x008D, r24
     fc2:	17 96       	adiw	r26, 0x07	; 7
     fc4:	9c 93       	st	X, r25
     fc6:	8e 93       	st	-X, r24
     fc8:	16 97       	sbiw	r26, 0x06	; 6
     fca:	04 c0       	rjmp	.+8      	; 0xfd4 <find_volume+0x4f4>


	/* Get logical drive number from the path name */
	*rfs = 0;
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
     fcc:	8b e0       	ldi	r24, 0x0B	; 11
     fce:	0b c0       	rjmp	.+22     	; 0xfe6 <find_volume+0x506>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
     fd0:	8c e0       	ldi	r24, 0x0C	; 12
     fd2:	09 c0       	rjmp	.+18     	; 0xfe6 <find_volume+0x506>
	if (fs->fs_type) {					/* If the volume has been mounted */
		stat = disk_status(fs->drv);
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
			return FR_OK;				/* The file system object is valid */
     fd4:	80 e0       	ldi	r24, 0x00	; 0
     fd6:	07 c0       	rjmp	.+14     	; 0xfe6 <find_volume+0x506>

	fs->fs_type = 0;					/* Clear the file system object */
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
     fd8:	83 e0       	ldi	r24, 0x03	; 3
     fda:	05 c0       	rjmp	.+10     	; 0xfe6 <find_volume+0x506>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
		return FR_WRITE_PROTECTED;
     fdc:	8a e0       	ldi	r24, 0x0A	; 10
     fde:	03 c0       	rjmp	.+6      	; 0xfe6 <find_volume+0x506>
		do {								/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
		} while (!LD2PT(vol) && fmt && ++i < 4);
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	01 c0       	rjmp	.+2      	; 0xfe6 <find_volume+0x506>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than needed) */
		return FR_NO_FILESYSTEM;
     fe4:	8d e0       	ldi	r24, 0x0D	; 13
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
}
     fe6:	a0 96       	adiw	r28, 0x20	; 32
     fe8:	0f b6       	in	r0, 0x3f	; 63
     fea:	f8 94       	cli
     fec:	de bf       	out	0x3e, r29	; 62
     fee:	0f be       	out	0x3f, r0	; 63
     ff0:	cd bf       	out	0x3d, r28	; 61
     ff2:	cf 91       	pop	r28
     ff4:	df 91       	pop	r29
     ff6:	1f 91       	pop	r17
     ff8:	0f 91       	pop	r16
     ffa:	ff 90       	pop	r15
     ffc:	ef 90       	pop	r14
     ffe:	df 90       	pop	r13
    1000:	cf 90       	pop	r12
    1002:	bf 90       	pop	r11
    1004:	af 90       	pop	r10
    1006:	9f 90       	pop	r9
    1008:	8f 90       	pop	r8
    100a:	7f 90       	pop	r7
    100c:	6f 90       	pop	r6
    100e:	5f 90       	pop	r5
    1010:	4f 90       	pop	r4
    1012:	3f 90       	pop	r3
    1014:	2f 90       	pop	r2
    1016:	08 95       	ret

00001018 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
    1018:	0f 93       	push	r16
    101a:	1f 93       	push	r17
    101c:	cf 93       	push	r28
    101e:	df 93       	push	r29
    1020:	ec 01       	movw	r28, r24
	FRESULT res;


	res = sync_window(fs);
    1022:	0e 94 95 04 	call	0x92a	; 0x92a <sync_window>
    1026:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    1028:	88 23       	and	r24, r24
    102a:	09 f0       	breq	.+2      	; 0x102e <sync_fs+0x16>
    102c:	5f c0       	rjmp	.+190    	; 0x10ec <sync_fs+0xd4>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
    102e:	88 81       	ld	r24, Y
    1030:	83 30       	cpi	r24, 0x03	; 3
    1032:	09 f0       	breq	.+2      	; 0x1036 <sync_fs+0x1e>
    1034:	51 c0       	rjmp	.+162    	; 0x10d8 <sync_fs+0xc0>
    1036:	8d 81       	ldd	r24, Y+5	; 0x05
    1038:	81 30       	cpi	r24, 0x01	; 1
    103a:	09 f0       	breq	.+2      	; 0x103e <sync_fs+0x26>
    103c:	4d c0       	rjmp	.+154    	; 0x10d8 <sync_fs+0xc0>
			/* Create FSINFO structure */
			mem_set(fs->win, 0, SS(fs));
    103e:	8e 01       	movw	r16, r28
    1040:	02 5d       	subi	r16, 0xD2	; 210
    1042:	1f 4f       	sbci	r17, 0xFF	; 255
    1044:	c8 01       	movw	r24, r16
    1046:	60 e0       	ldi	r22, 0x00	; 0
    1048:	70 e0       	ldi	r23, 0x00	; 0
    104a:	40 e0       	ldi	r20, 0x00	; 0
    104c:	52 e0       	ldi	r21, 0x02	; 2
    104e:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <mem_set>
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    1052:	fe 01       	movw	r30, r28
    1054:	e4 5d       	subi	r30, 0xD4	; 212
    1056:	fd 4f       	sbci	r31, 0xFD	; 253
    1058:	85 e5       	ldi	r24, 0x55	; 85
    105a:	9a ea       	ldi	r25, 0xAA	; 170
    105c:	91 83       	std	Z+1, r25	; 0x01
    105e:	80 83       	st	Z, r24
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    1060:	82 e5       	ldi	r24, 0x52	; 82
    1062:	92 e5       	ldi	r25, 0x52	; 82
    1064:	a1 e6       	ldi	r26, 0x61	; 97
    1066:	b1 e4       	ldi	r27, 0x41	; 65
    1068:	8e a7       	std	Y+46, r24	; 0x2e
    106a:	9f a7       	std	Y+47, r25	; 0x2f
    106c:	a8 ab       	std	Y+48, r26	; 0x30
    106e:	b9 ab       	std	Y+49, r27	; 0x31
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    1070:	fe 01       	movw	r30, r28
    1072:	ee 5e       	subi	r30, 0xEE	; 238
    1074:	fd 4f       	sbci	r31, 0xFD	; 253
    1076:	82 e7       	ldi	r24, 0x72	; 114
    1078:	92 e7       	ldi	r25, 0x72	; 114
    107a:	a1 e4       	ldi	r26, 0x41	; 65
    107c:	b1 e6       	ldi	r27, 0x61	; 97
    107e:	80 83       	st	Z, r24
    1080:	91 83       	std	Z+1, r25	; 0x01
    1082:	a2 83       	std	Z+2, r26	; 0x02
    1084:	b3 83       	std	Z+3, r27	; 0x03
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    1086:	fe 01       	movw	r30, r28
    1088:	ea 5e       	subi	r30, 0xEA	; 234
    108a:	fd 4f       	sbci	r31, 0xFD	; 253
    108c:	8e 85       	ldd	r24, Y+14	; 0x0e
    108e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1090:	a8 89       	ldd	r26, Y+16	; 0x10
    1092:	b9 89       	ldd	r27, Y+17	; 0x11
    1094:	80 83       	st	Z, r24
    1096:	91 83       	std	Z+1, r25	; 0x01
    1098:	a2 83       	std	Z+2, r26	; 0x02
    109a:	b3 83       	std	Z+3, r27	; 0x03
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    109c:	fe 01       	movw	r30, r28
    109e:	e6 5e       	subi	r30, 0xE6	; 230
    10a0:	fd 4f       	sbci	r31, 0xFD	; 253
    10a2:	8a 85       	ldd	r24, Y+10	; 0x0a
    10a4:	9b 85       	ldd	r25, Y+11	; 0x0b
    10a6:	ac 85       	ldd	r26, Y+12	; 0x0c
    10a8:	bd 85       	ldd	r27, Y+13	; 0x0d
    10aa:	80 83       	st	Z, r24
    10ac:	91 83       	std	Z+1, r25	; 0x01
    10ae:	a2 83       	std	Z+2, r26	; 0x02
    10b0:	b3 83       	std	Z+3, r27	; 0x03
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
    10b2:	2a 8d       	ldd	r18, Y+26	; 0x1a
    10b4:	3b 8d       	ldd	r19, Y+27	; 0x1b
    10b6:	4c 8d       	ldd	r20, Y+28	; 0x1c
    10b8:	5d 8d       	ldd	r21, Y+29	; 0x1d
    10ba:	2f 5f       	subi	r18, 0xFF	; 255
    10bc:	3f 4f       	sbci	r19, 0xFF	; 255
    10be:	4f 4f       	sbci	r20, 0xFF	; 255
    10c0:	5f 4f       	sbci	r21, 0xFF	; 255
    10c2:	2a a7       	std	Y+42, r18	; 0x2a
    10c4:	3b a7       	std	Y+43, r19	; 0x2b
    10c6:	4c a7       	std	Y+44, r20	; 0x2c
    10c8:	5d a7       	std	Y+45, r21	; 0x2d
			disk_write(fs->drv, fs->win, fs->winsect, 1);
    10ca:	89 81       	ldd	r24, Y+1	; 0x01
    10cc:	b8 01       	movw	r22, r16
    10ce:	01 e0       	ldi	r16, 0x01	; 1
    10d0:	10 e0       	ldi	r17, 0x00	; 0
    10d2:	0e 94 c2 02 	call	0x584	; 0x584 <disk_write>
			fs->fsi_flag = 0;
    10d6:	1d 82       	std	Y+5, r1	; 0x05
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    10d8:	89 81       	ldd	r24, Y+1	; 0x01
    10da:	60 e0       	ldi	r22, 0x00	; 0
    10dc:	40 e0       	ldi	r20, 0x00	; 0
    10de:	50 e0       	ldi	r21, 0x00	; 0
    10e0:	0e 94 2e 03 	call	0x65c	; 0x65c <disk_ioctl>
    10e4:	91 e0       	ldi	r25, 0x01	; 1
    10e6:	88 23       	and	r24, r24
    10e8:	09 f4       	brne	.+2      	; 0x10ec <sync_fs+0xd4>
    10ea:	90 e0       	ldi	r25, 0x00	; 0
			res = FR_DISK_ERR;
	}

	return res;
}
    10ec:	89 2f       	mov	r24, r25
    10ee:	df 91       	pop	r29
    10f0:	cf 91       	pop	r28
    10f2:	1f 91       	pop	r17
    10f4:	0f 91       	pop	r16
    10f6:	08 95       	ret

000010f8 <ld_clust.clone.0>:
	BYTE* dir	/* Pointer to the directory entry */
)
{
	DWORD cl;

	cl = LD_WORD(dir+DIR_FstClusLO);
    10f8:	fb 01       	movw	r30, r22
    10fa:	22 8d       	ldd	r18, Z+26	; 0x1a
    10fc:	33 8d       	ldd	r19, Z+27	; 0x1b
    10fe:	40 e0       	ldi	r20, 0x00	; 0
    1100:	50 e0       	ldi	r21, 0x00	; 0
	if (fs->fs_type == FS_FAT32)
    1102:	83 30       	cpi	r24, 0x03	; 3
    1104:	59 f4       	brne	.+22     	; 0x111c <ld_clust.clone.0+0x24>
		cl |= (DWORD)LD_WORD(dir+DIR_FstClusHI) << 16;
    1106:	84 89       	ldd	r24, Z+20	; 0x14
    1108:	95 89       	ldd	r25, Z+21	; 0x15
    110a:	a0 e0       	ldi	r26, 0x00	; 0
    110c:	b0 e0       	ldi	r27, 0x00	; 0
    110e:	dc 01       	movw	r26, r24
    1110:	99 27       	eor	r25, r25
    1112:	88 27       	eor	r24, r24
    1114:	28 2b       	or	r18, r24
    1116:	39 2b       	or	r19, r25
    1118:	4a 2b       	or	r20, r26
    111a:	5b 2b       	or	r21, r27

	return cl;
}
    111c:	b9 01       	movw	r22, r18
    111e:	ca 01       	movw	r24, r20
    1120:	08 95       	ret

00001122 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    1122:	cf 93       	push	r28
    1124:	df 93       	push	r29
    1126:	ec 01       	movw	r28, r24
    1128:	cb 01       	movw	r24, r22
    112a:	ba 01       	movw	r22, r20
	clst -= 2;
    112c:	62 50       	subi	r22, 0x02	; 2
    112e:	70 40       	sbci	r23, 0x00	; 0
    1130:	80 40       	sbci	r24, 0x00	; 0
    1132:	90 40       	sbci	r25, 0x00	; 0
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    1134:	2a 89       	ldd	r18, Y+18	; 0x12
    1136:	3b 89       	ldd	r19, Y+19	; 0x13
    1138:	4c 89       	ldd	r20, Y+20	; 0x14
    113a:	5d 89       	ldd	r21, Y+21	; 0x15
    113c:	22 50       	subi	r18, 0x02	; 2
    113e:	30 40       	sbci	r19, 0x00	; 0
    1140:	40 40       	sbci	r20, 0x00	; 0
    1142:	50 40       	sbci	r21, 0x00	; 0
    1144:	62 17       	cp	r22, r18
    1146:	73 07       	cpc	r23, r19
    1148:	84 07       	cpc	r24, r20
    114a:	95 07       	cpc	r25, r21
    114c:	88 f4       	brcc	.+34     	; 0x1170 <clust2sect+0x4e>
	return clst * fs->csize + fs->database;
    114e:	2a 81       	ldd	r18, Y+2	; 0x02
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	40 e0       	ldi	r20, 0x00	; 0
    1154:	50 e0       	ldi	r21, 0x00	; 0
    1156:	0e 94 86 1c 	call	0x390c	; 0x390c <__mulsi3>
    115a:	9b 01       	movw	r18, r22
    115c:	ac 01       	movw	r20, r24
    115e:	8e a1       	ldd	r24, Y+38	; 0x26
    1160:	9f a1       	ldd	r25, Y+39	; 0x27
    1162:	a8 a5       	ldd	r26, Y+40	; 0x28
    1164:	b9 a5       	ldd	r27, Y+41	; 0x29
    1166:	28 0f       	add	r18, r24
    1168:	39 1f       	adc	r19, r25
    116a:	4a 1f       	adc	r20, r26
    116c:	5b 1f       	adc	r21, r27
    116e:	03 c0       	rjmp	.+6      	; 0x1176 <clust2sect+0x54>
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    1170:	20 e0       	ldi	r18, 0x00	; 0
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	a9 01       	movw	r20, r18
	return clst * fs->csize + fs->database;
}
    1176:	b9 01       	movw	r22, r18
    1178:	ca 01       	movw	r24, r20
    117a:	df 91       	pop	r29
    117c:	cf 91       	pop	r28
    117e:	08 95       	ret

00001180 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
    1180:	bf 92       	push	r11
    1182:	cf 92       	push	r12
    1184:	df 92       	push	r13
    1186:	ef 92       	push	r14
    1188:	ff 92       	push	r15
    118a:	0f 93       	push	r16
    118c:	1f 93       	push	r17
    118e:	cf 93       	push	r28
    1190:	df 93       	push	r29
    1192:	ec 01       	movw	r28, r24
    1194:	6a 01       	movw	r12, r20
    1196:	7b 01       	movw	r14, r22
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
    1198:	42 30       	cpi	r20, 0x02	; 2
    119a:	51 05       	cpc	r21, r1
    119c:	61 05       	cpc	r22, r1
    119e:	71 05       	cpc	r23, r1
    11a0:	08 f4       	brcc	.+2      	; 0x11a4 <get_fat+0x24>
    11a2:	a2 c0       	rjmp	.+324    	; 0x12e8 <get_fat+0x168>
    11a4:	8a 89       	ldd	r24, Y+18	; 0x12
    11a6:	9b 89       	ldd	r25, Y+19	; 0x13
    11a8:	ac 89       	ldd	r26, Y+20	; 0x14
    11aa:	bd 89       	ldd	r27, Y+21	; 0x15
    11ac:	48 17       	cp	r20, r24
    11ae:	59 07       	cpc	r21, r25
    11b0:	6a 07       	cpc	r22, r26
    11b2:	7b 07       	cpc	r23, r27
    11b4:	08 f0       	brcs	.+2      	; 0x11b8 <get_fat+0x38>
    11b6:	98 c0       	rjmp	.+304    	; 0x12e8 <get_fat+0x168>
		return 1;

	switch (fs->fs_type) {
    11b8:	88 81       	ld	r24, Y
    11ba:	82 30       	cpi	r24, 0x02	; 2
    11bc:	09 f4       	brne	.+2      	; 0x11c0 <get_fat+0x40>
    11be:	56 c0       	rjmp	.+172    	; 0x126c <get_fat+0xec>
    11c0:	83 30       	cpi	r24, 0x03	; 3
    11c2:	09 f4       	brne	.+2      	; 0x11c6 <get_fat+0x46>
    11c4:	6f c0       	rjmp	.+222    	; 0x12a4 <get_fat+0x124>
    11c6:	81 30       	cpi	r24, 0x01	; 1
    11c8:	09 f0       	breq	.+2      	; 0x11cc <get_fat+0x4c>
    11ca:	8e c0       	rjmp	.+284    	; 0x12e8 <get_fat+0x168>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
    11cc:	8a 01       	movw	r16, r20
    11ce:	16 95       	lsr	r17
    11d0:	07 95       	ror	r16
    11d2:	04 0f       	add	r16, r20
    11d4:	15 1f       	adc	r17, r21
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    11d6:	a8 01       	movw	r20, r16
    11d8:	45 2f       	mov	r20, r21
    11da:	55 27       	eor	r21, r21
    11dc:	46 95       	lsr	r20
    11de:	60 e0       	ldi	r22, 0x00	; 0
    11e0:	70 e0       	ldi	r23, 0x00	; 0
    11e2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    11e4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    11e6:	a8 a1       	ldd	r26, Y+32	; 0x20
    11e8:	b9 a1       	ldd	r27, Y+33	; 0x21
    11ea:	48 0f       	add	r20, r24
    11ec:	59 1f       	adc	r21, r25
    11ee:	6a 1f       	adc	r22, r26
    11f0:	7b 1f       	adc	r23, r27
    11f2:	ce 01       	movw	r24, r28
    11f4:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <move_window>
    11f8:	88 23       	and	r24, r24
    11fa:	09 f0       	breq	.+2      	; 0x11fe <get_fat+0x7e>
    11fc:	7a c0       	rjmp	.+244    	; 0x12f2 <get_fat+0x172>
		wc = fs->win[bc % SS(fs)]; bc++;
    11fe:	f8 01       	movw	r30, r16
    1200:	f1 70       	andi	r31, 0x01	; 1
    1202:	ec 0f       	add	r30, r28
    1204:	fd 1f       	adc	r31, r29
    1206:	b6 a4       	ldd	r11, Z+46	; 0x2e
    1208:	0f 5f       	subi	r16, 0xFF	; 255
    120a:	1f 4f       	sbci	r17, 0xFF	; 255
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    120c:	a8 01       	movw	r20, r16
    120e:	45 2f       	mov	r20, r21
    1210:	55 27       	eor	r21, r21
    1212:	46 95       	lsr	r20
    1214:	60 e0       	ldi	r22, 0x00	; 0
    1216:	70 e0       	ldi	r23, 0x00	; 0
    1218:	8e 8d       	ldd	r24, Y+30	; 0x1e
    121a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    121c:	a8 a1       	ldd	r26, Y+32	; 0x20
    121e:	b9 a1       	ldd	r27, Y+33	; 0x21
    1220:	48 0f       	add	r20, r24
    1222:	59 1f       	adc	r21, r25
    1224:	6a 1f       	adc	r22, r26
    1226:	7b 1f       	adc	r23, r27
    1228:	ce 01       	movw	r24, r28
    122a:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <move_window>
    122e:	88 23       	and	r24, r24
    1230:	09 f0       	breq	.+2      	; 0x1234 <get_fat+0xb4>
    1232:	5f c0       	rjmp	.+190    	; 0x12f2 <get_fat+0x172>

	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc = fs->win[bc % SS(fs)]; bc++;
    1234:	2b 2d       	mov	r18, r11
    1236:	30 e0       	ldi	r19, 0x00	; 0
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc |= fs->win[bc % SS(fs)] << 8;
    1238:	11 70       	andi	r17, 0x01	; 1
    123a:	0c 0f       	add	r16, r28
    123c:	1d 1f       	adc	r17, r29
    123e:	f8 01       	movw	r30, r16
    1240:	96 a5       	ldd	r25, Z+46	; 0x2e
    1242:	80 e0       	ldi	r24, 0x00	; 0
    1244:	28 2b       	or	r18, r24
    1246:	39 2b       	or	r19, r25
		return clst & 1 ? wc >> 4 : (wc & 0xFFF);
    1248:	f1 e0       	ldi	r31, 0x01	; 1
    124a:	cf 22       	and	r12, r31
    124c:	dd 24       	eor	r13, r13
    124e:	c1 14       	cp	r12, r1
    1250:	d1 04       	cpc	r13, r1
    1252:	31 f0       	breq	.+12     	; 0x1260 <get_fat+0xe0>
    1254:	14 e0       	ldi	r17, 0x04	; 4
    1256:	36 95       	lsr	r19
    1258:	27 95       	ror	r18
    125a:	1a 95       	dec	r17
    125c:	e1 f7       	brne	.-8      	; 0x1256 <get_fat+0xd6>
    125e:	1f c0       	rjmp	.+62     	; 0x129e <get_fat+0x11e>
    1260:	40 e0       	ldi	r20, 0x00	; 0
    1262:	50 e0       	ldi	r21, 0x00	; 0
    1264:	3f 70       	andi	r19, 0x0F	; 15
    1266:	40 70       	andi	r20, 0x00	; 0
    1268:	50 70       	andi	r21, 0x00	; 0
    126a:	46 c0       	rjmp	.+140    	; 0x12f8 <get_fat+0x178>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    126c:	45 2f       	mov	r20, r21
    126e:	56 2f       	mov	r21, r22
    1270:	67 2f       	mov	r22, r23
    1272:	77 27       	eor	r23, r23
    1274:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1276:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1278:	a8 a1       	ldd	r26, Y+32	; 0x20
    127a:	b9 a1       	ldd	r27, Y+33	; 0x21
    127c:	48 0f       	add	r20, r24
    127e:	59 1f       	adc	r21, r25
    1280:	6a 1f       	adc	r22, r26
    1282:	7b 1f       	adc	r23, r27
    1284:	ce 01       	movw	r24, r28
    1286:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <move_window>
    128a:	88 23       	and	r24, r24
    128c:	91 f5       	brne	.+100    	; 0x12f2 <get_fat+0x172>
		p = &fs->win[clst * 2 % SS(fs)];
    128e:	f6 01       	movw	r30, r12
    1290:	ee 0f       	add	r30, r30
    1292:	ff 1f       	adc	r31, r31
    1294:	f1 70       	andi	r31, 0x01	; 1
		return LD_WORD(p);
    1296:	ec 0f       	add	r30, r28
    1298:	fd 1f       	adc	r31, r29
    129a:	26 a5       	ldd	r18, Z+46	; 0x2e
    129c:	37 a5       	ldd	r19, Z+47	; 0x2f
    129e:	40 e0       	ldi	r20, 0x00	; 0
    12a0:	50 e0       	ldi	r21, 0x00	; 0
    12a2:	2a c0       	rjmp	.+84     	; 0x12f8 <get_fat+0x178>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    12a4:	e7 e0       	ldi	r30, 0x07	; 7
    12a6:	76 95       	lsr	r23
    12a8:	67 95       	ror	r22
    12aa:	57 95       	ror	r21
    12ac:	47 95       	ror	r20
    12ae:	ea 95       	dec	r30
    12b0:	d1 f7       	brne	.-12     	; 0x12a6 <get_fat+0x126>
    12b2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    12b4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    12b6:	a8 a1       	ldd	r26, Y+32	; 0x20
    12b8:	b9 a1       	ldd	r27, Y+33	; 0x21
    12ba:	48 0f       	add	r20, r24
    12bc:	59 1f       	adc	r21, r25
    12be:	6a 1f       	adc	r22, r26
    12c0:	7b 1f       	adc	r23, r27
    12c2:	ce 01       	movw	r24, r28
    12c4:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <move_window>
    12c8:	88 23       	and	r24, r24
    12ca:	99 f4       	brne	.+38     	; 0x12f2 <get_fat+0x172>
		p = &fs->win[clst * 4 % SS(fs)];
    12cc:	f6 01       	movw	r30, r12
    12ce:	ee 0f       	add	r30, r30
    12d0:	ff 1f       	adc	r31, r31
    12d2:	ee 0f       	add	r30, r30
    12d4:	ff 1f       	adc	r31, r31
    12d6:	f1 70       	andi	r31, 0x01	; 1
		return LD_DWORD(p) & 0x0FFFFFFF;
    12d8:	ec 0f       	add	r30, r28
    12da:	fd 1f       	adc	r31, r29
    12dc:	26 a5       	ldd	r18, Z+46	; 0x2e
    12de:	37 a5       	ldd	r19, Z+47	; 0x2f
    12e0:	40 a9       	ldd	r20, Z+48	; 0x30
    12e2:	51 a9       	ldd	r21, Z+49	; 0x31
    12e4:	5f 70       	andi	r21, 0x0F	; 15
    12e6:	08 c0       	rjmp	.+16     	; 0x12f8 <get_fat+0x178>

	default:
		return 1;
    12e8:	21 e0       	ldi	r18, 0x01	; 1
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	40 e0       	ldi	r20, 0x00	; 0
    12ee:	50 e0       	ldi	r21, 0x00	; 0
    12f0:	03 c0       	rjmp	.+6      	; 0x12f8 <get_fat+0x178>
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    12f2:	2f ef       	ldi	r18, 0xFF	; 255
    12f4:	3f ef       	ldi	r19, 0xFF	; 255
    12f6:	a9 01       	movw	r20, r18
}
    12f8:	b9 01       	movw	r22, r18
    12fa:	ca 01       	movw	r24, r20
    12fc:	df 91       	pop	r29
    12fe:	cf 91       	pop	r28
    1300:	1f 91       	pop	r17
    1302:	0f 91       	pop	r16
    1304:	ff 90       	pop	r15
    1306:	ef 90       	pop	r14
    1308:	df 90       	pop	r13
    130a:	cf 90       	pop	r12
    130c:	bf 90       	pop	r11
    130e:	08 95       	ret

00001310 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
    1310:	af 92       	push	r10
    1312:	bf 92       	push	r11
    1314:	cf 92       	push	r12
    1316:	df 92       	push	r13
    1318:	ef 92       	push	r14
    131a:	ff 92       	push	r15
    131c:	0f 93       	push	r16
    131e:	1f 93       	push	r17
    1320:	cf 93       	push	r28
    1322:	df 93       	push	r29
    1324:	ec 01       	movw	r28, r24
    1326:	6b 01       	movw	r12, r22
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
    1328:	7d 83       	std	Y+5, r23	; 0x05
    132a:	6c 83       	std	Y+4, r22	; 0x04
	clst = dp->sclust;		/* Table start cluster (0:root) */
    132c:	ee 80       	ldd	r14, Y+6	; 0x06
    132e:	ff 80       	ldd	r15, Y+7	; 0x07
    1330:	08 85       	ldd	r16, Y+8	; 0x08
    1332:	19 85       	ldd	r17, Y+9	; 0x09
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
    1334:	21 e0       	ldi	r18, 0x01	; 1
    1336:	e2 16       	cp	r14, r18
    1338:	f1 04       	cpc	r15, r1
    133a:	01 05       	cpc	r16, r1
    133c:	11 05       	cpc	r17, r1
    133e:	09 f4       	brne	.+2      	; 0x1342 <dir_sdi+0x32>
    1340:	8a c0       	rjmp	.+276    	; 0x1456 <dir_sdi+0x146>
    1342:	e8 81       	ld	r30, Y
    1344:	f9 81       	ldd	r31, Y+1	; 0x01
    1346:	82 89       	ldd	r24, Z+18	; 0x12
    1348:	93 89       	ldd	r25, Z+19	; 0x13
    134a:	a4 89       	ldd	r26, Z+20	; 0x14
    134c:	b5 89       	ldd	r27, Z+21	; 0x15
    134e:	e8 16       	cp	r14, r24
    1350:	f9 06       	cpc	r15, r25
    1352:	0a 07       	cpc	r16, r26
    1354:	1b 07       	cpc	r17, r27
    1356:	08 f0       	brcs	.+2      	; 0x135a <dir_sdi+0x4a>
    1358:	7e c0       	rjmp	.+252    	; 0x1456 <dir_sdi+0x146>
		return FR_INT_ERR;
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    135a:	e1 14       	cp	r14, r1
    135c:	f1 04       	cpc	r15, r1
    135e:	01 05       	cpc	r16, r1
    1360:	11 05       	cpc	r17, r1
    1362:	c1 f4       	brne	.+48     	; 0x1394 <dir_sdi+0x84>
    1364:	80 81       	ld	r24, Z
    1366:	83 30       	cpi	r24, 0x03	; 3
    1368:	41 f4       	brne	.+16     	; 0x137a <dir_sdi+0x6a>
		clst = dp->fs->dirbase;
    136a:	82 a1       	ldd	r24, Z+34	; 0x22
    136c:	93 a1       	ldd	r25, Z+35	; 0x23
    136e:	a4 a1       	ldd	r26, Z+36	; 0x24
    1370:	b5 a1       	ldd	r27, Z+37	; 0x25

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
    1372:	00 97       	sbiw	r24, 0x00	; 0
    1374:	a1 05       	cpc	r26, r1
    1376:	b1 05       	cpc	r27, r1
    1378:	59 f4       	brne	.+22     	; 0x1390 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
    137a:	80 85       	ldd	r24, Z+8	; 0x08
    137c:	91 85       	ldd	r25, Z+9	; 0x09
    137e:	c8 16       	cp	r12, r24
    1380:	d9 06       	cpc	r13, r25
    1382:	08 f0       	brcs	.+2      	; 0x1386 <dir_sdi+0x76>
    1384:	68 c0       	rjmp	.+208    	; 0x1456 <dir_sdi+0x146>
			return FR_INT_ERR;
		sect = dp->fs->dirbase;
    1386:	62 a1       	ldd	r22, Z+34	; 0x22
    1388:	73 a1       	ldd	r23, Z+35	; 0x23
    138a:	84 a1       	ldd	r24, Z+36	; 0x24
    138c:	95 a1       	ldd	r25, Z+37	; 0x25
    138e:	37 c0       	rjmp	.+110    	; 0x13fe <dir_sdi+0xee>
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
		return FR_INT_ERR;
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
		clst = dp->fs->dirbase;

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
    1390:	7c 01       	movw	r14, r24
    1392:	8d 01       	movw	r16, r26
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
			return FR_INT_ERR;
		sect = dp->fs->dirbase;
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIR * dp->fs->csize;	/* Entries per cluster */
    1394:	a2 80       	ldd	r10, Z+2	; 0x02
    1396:	bb 24       	eor	r11, r11
    1398:	54 e0       	ldi	r21, 0x04	; 4
    139a:	aa 0c       	add	r10, r10
    139c:	bb 1c       	adc	r11, r11
    139e:	5a 95       	dec	r21
    13a0:	e1 f7       	brne	.-8      	; 0x139a <dir_sdi+0x8a>
		while (idx >= ic) {	/* Follow cluster chain */
    13a2:	24 c0       	rjmp	.+72     	; 0x13ec <dir_sdi+0xdc>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
    13a4:	b8 01       	movw	r22, r16
    13a6:	a7 01       	movw	r20, r14
    13a8:	0e 94 c0 08 	call	0x1180	; 0x1180 <get_fat>
    13ac:	7b 01       	movw	r14, r22
    13ae:	8c 01       	movw	r16, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    13b0:	8f ef       	ldi	r24, 0xFF	; 255
    13b2:	e8 16       	cp	r14, r24
    13b4:	8f ef       	ldi	r24, 0xFF	; 255
    13b6:	f8 06       	cpc	r15, r24
    13b8:	8f ef       	ldi	r24, 0xFF	; 255
    13ba:	08 07       	cpc	r16, r24
    13bc:	8f ef       	ldi	r24, 0xFF	; 255
    13be:	18 07       	cpc	r17, r24
    13c0:	09 f4       	brne	.+2      	; 0x13c4 <dir_sdi+0xb4>
    13c2:	47 c0       	rjmp	.+142    	; 0x1452 <dir_sdi+0x142>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
    13c4:	22 e0       	ldi	r18, 0x02	; 2
    13c6:	e2 16       	cp	r14, r18
    13c8:	f1 04       	cpc	r15, r1
    13ca:	01 05       	cpc	r16, r1
    13cc:	11 05       	cpc	r17, r1
    13ce:	08 f4       	brcc	.+2      	; 0x13d2 <dir_sdi+0xc2>
    13d0:	42 c0       	rjmp	.+132    	; 0x1456 <dir_sdi+0x146>
    13d2:	e8 81       	ld	r30, Y
    13d4:	f9 81       	ldd	r31, Y+1	; 0x01
    13d6:	82 89       	ldd	r24, Z+18	; 0x12
    13d8:	93 89       	ldd	r25, Z+19	; 0x13
    13da:	a4 89       	ldd	r26, Z+20	; 0x14
    13dc:	b5 89       	ldd	r27, Z+21	; 0x15
    13de:	e8 16       	cp	r14, r24
    13e0:	f9 06       	cpc	r15, r25
    13e2:	0a 07       	cpc	r16, r26
    13e4:	1b 07       	cpc	r17, r27
    13e6:	b8 f5       	brcc	.+110    	; 0x1456 <dir_sdi+0x146>
				return FR_INT_ERR;
			idx -= ic;
    13e8:	ca 18       	sub	r12, r10
    13ea:	db 08       	sbc	r13, r11
    13ec:	88 81       	ld	r24, Y
    13ee:	99 81       	ldd	r25, Y+1	; 0x01
			return FR_INT_ERR;
		sect = dp->fs->dirbase;
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIR * dp->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
    13f0:	ca 14       	cp	r12, r10
    13f2:	db 04       	cpc	r13, r11
    13f4:	b8 f6       	brcc	.-82     	; 0x13a4 <dir_sdi+0x94>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
				return FR_INT_ERR;
			idx -= ic;
		}
		sect = clust2sect(dp->fs, clst);
    13f6:	a7 01       	movw	r20, r14
    13f8:	b8 01       	movw	r22, r16
    13fa:	0e 94 91 08 	call	0x1122	; 0x1122 <clust2sect>
	}
	dp->clust = clst;	/* Current cluster# */
    13fe:	ea 86       	std	Y+10, r14	; 0x0a
    1400:	fb 86       	std	Y+11, r15	; 0x0b
    1402:	0c 87       	std	Y+12, r16	; 0x0c
    1404:	1d 87       	std	Y+13, r17	; 0x0d
	if (!sect) return FR_INT_ERR;
    1406:	61 15       	cp	r22, r1
    1408:	71 05       	cpc	r23, r1
    140a:	81 05       	cpc	r24, r1
    140c:	91 05       	cpc	r25, r1
    140e:	19 f1       	breq	.+70     	; 0x1456 <dir_sdi+0x146>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIR);					/* Sector# of the directory entry */
    1410:	96 01       	movw	r18, r12
    1412:	44 e0       	ldi	r20, 0x04	; 4
    1414:	36 95       	lsr	r19
    1416:	27 95       	ror	r18
    1418:	4a 95       	dec	r20
    141a:	e1 f7       	brne	.-8      	; 0x1414 <dir_sdi+0x104>
    141c:	40 e0       	ldi	r20, 0x00	; 0
    141e:	50 e0       	ldi	r21, 0x00	; 0
    1420:	26 0f       	add	r18, r22
    1422:	37 1f       	adc	r19, r23
    1424:	48 1f       	adc	r20, r24
    1426:	59 1f       	adc	r21, r25
    1428:	2e 87       	std	Y+14, r18	; 0x0e
    142a:	3f 87       	std	Y+15, r19	; 0x0f
    142c:	48 8b       	std	Y+16, r20	; 0x10
    142e:	59 8b       	std	Y+17, r21	; 0x11
	dp->dir = dp->fs->win + (idx % (SS(dp->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    1430:	88 81       	ld	r24, Y
    1432:	99 81       	ldd	r25, Y+1	; 0x01
    1434:	8e 96       	adiw	r24, 0x2e	; 46
    1436:	2f e0       	ldi	r18, 0x0F	; 15
    1438:	c2 22       	and	r12, r18
    143a:	dd 24       	eor	r13, r13
    143c:	35 e0       	ldi	r19, 0x05	; 5
    143e:	cc 0c       	add	r12, r12
    1440:	dd 1c       	adc	r13, r13
    1442:	3a 95       	dec	r19
    1444:	e1 f7       	brne	.-8      	; 0x143e <dir_sdi+0x12e>
    1446:	8c 0d       	add	r24, r12
    1448:	9d 1d       	adc	r25, r13
    144a:	9b 8b       	std	Y+19, r25	; 0x13
    144c:	8a 8b       	std	Y+18, r24	; 0x12

	return FR_OK;
    144e:	80 e0       	ldi	r24, 0x00	; 0
    1450:	03 c0       	rjmp	.+6      	; 0x1458 <dir_sdi+0x148>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIR * dp->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	01 c0       	rjmp	.+2      	; 0x1458 <dir_sdi+0x148>
			idx -= ic;
		}
		sect = clust2sect(dp->fs, clst);
	}
	dp->clust = clst;	/* Current cluster# */
	if (!sect) return FR_INT_ERR;
    1456:	82 e0       	ldi	r24, 0x02	; 2
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIR);					/* Sector# of the directory entry */
	dp->dir = dp->fs->win + (idx % (SS(dp->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */

	return FR_OK;
}
    1458:	df 91       	pop	r29
    145a:	cf 91       	pop	r28
    145c:	1f 91       	pop	r17
    145e:	0f 91       	pop	r16
    1460:	ff 90       	pop	r15
    1462:	ef 90       	pop	r14
    1464:	df 90       	pop	r13
    1466:	cf 90       	pop	r12
    1468:	bf 90       	pop	r11
    146a:	af 90       	pop	r10
    146c:	08 95       	ret

0000146e <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
    146e:	1f 93       	push	r17
    1470:	cf 93       	push	r28
    1472:	df 93       	push	r29
    1474:	ec 01       	movw	r28, r24
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}

#else			/* Non LFN configuration */
	res = dir_sdi(dp, dp->index);
    1476:	6c 81       	ldd	r22, Y+4	; 0x04
    1478:	7d 81       	ldd	r23, Y+5	; 0x05
    147a:	0e 94 88 09 	call	0x1310	; 0x1310 <dir_sdi>
    147e:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
    1480:	88 23       	and	r24, r24
    1482:	d9 f4       	brne	.+54     	; 0x14ba <dir_remove+0x4c>
		res = move_window(dp->fs, dp->sect);
    1484:	4e 85       	ldd	r20, Y+14	; 0x0e
    1486:	5f 85       	ldd	r21, Y+15	; 0x0f
    1488:	68 89       	ldd	r22, Y+16	; 0x10
    148a:	79 89       	ldd	r23, Y+17	; 0x11
    148c:	88 81       	ld	r24, Y
    148e:	99 81       	ldd	r25, Y+1	; 0x01
    1490:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <move_window>
    1494:	18 2f       	mov	r17, r24
		if (res == FR_OK) {
    1496:	88 23       	and	r24, r24
    1498:	81 f4       	brne	.+32     	; 0x14ba <dir_remove+0x4c>
			mem_set(dp->dir, 0, SZ_DIR);	/* Clear and mark the entry "deleted" */
    149a:	8a 89       	ldd	r24, Y+18	; 0x12
    149c:	9b 89       	ldd	r25, Y+19	; 0x13
    149e:	60 e0       	ldi	r22, 0x00	; 0
    14a0:	70 e0       	ldi	r23, 0x00	; 0
    14a2:	40 e2       	ldi	r20, 0x20	; 32
    14a4:	50 e0       	ldi	r21, 0x00	; 0
    14a6:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <mem_set>
			*dp->dir = DDE;
    14aa:	ea 89       	ldd	r30, Y+18	; 0x12
    14ac:	fb 89       	ldd	r31, Y+19	; 0x13
    14ae:	85 ee       	ldi	r24, 0xE5	; 229
    14b0:	80 83       	st	Z, r24
			dp->fs->wflag = 1;
    14b2:	e8 81       	ld	r30, Y
    14b4:	f9 81       	ldd	r31, Y+1	; 0x01
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	84 83       	std	Z+4, r24	; 0x04
		}
	}
#endif

	return res;
}
    14ba:	81 2f       	mov	r24, r17
    14bc:	df 91       	pop	r29
    14be:	cf 91       	pop	r28
    14c0:	1f 91       	pop	r17
    14c2:	08 95       	ret

000014c4 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
    14c4:	8f 92       	push	r8
    14c6:	9f 92       	push	r9
    14c8:	af 92       	push	r10
    14ca:	bf 92       	push	r11
    14cc:	cf 92       	push	r12
    14ce:	df 92       	push	r13
    14d0:	ef 92       	push	r14
    14d2:	ff 92       	push	r15
    14d4:	0f 93       	push	r16
    14d6:	1f 93       	push	r17
    14d8:	cf 93       	push	r28
    14da:	df 93       	push	r29
    14dc:	ec 01       	movw	r28, r24
    14de:	6a 01       	movw	r12, r20
    14e0:	7b 01       	movw	r14, r22
    14e2:	48 01       	movw	r8, r16
    14e4:	59 01       	movw	r10, r18
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    14e6:	42 30       	cpi	r20, 0x02	; 2
    14e8:	51 05       	cpc	r21, r1
    14ea:	61 05       	cpc	r22, r1
    14ec:	71 05       	cpc	r23, r1
    14ee:	08 f4       	brcc	.+2      	; 0x14f2 <put_fat+0x2e>
    14f0:	c3 c0       	rjmp	.+390    	; 0x1678 <put_fat+0x1b4>
    14f2:	8a 89       	ldd	r24, Y+18	; 0x12
    14f4:	9b 89       	ldd	r25, Y+19	; 0x13
    14f6:	ac 89       	ldd	r26, Y+20	; 0x14
    14f8:	bd 89       	ldd	r27, Y+21	; 0x15
    14fa:	48 17       	cp	r20, r24
    14fc:	59 07       	cpc	r21, r25
    14fe:	6a 07       	cpc	r22, r26
    1500:	7b 07       	cpc	r23, r27
    1502:	08 f0       	brcs	.+2      	; 0x1506 <put_fat+0x42>
    1504:	b9 c0       	rjmp	.+370    	; 0x1678 <put_fat+0x1b4>
		res = FR_INT_ERR;

	} else {
		switch (fs->fs_type) {
    1506:	88 81       	ld	r24, Y
    1508:	82 30       	cpi	r24, 0x02	; 2
    150a:	09 f4       	brne	.+2      	; 0x150e <put_fat+0x4a>
    150c:	68 c0       	rjmp	.+208    	; 0x15de <put_fat+0x11a>
    150e:	83 30       	cpi	r24, 0x03	; 3
    1510:	09 f4       	brne	.+2      	; 0x1514 <put_fat+0x50>
    1512:	80 c0       	rjmp	.+256    	; 0x1614 <put_fat+0x150>
    1514:	81 30       	cpi	r24, 0x01	; 1
    1516:	09 f0       	breq	.+2      	; 0x151a <put_fat+0x56>
    1518:	ab c0       	rjmp	.+342    	; 0x1670 <put_fat+0x1ac>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
    151a:	8a 01       	movw	r16, r20
    151c:	16 95       	lsr	r17
    151e:	07 95       	ror	r16
    1520:	0c 0d       	add	r16, r12
    1522:	1d 1d       	adc	r17, r13
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    1524:	a8 01       	movw	r20, r16
    1526:	45 2f       	mov	r20, r21
    1528:	55 27       	eor	r21, r21
    152a:	46 95       	lsr	r20
    152c:	60 e0       	ldi	r22, 0x00	; 0
    152e:	70 e0       	ldi	r23, 0x00	; 0
    1530:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1532:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1534:	a8 a1       	ldd	r26, Y+32	; 0x20
    1536:	b9 a1       	ldd	r27, Y+33	; 0x21
    1538:	48 0f       	add	r20, r24
    153a:	59 1f       	adc	r21, r25
    153c:	6a 1f       	adc	r22, r26
    153e:	7b 1f       	adc	r23, r27
    1540:	ce 01       	movw	r24, r28
    1542:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <move_window>
			if (res != FR_OK) break;
    1546:	88 23       	and	r24, r24
    1548:	09 f0       	breq	.+2      	; 0x154c <put_fat+0x88>
    154a:	93 c0       	rjmp	.+294    	; 0x1672 <put_fat+0x1ae>
			p = &fs->win[bc % SS(fs)];
    154c:	c8 01       	movw	r24, r16
    154e:	91 70       	andi	r25, 0x01	; 1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    1550:	e1 e0       	ldi	r30, 0x01	; 1
    1552:	ce 22       	and	r12, r30
    1554:	dd 24       	eor	r13, r13
    1556:	c1 14       	cp	r12, r1
    1558:	d1 04       	cpc	r13, r1
    155a:	51 f0       	breq	.+20     	; 0x1570 <put_fat+0xac>
    155c:	fe 01       	movw	r30, r28
    155e:	e8 0f       	add	r30, r24
    1560:	f9 1f       	adc	r31, r25
    1562:	36 a5       	ldd	r19, Z+46	; 0x2e
    1564:	3f 70       	andi	r19, 0x0F	; 15
    1566:	28 2d       	mov	r18, r8
    1568:	22 95       	swap	r18
    156a:	20 7f       	andi	r18, 0xF0	; 240
    156c:	23 2b       	or	r18, r19
    156e:	01 c0       	rjmp	.+2      	; 0x1572 <put_fat+0xae>
    1570:	28 2d       	mov	r18, r8
    1572:	8c 0f       	add	r24, r28
    1574:	9d 1f       	adc	r25, r29
    1576:	fc 01       	movw	r30, r24
    1578:	26 a7       	std	Z+46, r18	; 0x2e
			bc++;
    157a:	0f 5f       	subi	r16, 0xFF	; 255
    157c:	1f 4f       	sbci	r17, 0xFF	; 255
			fs->wflag = 1;
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	8c 83       	std	Y+4, r24	; 0x04
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    1582:	a8 01       	movw	r20, r16
    1584:	45 2f       	mov	r20, r21
    1586:	55 27       	eor	r21, r21
    1588:	46 95       	lsr	r20
    158a:	60 e0       	ldi	r22, 0x00	; 0
    158c:	70 e0       	ldi	r23, 0x00	; 0
    158e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1590:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1592:	a8 a1       	ldd	r26, Y+32	; 0x20
    1594:	b9 a1       	ldd	r27, Y+33	; 0x21
    1596:	48 0f       	add	r20, r24
    1598:	59 1f       	adc	r21, r25
    159a:	6a 1f       	adc	r22, r26
    159c:	7b 1f       	adc	r23, r27
    159e:	ce 01       	movw	r24, r28
    15a0:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <move_window>
			if (res != FR_OK) break;
    15a4:	88 23       	and	r24, r24
    15a6:	09 f0       	breq	.+2      	; 0x15aa <put_fat+0xe6>
    15a8:	64 c0       	rjmp	.+200    	; 0x1672 <put_fat+0x1ae>
			p = &fs->win[bc % SS(fs)];
    15aa:	11 70       	andi	r17, 0x01	; 1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    15ac:	c1 14       	cp	r12, r1
    15ae:	d1 04       	cpc	r13, r1
    15b0:	49 f0       	breq	.+18     	; 0x15c4 <put_fat+0x100>
    15b2:	94 e0       	ldi	r25, 0x04	; 4
    15b4:	b6 94       	lsr	r11
    15b6:	a7 94       	ror	r10
    15b8:	97 94       	ror	r9
    15ba:	87 94       	ror	r8
    15bc:	9a 95       	dec	r25
    15be:	d1 f7       	brne	.-12     	; 0x15b4 <put_fat+0xf0>
    15c0:	98 2d       	mov	r25, r8
    15c2:	08 c0       	rjmp	.+16     	; 0x15d4 <put_fat+0x110>
    15c4:	fe 01       	movw	r30, r28
    15c6:	e0 0f       	add	r30, r16
    15c8:	f1 1f       	adc	r31, r17
    15ca:	96 a5       	ldd	r25, Z+46	; 0x2e
    15cc:	90 7f       	andi	r25, 0xF0	; 240
    15ce:	29 2d       	mov	r18, r9
    15d0:	2f 70       	andi	r18, 0x0F	; 15
    15d2:	92 2b       	or	r25, r18
    15d4:	0c 0f       	add	r16, r28
    15d6:	1d 1f       	adc	r17, r29
    15d8:	f8 01       	movw	r30, r16
    15da:	96 a7       	std	Z+46, r25	; 0x2e
			break;
    15dc:	4a c0       	rjmp	.+148    	; 0x1672 <put_fat+0x1ae>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    15de:	45 2f       	mov	r20, r21
    15e0:	56 2f       	mov	r21, r22
    15e2:	67 2f       	mov	r22, r23
    15e4:	77 27       	eor	r23, r23
    15e6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    15e8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    15ea:	a8 a1       	ldd	r26, Y+32	; 0x20
    15ec:	b9 a1       	ldd	r27, Y+33	; 0x21
    15ee:	48 0f       	add	r20, r24
    15f0:	59 1f       	adc	r21, r25
    15f2:	6a 1f       	adc	r22, r26
    15f4:	7b 1f       	adc	r23, r27
    15f6:	ce 01       	movw	r24, r28
    15f8:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <move_window>
			if (res != FR_OK) break;
    15fc:	88 23       	and	r24, r24
    15fe:	c9 f5       	brne	.+114    	; 0x1672 <put_fat+0x1ae>
			p = &fs->win[clst * 2 % SS(fs)];
    1600:	f6 01       	movw	r30, r12
    1602:	ee 0f       	add	r30, r30
    1604:	ff 1f       	adc	r31, r31
    1606:	f1 70       	andi	r31, 0x01	; 1
    1608:	be 96       	adiw	r30, 0x2e	; 46
			ST_WORD(p, (WORD)val);
    160a:	ec 0f       	add	r30, r28
    160c:	fd 1f       	adc	r31, r29
    160e:	91 82       	std	Z+1, r9	; 0x01
    1610:	80 82       	st	Z, r8
			break;
    1612:	2f c0       	rjmp	.+94     	; 0x1672 <put_fat+0x1ae>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    1614:	e7 e0       	ldi	r30, 0x07	; 7
    1616:	76 95       	lsr	r23
    1618:	67 95       	ror	r22
    161a:	57 95       	ror	r21
    161c:	47 95       	ror	r20
    161e:	ea 95       	dec	r30
    1620:	d1 f7       	brne	.-12     	; 0x1616 <put_fat+0x152>
    1622:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1624:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1626:	a8 a1       	ldd	r26, Y+32	; 0x20
    1628:	b9 a1       	ldd	r27, Y+33	; 0x21
    162a:	48 0f       	add	r20, r24
    162c:	59 1f       	adc	r21, r25
    162e:	6a 1f       	adc	r22, r26
    1630:	7b 1f       	adc	r23, r27
    1632:	ce 01       	movw	r24, r28
    1634:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <move_window>
			if (res != FR_OK) break;
    1638:	88 23       	and	r24, r24
    163a:	d9 f4       	brne	.+54     	; 0x1672 <put_fat+0x1ae>
			p = &fs->win[clst * 4 % SS(fs)];
    163c:	f6 01       	movw	r30, r12
    163e:	ee 0f       	add	r30, r30
    1640:	ff 1f       	adc	r31, r31
    1642:	ee 0f       	add	r30, r30
    1644:	ff 1f       	adc	r31, r31
    1646:	f1 70       	andi	r31, 0x01	; 1
    1648:	be 96       	adiw	r30, 0x2e	; 46
    164a:	ec 0f       	add	r30, r28
    164c:	fd 1f       	adc	r31, r29
			val |= LD_DWORD(p) & 0xF0000000;
    164e:	20 81       	ld	r18, Z
    1650:	31 81       	ldd	r19, Z+1	; 0x01
    1652:	42 81       	ldd	r20, Z+2	; 0x02
    1654:	53 81       	ldd	r21, Z+3	; 0x03
    1656:	20 70       	andi	r18, 0x00	; 0
    1658:	30 70       	andi	r19, 0x00	; 0
    165a:	40 70       	andi	r20, 0x00	; 0
    165c:	50 7f       	andi	r21, 0xF0	; 240
    165e:	28 29       	or	r18, r8
    1660:	39 29       	or	r19, r9
    1662:	4a 29       	or	r20, r10
    1664:	5b 29       	or	r21, r11
			ST_DWORD(p, val);
    1666:	20 83       	st	Z, r18
    1668:	31 83       	std	Z+1, r19	; 0x01
    166a:	42 83       	std	Z+2, r20	; 0x02
    166c:	53 83       	std	Z+3, r21	; 0x03
			break;
    166e:	01 c0       	rjmp	.+2      	; 0x1672 <put_fat+0x1ae>

		default :
			res = FR_INT_ERR;
    1670:	82 e0       	ldi	r24, 0x02	; 2
		}
		fs->wflag = 1;
    1672:	91 e0       	ldi	r25, 0x01	; 1
    1674:	9c 83       	std	Y+4, r25	; 0x04
    1676:	01 c0       	rjmp	.+2      	; 0x167a <put_fat+0x1b6>
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;
    1678:	82 e0       	ldi	r24, 0x02	; 2
		}
		fs->wflag = 1;
	}

	return res;
}
    167a:	df 91       	pop	r29
    167c:	cf 91       	pop	r28
    167e:	1f 91       	pop	r17
    1680:	0f 91       	pop	r16
    1682:	ff 90       	pop	r15
    1684:	ef 90       	pop	r14
    1686:	df 90       	pop	r13
    1688:	cf 90       	pop	r12
    168a:	bf 90       	pop	r11
    168c:	af 90       	pop	r10
    168e:	9f 90       	pop	r9
    1690:	8f 90       	pop	r8
    1692:	08 95       	ret

00001694 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    1694:	4f 92       	push	r4
    1696:	5f 92       	push	r5
    1698:	6f 92       	push	r6
    169a:	7f 92       	push	r7
    169c:	8f 92       	push	r8
    169e:	9f 92       	push	r9
    16a0:	af 92       	push	r10
    16a2:	bf 92       	push	r11
    16a4:	cf 92       	push	r12
    16a6:	df 92       	push	r13
    16a8:	ef 92       	push	r14
    16aa:	ff 92       	push	r15
    16ac:	0f 93       	push	r16
    16ae:	1f 93       	push	r17
    16b0:	cf 93       	push	r28
    16b2:	df 93       	push	r29
    16b4:	ec 01       	movw	r28, r24
    16b6:	2a 01       	movw	r4, r20
    16b8:	3b 01       	movw	r6, r22
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
    16ba:	41 15       	cp	r20, r1
    16bc:	51 05       	cpc	r21, r1
    16be:	61 05       	cpc	r22, r1
    16c0:	71 05       	cpc	r23, r1
    16c2:	99 f4       	brne	.+38     	; 0x16ea <create_chain+0x56>
		scl = fs->last_clust;			/* Get suggested start point */
    16c4:	8a 84       	ldd	r8, Y+10	; 0x0a
    16c6:	9b 84       	ldd	r9, Y+11	; 0x0b
    16c8:	ac 84       	ldd	r10, Y+12	; 0x0c
    16ca:	bd 84       	ldd	r11, Y+13	; 0x0d
		if (!scl || scl >= fs->n_fatent) scl = 1;
    16cc:	81 14       	cp	r8, r1
    16ce:	91 04       	cpc	r9, r1
    16d0:	a1 04       	cpc	r10, r1
    16d2:	b1 04       	cpc	r11, r1
    16d4:	51 f1       	breq	.+84     	; 0x172a <create_chain+0x96>
    16d6:	8a 89       	ldd	r24, Y+18	; 0x12
    16d8:	9b 89       	ldd	r25, Y+19	; 0x13
    16da:	ac 89       	ldd	r26, Y+20	; 0x14
    16dc:	bd 89       	ldd	r27, Y+21	; 0x15
    16de:	88 16       	cp	r8, r24
    16e0:	99 06       	cpc	r9, r25
    16e2:	aa 06       	cpc	r10, r26
    16e4:	bb 06       	cpc	r11, r27
    16e6:	08 f5       	brcc	.+66     	; 0x172a <create_chain+0x96>
    16e8:	25 c0       	rjmp	.+74     	; 0x1734 <create_chain+0xa0>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    16ea:	0e 94 c0 08 	call	0x1180	; 0x1180 <get_fat>
    16ee:	9b 01       	movw	r18, r22
    16f0:	ac 01       	movw	r20, r24
		if (cs < 2) return 1;			/* Invalid value */
    16f2:	62 30       	cpi	r22, 0x02	; 2
    16f4:	71 05       	cpc	r23, r1
    16f6:	81 05       	cpc	r24, r1
    16f8:	91 05       	cpc	r25, r1
    16fa:	08 f4       	brcc	.+2      	; 0x16fe <create_chain+0x6a>
    16fc:	9d c0       	rjmp	.+314    	; 0x1838 <create_chain+0x1a4>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
    16fe:	2f 3f       	cpi	r18, 0xFF	; 255
    1700:	8f ef       	ldi	r24, 0xFF	; 255
    1702:	38 07       	cpc	r19, r24
    1704:	8f ef       	ldi	r24, 0xFF	; 255
    1706:	48 07       	cpc	r20, r24
    1708:	8f ef       	ldi	r24, 0xFF	; 255
    170a:	58 07       	cpc	r21, r24
    170c:	09 f4       	brne	.+2      	; 0x1710 <create_chain+0x7c>
    170e:	98 c0       	rjmp	.+304    	; 0x1840 <create_chain+0x1ac>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    1710:	8a 89       	ldd	r24, Y+18	; 0x12
    1712:	9b 89       	ldd	r25, Y+19	; 0x13
    1714:	ac 89       	ldd	r26, Y+20	; 0x14
    1716:	bd 89       	ldd	r27, Y+21	; 0x15
    1718:	28 17       	cp	r18, r24
    171a:	39 07       	cpc	r19, r25
    171c:	4a 07       	cpc	r20, r26
    171e:	5b 07       	cpc	r21, r27
    1720:	08 f4       	brcc	.+2      	; 0x1724 <create_chain+0x90>
    1722:	8e c0       	rjmp	.+284    	; 0x1840 <create_chain+0x1ac>
    1724:	53 01       	movw	r10, r6
    1726:	42 01       	movw	r8, r4
    1728:	05 c0       	rjmp	.+10     	; 0x1734 <create_chain+0xa0>
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
    172a:	61 e0       	ldi	r22, 0x01	; 1
    172c:	86 2e       	mov	r8, r22
    172e:	91 2c       	mov	r9, r1
    1730:	a1 2c       	mov	r10, r1
    1732:	b1 2c       	mov	r11, r1
    1734:	75 01       	movw	r14, r10
    1736:	64 01       	movw	r12, r8
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
    1738:	08 94       	sec
    173a:	c1 1c       	adc	r12, r1
    173c:	d1 1c       	adc	r13, r1
    173e:	e1 1c       	adc	r14, r1
    1740:	f1 1c       	adc	r15, r1
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
    1742:	8a 89       	ldd	r24, Y+18	; 0x12
    1744:	9b 89       	ldd	r25, Y+19	; 0x13
    1746:	ac 89       	ldd	r26, Y+20	; 0x14
    1748:	bd 89       	ldd	r27, Y+21	; 0x15
    174a:	c8 16       	cp	r12, r24
    174c:	d9 06       	cpc	r13, r25
    174e:	ea 06       	cpc	r14, r26
    1750:	fb 06       	cpc	r15, r27
    1752:	60 f0       	brcs	.+24     	; 0x176c <create_chain+0xd8>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
    1754:	22 e0       	ldi	r18, 0x02	; 2
    1756:	82 16       	cp	r8, r18
    1758:	91 04       	cpc	r9, r1
    175a:	a1 04       	cpc	r10, r1
    175c:	b1 04       	cpc	r11, r1
    175e:	08 f4       	brcc	.+2      	; 0x1762 <create_chain+0xce>
    1760:	64 c0       	rjmp	.+200    	; 0x182a <create_chain+0x196>

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
			ncl = 2;
    1762:	52 e0       	ldi	r21, 0x02	; 2
    1764:	c5 2e       	mov	r12, r21
    1766:	d1 2c       	mov	r13, r1
    1768:	e1 2c       	mov	r14, r1
    176a:	f1 2c       	mov	r15, r1
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    176c:	ce 01       	movw	r24, r28
    176e:	b7 01       	movw	r22, r14
    1770:	a6 01       	movw	r20, r12
    1772:	0e 94 c0 08 	call	0x1180	; 0x1180 <get_fat>
    1776:	9b 01       	movw	r18, r22
    1778:	ac 01       	movw	r20, r24
		if (cs == 0) break;				/* Found a free cluster */
    177a:	61 15       	cp	r22, r1
    177c:	71 05       	cpc	r23, r1
    177e:	81 05       	cpc	r24, r1
    1780:	91 05       	cpc	r25, r1
    1782:	a9 f0       	breq	.+42     	; 0x17ae <create_chain+0x11a>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    1784:	2f 3f       	cpi	r18, 0xFF	; 255
    1786:	8f ef       	ldi	r24, 0xFF	; 255
    1788:	38 07       	cpc	r19, r24
    178a:	8f ef       	ldi	r24, 0xFF	; 255
    178c:	48 07       	cpc	r20, r24
    178e:	8f ef       	ldi	r24, 0xFF	; 255
    1790:	58 07       	cpc	r21, r24
    1792:	09 f4       	brne	.+2      	; 0x1796 <create_chain+0x102>
    1794:	55 c0       	rjmp	.+170    	; 0x1840 <create_chain+0x1ac>
    1796:	21 30       	cpi	r18, 0x01	; 1
    1798:	31 05       	cpc	r19, r1
    179a:	41 05       	cpc	r20, r1
    179c:	51 05       	cpc	r21, r1
    179e:	09 f4       	brne	.+2      	; 0x17a2 <create_chain+0x10e>
    17a0:	4f c0       	rjmp	.+158    	; 0x1840 <create_chain+0x1ac>
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
    17a2:	c8 14       	cp	r12, r8
    17a4:	d9 04       	cpc	r13, r9
    17a6:	ea 04       	cpc	r14, r10
    17a8:	fb 04       	cpc	r15, r11
    17aa:	31 f6       	brne	.-116    	; 0x1738 <create_chain+0xa4>
    17ac:	3e c0       	rjmp	.+124    	; 0x182a <create_chain+0x196>
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
    17ae:	8c 2c       	mov	r8, r12
    17b0:	bd 2c       	mov	r11, r13
    17b2:	ae 2c       	mov	r10, r14
    17b4:	9f 2c       	mov	r9, r15
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    17b6:	ce 01       	movw	r24, r28
    17b8:	a6 01       	movw	r20, r12
    17ba:	b7 01       	movw	r22, r14
    17bc:	0f ef       	ldi	r16, 0xFF	; 255
    17be:	1f ef       	ldi	r17, 0xFF	; 255
    17c0:	2f ef       	ldi	r18, 0xFF	; 255
    17c2:	3f e0       	ldi	r19, 0x0F	; 15
    17c4:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <put_fat>
	if (res == FR_OK && clst != 0) {
    17c8:	88 23       	and	r24, r24
    17ca:	49 f5       	brne	.+82     	; 0x181e <create_chain+0x18a>
    17cc:	41 14       	cp	r4, r1
    17ce:	51 04       	cpc	r5, r1
    17d0:	61 04       	cpc	r6, r1
    17d2:	71 04       	cpc	r7, r1
    17d4:	49 f0       	breq	.+18     	; 0x17e8 <create_chain+0x154>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    17d6:	ce 01       	movw	r24, r28
    17d8:	b3 01       	movw	r22, r6
    17da:	a2 01       	movw	r20, r4
    17dc:	86 01       	movw	r16, r12
    17de:	97 01       	movw	r18, r14
    17e0:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <put_fat>
	}
	if (res == FR_OK) {
    17e4:	88 23       	and	r24, r24
    17e6:	d9 f4       	brne	.+54     	; 0x181e <create_chain+0x18a>
		fs->last_clust = ncl;			/* Update FSINFO */
    17e8:	8a 86       	std	Y+10, r8	; 0x0a
    17ea:	bb 86       	std	Y+11, r11	; 0x0b
    17ec:	ac 86       	std	Y+12, r10	; 0x0c
    17ee:	9d 86       	std	Y+13, r9	; 0x0d
		if (fs->free_clust != 0xFFFFFFFF) {
    17f0:	8e 85       	ldd	r24, Y+14	; 0x0e
    17f2:	9f 85       	ldd	r25, Y+15	; 0x0f
    17f4:	a8 89       	ldd	r26, Y+16	; 0x10
    17f6:	b9 89       	ldd	r27, Y+17	; 0x11
    17f8:	8f 3f       	cpi	r24, 0xFF	; 255
    17fa:	2f ef       	ldi	r18, 0xFF	; 255
    17fc:	92 07       	cpc	r25, r18
    17fe:	2f ef       	ldi	r18, 0xFF	; 255
    1800:	a2 07       	cpc	r26, r18
    1802:	2f ef       	ldi	r18, 0xFF	; 255
    1804:	b2 07       	cpc	r27, r18
    1806:	a9 f0       	breq	.+42     	; 0x1832 <create_chain+0x19e>
			fs->free_clust--;
    1808:	01 97       	sbiw	r24, 0x01	; 1
    180a:	a1 09       	sbc	r26, r1
    180c:	b1 09       	sbc	r27, r1
    180e:	8e 87       	std	Y+14, r24	; 0x0e
    1810:	9f 87       	std	Y+15, r25	; 0x0f
    1812:	a8 8b       	std	Y+16, r26	; 0x10
    1814:	b9 8b       	std	Y+17, r27	; 0x11
			fs->fsi_flag |= 1;
    1816:	8d 81       	ldd	r24, Y+5	; 0x05
    1818:	81 60       	ori	r24, 0x01	; 1
    181a:	8d 83       	std	Y+5, r24	; 0x05
    181c:	0a c0       	rjmp	.+20     	; 0x1832 <create_chain+0x19e>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    181e:	81 30       	cpi	r24, 0x01	; 1
    1820:	59 f4       	brne	.+22     	; 0x1838 <create_chain+0x1a4>
    1822:	2f ef       	ldi	r18, 0xFF	; 255
    1824:	3f ef       	ldi	r19, 0xFF	; 255
    1826:	a9 01       	movw	r20, r18
    1828:	0b c0       	rjmp	.+22     	; 0x1840 <create_chain+0x1ac>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
    182a:	20 e0       	ldi	r18, 0x00	; 0
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	a9 01       	movw	r20, r18
    1830:	07 c0       	rjmp	.+14     	; 0x1840 <create_chain+0x1ac>
	if (res == FR_OK && clst != 0) {
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
	}
	if (res == FR_OK) {
		fs->last_clust = ncl;			/* Update FSINFO */
		if (fs->free_clust != 0xFFFFFFFF) {
    1832:	a7 01       	movw	r20, r14
    1834:	96 01       	movw	r18, r12
    1836:	04 c0       	rjmp	.+8      	; 0x1840 <create_chain+0x1ac>
			fs->free_clust--;
			fs->fsi_flag |= 1;
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    1838:	21 e0       	ldi	r18, 0x01	; 1
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	40 e0       	ldi	r20, 0x00	; 0
    183e:	50 e0       	ldi	r21, 0x00	; 0
	}

	return ncl;		/* Return new cluster number or error code */
}
    1840:	b9 01       	movw	r22, r18
    1842:	ca 01       	movw	r24, r20
    1844:	df 91       	pop	r29
    1846:	cf 91       	pop	r28
    1848:	1f 91       	pop	r17
    184a:	0f 91       	pop	r16
    184c:	ff 90       	pop	r15
    184e:	ef 90       	pop	r14
    1850:	df 90       	pop	r13
    1852:	cf 90       	pop	r12
    1854:	bf 90       	pop	r11
    1856:	af 90       	pop	r10
    1858:	9f 90       	pop	r9
    185a:	8f 90       	pop	r8
    185c:	7f 90       	pop	r7
    185e:	6f 90       	pop	r6
    1860:	5f 90       	pop	r5
    1862:	4f 90       	pop	r4
    1864:	08 95       	ret

00001866 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
    1866:	6f 92       	push	r6
    1868:	7f 92       	push	r7
    186a:	9f 92       	push	r9
    186c:	af 92       	push	r10
    186e:	bf 92       	push	r11
    1870:	cf 92       	push	r12
    1872:	df 92       	push	r13
    1874:	ef 92       	push	r14
    1876:	ff 92       	push	r15
    1878:	0f 93       	push	r16
    187a:	1f 93       	push	r17
    187c:	cf 93       	push	r28
    187e:	df 93       	push	r29
    1880:	ec 01       	movw	r28, r24
    1882:	5b 01       	movw	r10, r22
	DWORD clst;
	UINT i;


	i = dp->index + 1;
    1884:	cc 80       	ldd	r12, Y+4	; 0x04
    1886:	dd 80       	ldd	r13, Y+5	; 0x05
    1888:	08 94       	sec
    188a:	c1 1c       	adc	r12, r1
    188c:	d1 1c       	adc	r13, r1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
    188e:	c1 14       	cp	r12, r1
    1890:	d1 04       	cpc	r13, r1
    1892:	09 f4       	brne	.+2      	; 0x1896 <dir_next+0x30>
    1894:	ed c0       	rjmp	.+474    	; 0x1a70 <dir_next+0x20a>
    1896:	8e 85       	ldd	r24, Y+14	; 0x0e
    1898:	9f 85       	ldd	r25, Y+15	; 0x0f
    189a:	a8 89       	ldd	r26, Y+16	; 0x10
    189c:	b9 89       	ldd	r27, Y+17	; 0x11
    189e:	00 97       	sbiw	r24, 0x00	; 0
    18a0:	a1 05       	cpc	r26, r1
    18a2:	b1 05       	cpc	r27, r1
    18a4:	09 f4       	brne	.+2      	; 0x18a8 <dir_next+0x42>
    18a6:	e4 c0       	rjmp	.+456    	; 0x1a70 <dir_next+0x20a>
		return FR_NO_FILE;

	if (!(i % (SS(dp->fs) / SZ_DIR))) {	/* Sector changed? */
    18a8:	1f e0       	ldi	r17, 0x0F	; 15
    18aa:	61 2e       	mov	r6, r17
    18ac:	71 2c       	mov	r7, r1
    18ae:	6c 20       	and	r6, r12
    18b0:	7d 20       	and	r7, r13
    18b2:	61 14       	cp	r6, r1
    18b4:	71 04       	cpc	r7, r1
    18b6:	09 f0       	breq	.+2      	; 0x18ba <dir_next+0x54>
    18b8:	cb c0       	rjmp	.+406    	; 0x1a50 <dir_next+0x1ea>
		dp->sect++;					/* Next sector */
    18ba:	01 96       	adiw	r24, 0x01	; 1
    18bc:	a1 1d       	adc	r26, r1
    18be:	b1 1d       	adc	r27, r1
    18c0:	8e 87       	std	Y+14, r24	; 0x0e
    18c2:	9f 87       	std	Y+15, r25	; 0x0f
    18c4:	a8 8b       	std	Y+16, r26	; 0x10
    18c6:	b9 8b       	std	Y+17, r27	; 0x11

		if (!dp->clust) {		/* Static table */
    18c8:	4a 85       	ldd	r20, Y+10	; 0x0a
    18ca:	5b 85       	ldd	r21, Y+11	; 0x0b
    18cc:	6c 85       	ldd	r22, Y+12	; 0x0c
    18ce:	7d 85       	ldd	r23, Y+13	; 0x0d
    18d0:	88 81       	ld	r24, Y
    18d2:	99 81       	ldd	r25, Y+1	; 0x01
    18d4:	41 15       	cp	r20, r1
    18d6:	51 05       	cpc	r21, r1
    18d8:	61 05       	cpc	r22, r1
    18da:	71 05       	cpc	r23, r1
    18dc:	41 f4       	brne	.+16     	; 0x18ee <dir_next+0x88>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
    18de:	fc 01       	movw	r30, r24
    18e0:	80 85       	ldd	r24, Z+8	; 0x08
    18e2:	91 85       	ldd	r25, Z+9	; 0x09
    18e4:	c8 16       	cp	r12, r24
    18e6:	d9 06       	cpc	r13, r25
    18e8:	08 f4       	brcc	.+2      	; 0x18ec <dir_next+0x86>
    18ea:	b2 c0       	rjmp	.+356    	; 0x1a50 <dir_next+0x1ea>
    18ec:	c1 c0       	rjmp	.+386    	; 0x1a70 <dir_next+0x20a>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIR)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
    18ee:	fc 01       	movw	r30, r24
    18f0:	22 81       	ldd	r18, Z+2	; 0x02
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	21 50       	subi	r18, 0x01	; 1
    18f6:	30 40       	sbci	r19, 0x00	; 0
    18f8:	f6 01       	movw	r30, r12
    18fa:	a4 e0       	ldi	r26, 0x04	; 4
    18fc:	f6 95       	lsr	r31
    18fe:	e7 95       	ror	r30
    1900:	aa 95       	dec	r26
    1902:	e1 f7       	brne	.-8      	; 0x18fc <dir_next+0x96>
    1904:	2e 23       	and	r18, r30
    1906:	3f 23       	and	r19, r31
    1908:	21 15       	cp	r18, r1
    190a:	31 05       	cpc	r19, r1
    190c:	09 f0       	breq	.+2      	; 0x1910 <dir_next+0xaa>
    190e:	a0 c0       	rjmp	.+320    	; 0x1a50 <dir_next+0x1ea>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
    1910:	0e 94 c0 08 	call	0x1180	; 0x1180 <get_fat>
    1914:	7b 01       	movw	r14, r22
    1916:	8c 01       	movw	r16, r24
				if (clst <= 1) return FR_INT_ERR;
    1918:	62 30       	cpi	r22, 0x02	; 2
    191a:	71 05       	cpc	r23, r1
    191c:	81 05       	cpc	r24, r1
    191e:	91 05       	cpc	r25, r1
    1920:	08 f4       	brcc	.+2      	; 0x1924 <dir_next+0xbe>
    1922:	aa c0       	rjmp	.+340    	; 0x1a78 <dir_next+0x212>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    1924:	8f ef       	ldi	r24, 0xFF	; 255
    1926:	e8 16       	cp	r14, r24
    1928:	8f ef       	ldi	r24, 0xFF	; 255
    192a:	f8 06       	cpc	r15, r24
    192c:	8f ef       	ldi	r24, 0xFF	; 255
    192e:	08 07       	cpc	r16, r24
    1930:	8f ef       	ldi	r24, 0xFF	; 255
    1932:	18 07       	cpc	r17, r24
    1934:	09 f4       	brne	.+2      	; 0x1938 <dir_next+0xd2>
    1936:	a2 c0       	rjmp	.+324    	; 0x1a7c <dir_next+0x216>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
    1938:	88 81       	ld	r24, Y
    193a:	99 81       	ldd	r25, Y+1	; 0x01
    193c:	fc 01       	movw	r30, r24
    193e:	22 89       	ldd	r18, Z+18	; 0x12
    1940:	33 89       	ldd	r19, Z+19	; 0x13
    1942:	44 89       	ldd	r20, Z+20	; 0x14
    1944:	55 89       	ldd	r21, Z+21	; 0x15
    1946:	e2 16       	cp	r14, r18
    1948:	f3 06       	cpc	r15, r19
    194a:	04 07       	cpc	r16, r20
    194c:	15 07       	cpc	r17, r21
    194e:	08 f4       	brcc	.+2      	; 0x1952 <dir_next+0xec>
    1950:	71 c0       	rjmp	.+226    	; 0x1a34 <dir_next+0x1ce>
#if !_FS_READONLY
					UINT c;
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
    1952:	a1 14       	cp	r10, r1
    1954:	b1 04       	cpc	r11, r1
    1956:	09 f4       	brne	.+2      	; 0x195a <dir_next+0xf4>
    1958:	8b c0       	rjmp	.+278    	; 0x1a70 <dir_next+0x20a>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
    195a:	4a 85       	ldd	r20, Y+10	; 0x0a
    195c:	5b 85       	ldd	r21, Y+11	; 0x0b
    195e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1960:	7d 85       	ldd	r23, Y+13	; 0x0d
    1962:	0e 94 4a 0b 	call	0x1694	; 0x1694 <create_chain>
    1966:	7b 01       	movw	r14, r22
    1968:	8c 01       	movw	r16, r24
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    196a:	61 15       	cp	r22, r1
    196c:	71 05       	cpc	r23, r1
    196e:	81 05       	cpc	r24, r1
    1970:	91 05       	cpc	r25, r1
    1972:	09 f4       	brne	.+2      	; 0x1976 <dir_next+0x110>
    1974:	7f c0       	rjmp	.+254    	; 0x1a74 <dir_next+0x20e>
					if (clst == 1) return FR_INT_ERR;
    1976:	61 30       	cpi	r22, 0x01	; 1
    1978:	71 05       	cpc	r23, r1
    197a:	81 05       	cpc	r24, r1
    197c:	91 05       	cpc	r25, r1
    197e:	09 f4       	brne	.+2      	; 0x1982 <dir_next+0x11c>
    1980:	7b c0       	rjmp	.+246    	; 0x1a78 <dir_next+0x212>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    1982:	8f ef       	ldi	r24, 0xFF	; 255
    1984:	e8 16       	cp	r14, r24
    1986:	8f ef       	ldi	r24, 0xFF	; 255
    1988:	f8 06       	cpc	r15, r24
    198a:	8f ef       	ldi	r24, 0xFF	; 255
    198c:	08 07       	cpc	r16, r24
    198e:	8f ef       	ldi	r24, 0xFF	; 255
    1990:	18 07       	cpc	r17, r24
    1992:	09 f4       	brne	.+2      	; 0x1996 <dir_next+0x130>
    1994:	73 c0       	rjmp	.+230    	; 0x1a7c <dir_next+0x216>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
    1996:	88 81       	ld	r24, Y
    1998:	99 81       	ldd	r25, Y+1	; 0x01
    199a:	0e 94 95 04 	call	0x92a	; 0x92a <sync_window>
    199e:	88 23       	and	r24, r24
    19a0:	09 f0       	breq	.+2      	; 0x19a4 <dir_next+0x13e>
    19a2:	6c c0       	rjmp	.+216    	; 0x1a7c <dir_next+0x216>
					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
    19a4:	88 81       	ld	r24, Y
    19a6:	99 81       	ldd	r25, Y+1	; 0x01
    19a8:	8e 96       	adiw	r24, 0x2e	; 46
    19aa:	60 e0       	ldi	r22, 0x00	; 0
    19ac:	70 e0       	ldi	r23, 0x00	; 0
    19ae:	40 e0       	ldi	r20, 0x00	; 0
    19b0:	52 e0       	ldi	r21, 0x02	; 2
    19b2:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
    19b6:	a8 80       	ld	r10, Y
    19b8:	b9 80       	ldd	r11, Y+1	; 0x01
    19ba:	c5 01       	movw	r24, r10
    19bc:	b8 01       	movw	r22, r16
    19be:	a7 01       	movw	r20, r14
    19c0:	0e 94 91 08 	call	0x1122	; 0x1122 <clust2sect>
    19c4:	f5 01       	movw	r30, r10
    19c6:	62 a7       	std	Z+42, r22	; 0x2a
    19c8:	73 a7       	std	Z+43, r23	; 0x2b
    19ca:	84 a7       	std	Z+44, r24	; 0x2c
    19cc:	95 a7       	std	Z+45, r25	; 0x2d
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
    19ce:	aa 24       	eor	r10, r10
    19d0:	bb 24       	eor	r11, r11
						dp->fs->wflag = 1;
    19d2:	99 24       	eor	r9, r9
    19d4:	93 94       	inc	r9
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
    19d6:	18 c0       	rjmp	.+48     	; 0x1a08 <dir_next+0x1a2>
						dp->fs->wflag = 1;
    19d8:	94 82       	std	Z+4, r9	; 0x04
						if (sync_window(dp->fs)) return FR_DISK_ERR;
    19da:	88 81       	ld	r24, Y
    19dc:	99 81       	ldd	r25, Y+1	; 0x01
    19de:	0e 94 95 04 	call	0x92a	; 0x92a <sync_window>
    19e2:	88 23       	and	r24, r24
    19e4:	09 f0       	breq	.+2      	; 0x19e8 <dir_next+0x182>
    19e6:	4a c0       	rjmp	.+148    	; 0x1a7c <dir_next+0x216>
						dp->fs->winsect++;
    19e8:	e8 81       	ld	r30, Y
    19ea:	f9 81       	ldd	r31, Y+1	; 0x01
    19ec:	82 a5       	ldd	r24, Z+42	; 0x2a
    19ee:	93 a5       	ldd	r25, Z+43	; 0x2b
    19f0:	a4 a5       	ldd	r26, Z+44	; 0x2c
    19f2:	b5 a5       	ldd	r27, Z+45	; 0x2d
    19f4:	01 96       	adiw	r24, 0x01	; 1
    19f6:	a1 1d       	adc	r26, r1
    19f8:	b1 1d       	adc	r27, r1
    19fa:	82 a7       	std	Z+42, r24	; 0x2a
    19fc:	93 a7       	std	Z+43, r25	; 0x2b
    19fe:	a4 a7       	std	Z+44, r26	; 0x2c
    1a00:	b5 a7       	std	Z+45, r27	; 0x2d
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
    1a02:	08 94       	sec
    1a04:	a1 1c       	adc	r10, r1
    1a06:	b1 1c       	adc	r11, r1
    1a08:	e8 81       	ld	r30, Y
    1a0a:	f9 81       	ldd	r31, Y+1	; 0x01
    1a0c:	82 81       	ldd	r24, Z+2	; 0x02
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	a8 16       	cp	r10, r24
    1a12:	b9 06       	cpc	r11, r25
    1a14:	08 f3       	brcs	.-62     	; 0x19d8 <dir_next+0x172>
						dp->fs->wflag = 1;
						if (sync_window(dp->fs)) return FR_DISK_ERR;
						dp->fs->winsect++;
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
    1a16:	95 01       	movw	r18, r10
    1a18:	40 e0       	ldi	r20, 0x00	; 0
    1a1a:	50 e0       	ldi	r21, 0x00	; 0
    1a1c:	82 a5       	ldd	r24, Z+42	; 0x2a
    1a1e:	93 a5       	ldd	r25, Z+43	; 0x2b
    1a20:	a4 a5       	ldd	r26, Z+44	; 0x2c
    1a22:	b5 a5       	ldd	r27, Z+45	; 0x2d
    1a24:	82 1b       	sub	r24, r18
    1a26:	93 0b       	sbc	r25, r19
    1a28:	a4 0b       	sbc	r26, r20
    1a2a:	b5 0b       	sbc	r27, r21
    1a2c:	82 a7       	std	Z+42, r24	; 0x2a
    1a2e:	93 a7       	std	Z+43, r25	; 0x2b
    1a30:	a4 a7       	std	Z+44, r26	; 0x2c
    1a32:	b5 a7       	std	Z+45, r27	; 0x2d
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
    1a34:	ea 86       	std	Y+10, r14	; 0x0a
    1a36:	fb 86       	std	Y+11, r15	; 0x0b
    1a38:	0c 87       	std	Y+12, r16	; 0x0c
    1a3a:	1d 87       	std	Y+13, r17	; 0x0d
				dp->sect = clust2sect(dp->fs, clst);
    1a3c:	88 81       	ld	r24, Y
    1a3e:	99 81       	ldd	r25, Y+1	; 0x01
    1a40:	b8 01       	movw	r22, r16
    1a42:	a7 01       	movw	r20, r14
    1a44:	0e 94 91 08 	call	0x1122	; 0x1122 <clust2sect>
    1a48:	6e 87       	std	Y+14, r22	; 0x0e
    1a4a:	7f 87       	std	Y+15, r23	; 0x0f
    1a4c:	88 8b       	std	Y+16, r24	; 0x10
    1a4e:	99 8b       	std	Y+17, r25	; 0x11
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
    1a50:	dd 82       	std	Y+5, r13	; 0x05
    1a52:	cc 82       	std	Y+4, r12	; 0x04
	dp->dir = dp->fs->win + (i % (SS(dp->fs) / SZ_DIR)) * SZ_DIR;	/* Current entry in the window */
    1a54:	88 81       	ld	r24, Y
    1a56:	99 81       	ldd	r25, Y+1	; 0x01
    1a58:	8e 96       	adiw	r24, 0x2e	; 46
    1a5a:	75 e0       	ldi	r23, 0x05	; 5
    1a5c:	66 0c       	add	r6, r6
    1a5e:	77 1c       	adc	r7, r7
    1a60:	7a 95       	dec	r23
    1a62:	e1 f7       	brne	.-8      	; 0x1a5c <dir_next+0x1f6>
    1a64:	86 0d       	add	r24, r6
    1a66:	97 1d       	adc	r25, r7
    1a68:	9b 8b       	std	Y+19, r25	; 0x13
    1a6a:	8a 8b       	std	Y+18, r24	; 0x12

	return FR_OK;
    1a6c:	80 e0       	ldi	r24, 0x00	; 0
    1a6e:	07 c0       	rjmp	.+14     	; 0x1a7e <dir_next+0x218>
				if (clst <= 1) return FR_INT_ERR;
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
#if !_FS_READONLY
					UINT c;
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
    1a70:	84 e0       	ldi	r24, 0x04	; 4
    1a72:	05 c0       	rjmp	.+10     	; 0x1a7e <dir_next+0x218>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    1a74:	87 e0       	ldi	r24, 0x07	; 7
    1a76:	03 c0       	rjmp	.+6      	; 0x1a7e <dir_next+0x218>
					if (clst == 1) return FR_INT_ERR;
    1a78:	82 e0       	ldi	r24, 0x02	; 2
    1a7a:	01 c0       	rjmp	.+2      	; 0x1a7e <dir_next+0x218>
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dp->fs->wflag = 1;
						if (sync_window(dp->fs)) return FR_DISK_ERR;
    1a7c:	81 e0       	ldi	r24, 0x01	; 1

	dp->index = (WORD)i;	/* Current index */
	dp->dir = dp->fs->win + (i % (SS(dp->fs) / SZ_DIR)) * SZ_DIR;	/* Current entry in the window */

	return FR_OK;
}
    1a7e:	df 91       	pop	r29
    1a80:	cf 91       	pop	r28
    1a82:	1f 91       	pop	r17
    1a84:	0f 91       	pop	r16
    1a86:	ff 90       	pop	r15
    1a88:	ef 90       	pop	r14
    1a8a:	df 90       	pop	r13
    1a8c:	cf 90       	pop	r12
    1a8e:	bf 90       	pop	r11
    1a90:	af 90       	pop	r10
    1a92:	9f 90       	pop	r9
    1a94:	7f 90       	pop	r7
    1a96:	6f 90       	pop	r6
    1a98:	08 95       	ret

00001a9a <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
    1a9a:	bf 92       	push	r11
    1a9c:	cf 92       	push	r12
    1a9e:	df 92       	push	r13
    1aa0:	ef 92       	push	r14
    1aa2:	ff 92       	push	r15
    1aa4:	0f 93       	push	r16
    1aa6:	1f 93       	push	r17
    1aa8:	cf 93       	push	r28
    1aaa:	df 93       	push	r29
    1aac:	ec 01       	movw	r28, r24
    1aae:	8b 01       	movw	r16, r22
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
    1ab0:	fb 01       	movw	r30, r22
    1ab2:	80 81       	ld	r24, Z
    1ab4:	8f 32       	cpi	r24, 0x2F	; 47
    1ab6:	11 f0       	breq	.+4      	; 0x1abc <follow_path+0x22>
    1ab8:	8c 35       	cpi	r24, 0x5C	; 92
    1aba:	11 f4       	brne	.+4      	; 0x1ac0 <follow_path+0x26>
		path++;
    1abc:	0f 5f       	subi	r16, 0xFF	; 255
    1abe:	1f 4f       	sbci	r17, 0xFF	; 255
	dp->sclust = 0;							/* Always start from the root directory */
    1ac0:	1e 82       	std	Y+6, r1	; 0x06
    1ac2:	1f 82       	std	Y+7, r1	; 0x07
    1ac4:	18 86       	std	Y+8, r1	; 0x08
    1ac6:	19 86       	std	Y+9, r1	; 0x09
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
    1ac8:	f8 01       	movw	r30, r16
    1aca:	80 81       	ld	r24, Z
    1acc:	80 32       	cpi	r24, 0x20	; 32
    1ace:	40 f4       	brcc	.+16     	; 0x1ae0 <follow_path+0x46>
		res = dir_sdi(dp, 0);
    1ad0:	ce 01       	movw	r24, r28
    1ad2:	60 e0       	ldi	r22, 0x00	; 0
    1ad4:	70 e0       	ldi	r23, 0x00	; 0
    1ad6:	0e 94 88 09 	call	0x1310	; 0x1310 <dir_sdi>
		dp->dir = 0;
    1ada:	1b 8a       	std	Y+19, r1	; 0x13
    1adc:	1a 8a       	std	Y+18, r1	; 0x12
    1ade:	f3 c0       	rjmp	.+486    	; 0x1cc6 <follow_path+0x22c>
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first character collides with DDE, replace it with 0x05 */
    1ae0:	85 e0       	ldi	r24, 0x05	; 5
    1ae2:	b8 2e       	mov	r11, r24
	dp->sclust = 0;							/* Always start from the root directory */
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
		res = dir_sdi(dp, 0);
		dp->dir = 0;
    1ae4:	68 01       	movw	r12, r16
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    1ae6:	f8 01       	movw	r30, r16
    1ae8:	80 81       	ld	r24, Z
    1aea:	0f 5f       	subi	r16, 0xFF	; 255
    1aec:	1f 4f       	sbci	r17, 0xFF	; 255
    1aee:	8f 32       	cpi	r24, 0x2F	; 47
    1af0:	c9 f3       	breq	.-14     	; 0x1ae4 <follow_path+0x4a>
    1af2:	8c 35       	cpi	r24, 0x5C	; 92
    1af4:	b9 f3       	breq	.-18     	; 0x1ae4 <follow_path+0x4a>
	sfn = dp->fn;
    1af6:	0c 89       	ldd	r16, Y+20	; 0x14
    1af8:	1d 89       	ldd	r17, Y+21	; 0x15
	mem_set(sfn, ' ', 11);
    1afa:	c8 01       	movw	r24, r16
    1afc:	60 e2       	ldi	r22, 0x20	; 32
    1afe:	70 e0       	ldi	r23, 0x00	; 0
    1b00:	4b e0       	ldi	r20, 0x0B	; 11
    1b02:	50 e0       	ldi	r21, 0x00	; 0
    1b04:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <mem_set>
	si = i = b = 0; ni = 8;
    1b08:	80 e0       	ldi	r24, 0x00	; 0
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	ee 24       	eor	r14, r14
    1b0e:	ff 24       	eor	r15, r15
    1b10:	28 e0       	ldi	r18, 0x08	; 8
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	a0 e0       	ldi	r26, 0x00	; 0
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
    1b16:	f6 01       	movw	r30, r12
    1b18:	ee 0d       	add	r30, r14
    1b1a:	ff 1d       	adc	r31, r15
    1b1c:	b0 81       	ld	r27, Z
    1b1e:	08 94       	sec
    1b20:	e1 1c       	adc	r14, r1
    1b22:	f1 1c       	adc	r15, r1
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    1b24:	b1 32       	cpi	r27, 0x21	; 33
    1b26:	08 f4       	brcc	.+2      	; 0x1b2a <follow_path+0x90>
    1b28:	60 c0       	rjmp	.+192    	; 0x1bea <follow_path+0x150>
    1b2a:	bf 32       	cpi	r27, 0x2F	; 47
    1b2c:	09 f4       	brne	.+2      	; 0x1b30 <follow_path+0x96>
    1b2e:	5f c0       	rjmp	.+190    	; 0x1bee <follow_path+0x154>
    1b30:	bc 35       	cpi	r27, 0x5C	; 92
    1b32:	09 f4       	brne	.+2      	; 0x1b36 <follow_path+0x9c>
    1b34:	5c c0       	rjmp	.+184    	; 0x1bee <follow_path+0x154>
		if (c == '.' || i >= ni) {
    1b36:	be 32       	cpi	r27, 0x2E	; 46
    1b38:	19 f0       	breq	.+6      	; 0x1b40 <follow_path+0xa6>
    1b3a:	82 17       	cp	r24, r18
    1b3c:	93 07       	cpc	r25, r19
    1b3e:	70 f0       	brcs	.+28     	; 0x1b5c <follow_path+0xc2>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    1b40:	28 30       	cpi	r18, 0x08	; 8
    1b42:	31 05       	cpc	r19, r1
    1b44:	09 f0       	breq	.+2      	; 0x1b48 <follow_path+0xae>
    1b46:	bc c0       	rjmp	.+376    	; 0x1cc0 <follow_path+0x226>
    1b48:	be 32       	cpi	r27, 0x2E	; 46
    1b4a:	09 f0       	breq	.+2      	; 0x1b4e <follow_path+0xb4>
    1b4c:	b9 c0       	rjmp	.+370    	; 0x1cc0 <follow_path+0x226>
			i = 8; ni = 11;
			b <<= 2; continue;
    1b4e:	aa 0f       	add	r26, r26
    1b50:	aa 0f       	add	r26, r26
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
    1b52:	88 e0       	ldi	r24, 0x08	; 8
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	2b e0       	ldi	r18, 0x0B	; 11
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	dd cf       	rjmp	.-70     	; 0x1b16 <follow_path+0x7c>
			b <<= 2; continue;
		}
		if (c >= 0x80) {				/* Extended character? */
    1b5c:	b7 fd       	sbrc	r27, 7
			b |= 3;						/* Eliminate NT flag */
    1b5e:	a3 60       	ori	r26, 0x03	; 3
#if !_DF1S
			return FR_INVALID_NAME;		/* Reject extended characters (ASCII cfg) */
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
    1b60:	4b 2f       	mov	r20, r27
    1b62:	41 58       	subi	r20, 0x81	; 129
    1b64:	4f 31       	cpi	r20, 0x1F	; 31
    1b66:	18 f0       	brcs	.+6      	; 0x1b6e <follow_path+0xd4>
    1b68:	4f 55       	subi	r20, 0x5F	; 95
    1b6a:	4d 31       	cpi	r20, 0x1D	; 29
    1b6c:	00 f5       	brcc	.+64     	; 0x1bae <follow_path+0x114>
			d = (BYTE)p[si++];			/* Get 2nd byte */
    1b6e:	f6 01       	movw	r30, r12
    1b70:	ee 0d       	add	r30, r14
    1b72:	ff 1d       	adc	r31, r15
    1b74:	60 81       	ld	r22, Z
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
    1b76:	46 2f       	mov	r20, r22
    1b78:	40 54       	subi	r20, 0x40	; 64
    1b7a:	4f 33       	cpi	r20, 0x3F	; 63
    1b7c:	20 f0       	brcs	.+8      	; 0x1b86 <follow_path+0xec>
    1b7e:	40 54       	subi	r20, 0x40	; 64
    1b80:	4d 37       	cpi	r20, 0x7D	; 125
    1b82:	08 f0       	brcs	.+2      	; 0x1b86 <follow_path+0xec>
    1b84:	9d c0       	rjmp	.+314    	; 0x1cc0 <follow_path+0x226>
    1b86:	a9 01       	movw	r20, r18
    1b88:	41 50       	subi	r20, 0x01	; 1
    1b8a:	50 40       	sbci	r21, 0x00	; 0
    1b8c:	84 17       	cp	r24, r20
    1b8e:	95 07       	cpc	r25, r21
    1b90:	08 f0       	brcs	.+2      	; 0x1b94 <follow_path+0xfa>
    1b92:	96 c0       	rjmp	.+300    	; 0x1cc0 <follow_path+0x226>
			return FR_INVALID_NAME;		/* Reject extended characters (ASCII cfg) */
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			d = (BYTE)p[si++];			/* Get 2nd byte */
    1b94:	08 94       	sec
    1b96:	e1 1c       	adc	r14, r1
    1b98:	f1 1c       	adc	r15, r1
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
    1b9a:	f8 01       	movw	r30, r16
    1b9c:	e8 0f       	add	r30, r24
    1b9e:	f9 1f       	adc	r31, r25
    1ba0:	b0 83       	st	Z, r27
    1ba2:	01 96       	adiw	r24, 0x01	; 1
			sfn[i++] = d;
    1ba4:	f8 01       	movw	r30, r16
    1ba6:	e8 0f       	add	r30, r24
    1ba8:	f9 1f       	adc	r31, r25
    1baa:	60 83       	st	Z, r22
    1bac:	1c c0       	rjmp	.+56     	; 0x1be6 <follow_path+0x14c>
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
    1bae:	6b 2f       	mov	r22, r27
    1bb0:	70 e0       	ldi	r23, 0x00	; 0
    1bb2:	e1 e6       	ldi	r30, 0x61	; 97
    1bb4:	f0 e0       	ldi	r31, 0x00	; 0
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    1bb6:	41 91       	ld	r20, Z+
    1bb8:	44 23       	and	r20, r20
    1bba:	29 f0       	breq	.+10     	; 0x1bc6 <follow_path+0x12c>
    1bbc:	50 e0       	ldi	r21, 0x00	; 0
    1bbe:	46 17       	cp	r20, r22
    1bc0:	57 07       	cpc	r21, r23
    1bc2:	c9 f7       	brne	.-14     	; 0x1bb6 <follow_path+0x11c>
    1bc4:	7d c0       	rjmp	.+250    	; 0x1cc0 <follow_path+0x226>
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
    1bc6:	4b 2f       	mov	r20, r27
    1bc8:	41 54       	subi	r20, 0x41	; 65
    1bca:	4a 31       	cpi	r20, 0x1A	; 26
    1bcc:	10 f4       	brcc	.+4      	; 0x1bd2 <follow_path+0x138>
				b |= 2;
    1bce:	a2 60       	ori	r26, 0x02	; 2
    1bd0:	06 c0       	rjmp	.+12     	; 0x1bde <follow_path+0x144>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
    1bd2:	4b 2f       	mov	r20, r27
    1bd4:	41 56       	subi	r20, 0x61	; 97
    1bd6:	4a 31       	cpi	r20, 0x1A	; 26
    1bd8:	10 f4       	brcc	.+4      	; 0x1bde <follow_path+0x144>
					b |= 1; c -= 0x20;
    1bda:	a1 60       	ori	r26, 0x01	; 1
    1bdc:	b0 52       	subi	r27, 0x20	; 32
				}
			}
			sfn[i++] = c;
    1bde:	f8 01       	movw	r30, r16
    1be0:	e8 0f       	add	r30, r24
    1be2:	f9 1f       	adc	r31, r25
    1be4:	b0 83       	st	Z, r27
    1be6:	01 96       	adiw	r24, 0x01	; 1
    1be8:	96 cf       	rjmp	.-212    	; 0x1b16 <follow_path+0x7c>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    1bea:	44 e0       	ldi	r20, 0x04	; 4
    1bec:	01 c0       	rjmp	.+2      	; 0x1bf0 <follow_path+0x156>
    1bee:	40 e0       	ldi	r20, 0x00	; 0

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
    1bf0:	00 97       	sbiw	r24, 0x00	; 0
    1bf2:	09 f4       	brne	.+2      	; 0x1bf6 <follow_path+0x15c>
    1bf4:	65 c0       	rjmp	.+202    	; 0x1cc0 <follow_path+0x226>
	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first character collides with DDE, replace it with 0x05 */
    1bf6:	f8 01       	movw	r30, r16
    1bf8:	80 81       	ld	r24, Z
    1bfa:	85 3e       	cpi	r24, 0xE5	; 229
    1bfc:	09 f4       	brne	.+2      	; 0x1c00 <follow_path+0x166>
    1bfe:	b0 82       	st	Z, r11

	if (ni == 8) b <<= 2;
    1c00:	28 30       	cpi	r18, 0x08	; 8
    1c02:	31 05       	cpc	r19, r1
    1c04:	11 f4       	brne	.+4      	; 0x1c0a <follow_path+0x170>
    1c06:	aa 0f       	add	r26, r26
    1c08:	aa 0f       	add	r26, r26
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
    1c0a:	b0 e0       	ldi	r27, 0x00	; 0
    1c0c:	cd 01       	movw	r24, r26
    1c0e:	83 70       	andi	r24, 0x03	; 3
    1c10:	90 70       	andi	r25, 0x00	; 0
    1c12:	81 30       	cpi	r24, 0x01	; 1
    1c14:	91 05       	cpc	r25, r1
    1c16:	09 f4       	brne	.+2      	; 0x1c1a <follow_path+0x180>
    1c18:	40 61       	ori	r20, 0x10	; 16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
    1c1a:	ac 70       	andi	r26, 0x0C	; 12
    1c1c:	b0 70       	andi	r27, 0x00	; 0
    1c1e:	a4 30       	cpi	r26, 0x04	; 4
    1c20:	b1 05       	cpc	r27, r1
    1c22:	09 f4       	brne	.+2      	; 0x1c26 <follow_path+0x18c>
    1c24:	48 60       	ori	r20, 0x08	; 8

	sfn[NS] = c;		/* Store NT flag, File name is created */
    1c26:	f8 01       	movw	r30, r16
    1c28:	43 87       	std	Z+11, r20	; 0x0b
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
    1c2a:	ce 01       	movw	r24, r28
    1c2c:	60 e0       	ldi	r22, 0x00	; 0
    1c2e:	70 e0       	ldi	r23, 0x00	; 0
    1c30:	0e 94 88 09 	call	0x1310	; 0x1310 <dir_sdi>
	if (res != FR_OK) return res;
    1c34:	88 23       	and	r24, r24
    1c36:	29 f5       	brne	.+74     	; 0x1c82 <follow_path+0x1e8>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
    1c38:	4e 85       	ldd	r20, Y+14	; 0x0e
    1c3a:	5f 85       	ldd	r21, Y+15	; 0x0f
    1c3c:	68 89       	ldd	r22, Y+16	; 0x10
    1c3e:	79 89       	ldd	r23, Y+17	; 0x11
    1c40:	88 81       	ld	r24, Y
    1c42:	99 81       	ldd	r25, Y+1	; 0x01
    1c44:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <move_window>
		if (res != FR_OK) break;
    1c48:	88 23       	and	r24, r24
    1c4a:	d9 f4       	brne	.+54     	; 0x1c82 <follow_path+0x1e8>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
    1c4c:	ea 89       	ldd	r30, Y+18	; 0x12
    1c4e:	fb 89       	ldd	r31, Y+19	; 0x13
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1c50:	90 81       	ld	r25, Z
    1c52:	99 23       	and	r25, r25
    1c54:	a9 f0       	breq	.+42     	; 0x1c80 <follow_path+0x1e6>
				if (!(dp->fn[NS] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
    1c56:	93 85       	ldd	r25, Z+11	; 0x0b
    1c58:	93 fd       	sbrc	r25, 3
    1c5a:	0c c0       	rjmp	.+24     	; 0x1c74 <follow_path+0x1da>
    1c5c:	ac 89       	ldd	r26, Y+20	; 0x14
    1c5e:	bd 89       	ldd	r27, Y+21	; 0x15
/*-----------------------------------------------------------------------*/
/* Follow a file path                                                    */
/*-----------------------------------------------------------------------*/

static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
    1c60:	9f 01       	movw	r18, r30
    1c62:	25 5f       	subi	r18, 0xF5	; 245
    1c64:	3f 4f       	sbci	r19, 0xFF	; 255
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	while (cnt-- && (r = *d++ - *s++) == 0) ;
    1c66:	e2 17       	cp	r30, r18
    1c68:	f3 07       	cpc	r31, r19
    1c6a:	59 f0       	breq	.+22     	; 0x1c82 <follow_path+0x1e8>
    1c6c:	41 91       	ld	r20, Z+
    1c6e:	9d 91       	ld	r25, X+
    1c70:	49 17       	cp	r20, r25
    1c72:	c9 f3       	breq	.-14     	; 0x1c66 <follow_path+0x1cc>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
    1c74:	ce 01       	movw	r24, r28
    1c76:	60 e0       	ldi	r22, 0x00	; 0
    1c78:	70 e0       	ldi	r23, 0x00	; 0
    1c7a:	0e 94 33 0c 	call	0x1866	; 0x1866 <dir_next>
    1c7e:	da cf       	rjmp	.-76     	; 0x1c34 <follow_path+0x19a>
	do {
		res = move_window(dp->fs, dp->sect);
		if (res != FR_OK) break;
		dir = dp->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1c80:	84 e0       	ldi	r24, 0x04	; 4
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
			if (res != FR_OK) break;
			res = dir_find(dp);				/* Find an object with the sagment name */
			ns = dp->fn[NS];
    1c82:	ec 89       	ldd	r30, Y+20	; 0x14
    1c84:	fd 89       	ldd	r31, Y+21	; 0x15
    1c86:	93 85       	ldd	r25, Z+11	; 0x0b
			if (res != FR_OK) {				/* Failed to find the object */
    1c88:	88 23       	and	r24, r24
    1c8a:	29 f0       	breq	.+10     	; 0x1c96 <follow_path+0x1fc>
				if (res == FR_NO_FILE) {	/* Object is not found */
    1c8c:	84 30       	cpi	r24, 0x04	; 4
    1c8e:	d9 f4       	brne	.+54     	; 0x1cc6 <follow_path+0x22c>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
    1c90:	92 ff       	sbrs	r25, 2
    1c92:	18 c0       	rjmp	.+48     	; 0x1cc4 <follow_path+0x22a>
    1c94:	18 c0       	rjmp	.+48     	; 0x1cc6 <follow_path+0x22c>
					}
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
    1c96:	92 fd       	sbrc	r25, 2
    1c98:	16 c0       	rjmp	.+44     	; 0x1cc6 <follow_path+0x22c>
			dir = dp->dir;						/* Follow the sub-directory */
    1c9a:	6a 89       	ldd	r22, Y+18	; 0x12
    1c9c:	7b 89       	ldd	r23, Y+19	; 0x13
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
    1c9e:	fb 01       	movw	r30, r22
    1ca0:	83 85       	ldd	r24, Z+11	; 0x0b
    1ca2:	84 ff       	sbrs	r24, 4
    1ca4:	0f c0       	rjmp	.+30     	; 0x1cc4 <follow_path+0x22a>
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
    1ca6:	86 01       	movw	r16, r12
    1ca8:	0e 0d       	add	r16, r14
    1caa:	1f 1d       	adc	r17, r15
		}
		FREE_BUF();
	}

	LEAVE_FF(djo.fs, res);
}
    1cac:	e8 81       	ld	r30, Y
    1cae:	f9 81       	ldd	r31, Y+1	; 0x01
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
			dir = dp->dir;						/* Follow the sub-directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
				res = FR_NO_PATH; break;
			}
			dp->sclust = ld_clust(dp->fs, dir);
    1cb0:	80 81       	ld	r24, Z
    1cb2:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <ld_clust.clone.0>
    1cb6:	6e 83       	std	Y+6, r22	; 0x06
    1cb8:	7f 83       	std	Y+7, r23	; 0x07
    1cba:	88 87       	std	Y+8, r24	; 0x08
    1cbc:	99 87       	std	Y+9, r25	; 0x09
		}
    1cbe:	12 cf       	rjmp	.-476    	; 0x1ae4 <follow_path+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
    1cc0:	86 e0       	ldi	r24, 0x06	; 6
    1cc2:	01 c0       	rjmp	.+2      	; 0x1cc6 <follow_path+0x22c>
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
			dir = dp->dir;						/* Follow the sub-directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
				res = FR_NO_PATH; break;
    1cc4:	85 e0       	ldi	r24, 0x05	; 5
			dp->sclust = ld_clust(dp->fs, dir);
		}
	}

	return res;
}
    1cc6:	df 91       	pop	r29
    1cc8:	cf 91       	pop	r28
    1cca:	1f 91       	pop	r17
    1ccc:	0f 91       	pop	r16
    1cce:	ff 90       	pop	r15
    1cd0:	ef 90       	pop	r14
    1cd2:	df 90       	pop	r13
    1cd4:	cf 90       	pop	r12
    1cd6:	bf 90       	pop	r11
    1cd8:	08 95       	ret

00001cda <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
    1cda:	1f 93       	push	r17
    1cdc:	cf 93       	push	r28
    1cde:	df 93       	push	r29
    1ce0:	ec 01       	movw	r28, r24
{
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
    1ce2:	60 e0       	ldi	r22, 0x00	; 0
    1ce4:	70 e0       	ldi	r23, 0x00	; 0
    1ce6:	0e 94 88 09 	call	0x1310	; 0x1310 <dir_sdi>
    1cea:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
    1cec:	88 23       	and	r24, r24
    1cee:	c1 f4       	brne	.+48     	; 0x1d20 <dir_register+0x46>
		n = 0;
		do {
			res = move_window(dp->fs, dp->sect);
    1cf0:	4e 85       	ldd	r20, Y+14	; 0x0e
    1cf2:	5f 85       	ldd	r21, Y+15	; 0x0f
    1cf4:	68 89       	ldd	r22, Y+16	; 0x10
    1cf6:	79 89       	ldd	r23, Y+17	; 0x11
    1cf8:	88 81       	ld	r24, Y
    1cfa:	99 81       	ldd	r25, Y+1	; 0x01
    1cfc:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <move_window>
    1d00:	18 2f       	mov	r17, r24
			if (res != FR_OK) break;
    1d02:	88 23       	and	r24, r24
    1d04:	69 f4       	brne	.+26     	; 0x1d20 <dir_register+0x46>
			if (dp->dir[0] == DDE || dp->dir[0] == 0) {	/* Is it a blank entry? */
    1d06:	ea 89       	ldd	r30, Y+18	; 0x12
    1d08:	fb 89       	ldd	r31, Y+19	; 0x13
    1d0a:	80 81       	ld	r24, Z
    1d0c:	85 3e       	cpi	r24, 0xE5	; 229
    1d0e:	59 f0       	breq	.+22     	; 0x1d26 <dir_register+0x4c>
    1d10:	88 23       	and	r24, r24
    1d12:	49 f0       	breq	.+18     	; 0x1d26 <dir_register+0x4c>
				if (++n == nent) break;	/* A block of contiguous entries is found */
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
    1d14:	ce 01       	movw	r24, r28
    1d16:	61 e0       	ldi	r22, 0x01	; 1
    1d18:	70 e0       	ldi	r23, 0x00	; 0
    1d1a:	0e 94 33 0c 	call	0x1866	; 0x1866 <dir_next>
    1d1e:	e5 cf       	rjmp	.-54     	; 0x1cea <dir_register+0x10>
		} while (res == FR_OK);
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
    1d20:	14 30       	cpi	r17, 0x04	; 4
    1d22:	11 f5       	brne	.+68     	; 0x1d68 <dir_register+0x8e>
    1d24:	20 c0       	rjmp	.+64     	; 0x1d66 <dir_register+0x8c>
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
		res = move_window(dp->fs, dp->sect);
    1d26:	4e 85       	ldd	r20, Y+14	; 0x0e
    1d28:	5f 85       	ldd	r21, Y+15	; 0x0f
    1d2a:	68 89       	ldd	r22, Y+16	; 0x10
    1d2c:	79 89       	ldd	r23, Y+17	; 0x11
    1d2e:	88 81       	ld	r24, Y
    1d30:	99 81       	ldd	r25, Y+1	; 0x01
    1d32:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <move_window>
    1d36:	18 2f       	mov	r17, r24
		if (res == FR_OK) {
    1d38:	88 23       	and	r24, r24
    1d3a:	b1 f4       	brne	.+44     	; 0x1d68 <dir_register+0x8e>
			mem_set(dp->dir, 0, SZ_DIR);	/* Clean the entry */
    1d3c:	8a 89       	ldd	r24, Y+18	; 0x12
    1d3e:	9b 89       	ldd	r25, Y+19	; 0x13
    1d40:	60 e0       	ldi	r22, 0x00	; 0
    1d42:	70 e0       	ldi	r23, 0x00	; 0
    1d44:	40 e2       	ldi	r20, 0x20	; 32
    1d46:	50 e0       	ldi	r21, 0x00	; 0
    1d48:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
    1d4c:	6c 89       	ldd	r22, Y+20	; 0x14
    1d4e:	7d 89       	ldd	r23, Y+21	; 0x15
    1d50:	8a 89       	ldd	r24, Y+18	; 0x12
    1d52:	9b 89       	ldd	r25, Y+19	; 0x13
    1d54:	4b e0       	ldi	r20, 0x0B	; 11
    1d56:	50 e0       	ldi	r21, 0x00	; 0
    1d58:	0e 94 da 03 	call	0x7b4	; 0x7b4 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NS] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
    1d5c:	e8 81       	ld	r30, Y
    1d5e:	f9 81       	ldd	r31, Y+1	; 0x01
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	84 83       	std	Z+4, r24	; 0x04
    1d64:	01 c0       	rjmp	.+2      	; 0x1d68 <dir_register+0x8e>
				n = 0;					/* Not a blank entry. Restart to search */
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
		} while (res == FR_OK);
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
    1d66:	17 e0       	ldi	r17, 0x07	; 7
			dp->fs->wflag = 1;
		}
	}

	return res;
}
    1d68:	81 2f       	mov	r24, r17
    1d6a:	df 91       	pop	r29
    1d6c:	cf 91       	pop	r28
    1d6e:	1f 91       	pop	r17
    1d70:	08 95       	ret

00001d72 <dir_read.clone.2>:
/*-----------------------------------------------------------------------*/
/* Read an object from the directory                                     */
/*-----------------------------------------------------------------------*/
#if _FS_MINIMIZE <= 1 || _USE_LABEL || _FS_RPATH >= 2
static
FRESULT dir_read (
    1d72:	cf 93       	push	r28
    1d74:	df 93       	push	r29
    1d76:	ec 01       	movw	r28, r24
	BYTE a, c, *dir;
#if _USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
    1d78:	84 e0       	ldi	r24, 0x04	; 4
    1d7a:	1d c0       	rjmp	.+58     	; 0x1db6 <dir_read.clone.2+0x44>
	while (dp->sect) {
		res = move_window(dp->fs, dp->sect);
    1d7c:	88 81       	ld	r24, Y
    1d7e:	99 81       	ldd	r25, Y+1	; 0x01
    1d80:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <move_window>
		if (res != FR_OK) break;
    1d84:	88 23       	and	r24, r24
    1d86:	11 f5       	brne	.+68     	; 0x1dcc <dir_read.clone.2+0x5a>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
    1d88:	ea 89       	ldd	r30, Y+18	; 0x12
    1d8a:	fb 89       	ldd	r31, Y+19	; 0x13
		c = dir[DIR_Name];
    1d8c:	90 81       	ld	r25, Z
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1d8e:	99 23       	and	r25, r25
    1d90:	21 f1       	breq	.+72     	; 0x1dda <dir_read.clone.2+0x68>
		a = dir[DIR_Attr] & AM_MASK;
    1d92:	23 85       	ldd	r18, Z+11	; 0x0b
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDE && (_FS_RPATH || c != '.') && a != AM_LFN && (int)(a == AM_VOL) == vol)	/* Is it a valid entry? */
    1d94:	95 3e       	cpi	r25, 0xE5	; 229
    1d96:	41 f0       	breq	.+16     	; 0x1da8 <dir_read.clone.2+0x36>
    1d98:	9e 32       	cpi	r25, 0x2E	; 46
    1d9a:	31 f0       	breq	.+12     	; 0x1da8 <dir_read.clone.2+0x36>
		res = move_window(dp->fs, dp->sect);
		if (res != FR_OK) break;
		dir = dp->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
		a = dir[DIR_Attr] & AM_MASK;
    1d9c:	92 2f       	mov	r25, r18
    1d9e:	9f 73       	andi	r25, 0x3F	; 63
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDE && (_FS_RPATH || c != '.') && a != AM_LFN && (int)(a == AM_VOL) == vol)	/* Is it a valid entry? */
    1da0:	9f 30       	cpi	r25, 0x0F	; 15
    1da2:	11 f0       	breq	.+4      	; 0x1da8 <dir_read.clone.2+0x36>
    1da4:	98 30       	cpi	r25, 0x08	; 8
    1da6:	b1 f4       	brne	.+44     	; 0x1dd4 <dir_read.clone.2+0x62>
			break;
#endif
		res = dir_next(dp, 0);				/* Next entry */
    1da8:	ce 01       	movw	r24, r28
    1daa:	60 e0       	ldi	r22, 0x00	; 0
    1dac:	70 e0       	ldi	r23, 0x00	; 0
    1dae:	0e 94 33 0c 	call	0x1866	; 0x1866 <dir_next>
		if (res != FR_OK) break;
    1db2:	88 23       	and	r24, r24
    1db4:	59 f4       	brne	.+22     	; 0x1dcc <dir_read.clone.2+0x5a>
#if _USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dp->sect) {
    1db6:	4e 85       	ldd	r20, Y+14	; 0x0e
    1db8:	5f 85       	ldd	r21, Y+15	; 0x0f
    1dba:	68 89       	ldd	r22, Y+16	; 0x10
    1dbc:	79 89       	ldd	r23, Y+17	; 0x11
    1dbe:	41 15       	cp	r20, r1
    1dc0:	51 05       	cpc	r21, r1
    1dc2:	61 05       	cpc	r22, r1
    1dc4:	71 05       	cpc	r23, r1
    1dc6:	d1 f6       	brne	.-76     	; 0x1d7c <dir_read.clone.2+0xa>
#endif
		res = dir_next(dp, 0);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dp->sect = 0;
    1dc8:	88 23       	and	r24, r24
    1dca:	21 f0       	breq	.+8      	; 0x1dd4 <dir_read.clone.2+0x62>
    1dcc:	1e 86       	std	Y+14, r1	; 0x0e
    1dce:	1f 86       	std	Y+15, r1	; 0x0f
    1dd0:	18 8a       	std	Y+16, r1	; 0x10
    1dd2:	19 8a       	std	Y+17, r1	; 0x11

	return res;
}
    1dd4:	df 91       	pop	r29
    1dd6:	cf 91       	pop	r28
    1dd8:	08 95       	ret
	while (dp->sect) {
		res = move_window(dp->fs, dp->sect);
		if (res != FR_OK) break;
		dir = dp->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1dda:	84 e0       	ldi	r24, 0x04	; 4
    1ddc:	f7 cf       	rjmp	.-18     	; 0x1dcc <dir_read.clone.2+0x5a>

00001dde <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
    1dde:	af 92       	push	r10
    1de0:	bf 92       	push	r11
    1de2:	cf 92       	push	r12
    1de4:	df 92       	push	r13
    1de6:	ef 92       	push	r14
    1de8:	ff 92       	push	r15
    1dea:	0f 93       	push	r16
    1dec:	1f 93       	push	r17
    1dee:	cf 93       	push	r28
    1df0:	df 93       	push	r29
    1df2:	ec 01       	movw	r28, r24
    1df4:	7a 01       	movw	r14, r20
    1df6:	8b 01       	movw	r16, r22
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    1df8:	42 30       	cpi	r20, 0x02	; 2
    1dfa:	51 05       	cpc	r21, r1
    1dfc:	61 05       	cpc	r22, r1
    1dfe:	71 05       	cpc	r23, r1
    1e00:	08 f4       	brcc	.+2      	; 0x1e04 <remove_chain+0x26>
    1e02:	53 c0       	rjmp	.+166    	; 0x1eaa <remove_chain+0xcc>
    1e04:	8a 89       	ldd	r24, Y+18	; 0x12
    1e06:	9b 89       	ldd	r25, Y+19	; 0x13
    1e08:	ac 89       	ldd	r26, Y+20	; 0x14
    1e0a:	bd 89       	ldd	r27, Y+21	; 0x15
    1e0c:	48 17       	cp	r20, r24
    1e0e:	59 07       	cpc	r21, r25
    1e10:	6a 07       	cpc	r22, r26
    1e12:	7b 07       	cpc	r23, r27
    1e14:	f0 f1       	brcs	.+124    	; 0x1e92 <remove_chain+0xb4>
    1e16:	49 c0       	rjmp	.+146    	; 0x1eaa <remove_chain+0xcc>
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
    1e18:	ce 01       	movw	r24, r28
    1e1a:	b8 01       	movw	r22, r16
    1e1c:	a7 01       	movw	r20, r14
    1e1e:	0e 94 c0 08 	call	0x1180	; 0x1180 <get_fat>
    1e22:	5b 01       	movw	r10, r22
    1e24:	6c 01       	movw	r12, r24
			if (nxt == 0) break;				/* Empty cluster? */
    1e26:	61 15       	cp	r22, r1
    1e28:	71 05       	cpc	r23, r1
    1e2a:	81 05       	cpc	r24, r1
    1e2c:	91 05       	cpc	r25, r1
    1e2e:	d9 f1       	breq	.+118    	; 0x1ea6 <remove_chain+0xc8>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    1e30:	81 e0       	ldi	r24, 0x01	; 1
    1e32:	a8 16       	cp	r10, r24
    1e34:	b1 04       	cpc	r11, r1
    1e36:	c1 04       	cpc	r12, r1
    1e38:	d1 04       	cpc	r13, r1
    1e3a:	b9 f1       	breq	.+110    	; 0x1eaa <remove_chain+0xcc>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    1e3c:	2f ef       	ldi	r18, 0xFF	; 255
    1e3e:	a2 16       	cp	r10, r18
    1e40:	2f ef       	ldi	r18, 0xFF	; 255
    1e42:	b2 06       	cpc	r11, r18
    1e44:	2f ef       	ldi	r18, 0xFF	; 255
    1e46:	c2 06       	cpc	r12, r18
    1e48:	2f ef       	ldi	r18, 0xFF	; 255
    1e4a:	d2 06       	cpc	r13, r18
    1e4c:	81 f1       	breq	.+96     	; 0x1eae <remove_chain+0xd0>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    1e4e:	ce 01       	movw	r24, r28
    1e50:	b8 01       	movw	r22, r16
    1e52:	a7 01       	movw	r20, r14
    1e54:	00 e0       	ldi	r16, 0x00	; 0
    1e56:	10 e0       	ldi	r17, 0x00	; 0
    1e58:	98 01       	movw	r18, r16
    1e5a:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <put_fat>
			if (res != FR_OK) break;
    1e5e:	88 23       	and	r24, r24
    1e60:	39 f5       	brne	.+78     	; 0x1eb0 <remove_chain+0xd2>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
    1e62:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e64:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e66:	a8 89       	ldd	r26, Y+16	; 0x10
    1e68:	b9 89       	ldd	r27, Y+17	; 0x11
    1e6a:	8f 3f       	cpi	r24, 0xFF	; 255
    1e6c:	2f ef       	ldi	r18, 0xFF	; 255
    1e6e:	92 07       	cpc	r25, r18
    1e70:	2f ef       	ldi	r18, 0xFF	; 255
    1e72:	a2 07       	cpc	r26, r18
    1e74:	2f ef       	ldi	r18, 0xFF	; 255
    1e76:	b2 07       	cpc	r27, r18
    1e78:	51 f0       	breq	.+20     	; 0x1e8e <remove_chain+0xb0>
				fs->free_clust++;
    1e7a:	01 96       	adiw	r24, 0x01	; 1
    1e7c:	a1 1d       	adc	r26, r1
    1e7e:	b1 1d       	adc	r27, r1
    1e80:	8e 87       	std	Y+14, r24	; 0x0e
    1e82:	9f 87       	std	Y+15, r25	; 0x0f
    1e84:	a8 8b       	std	Y+16, r26	; 0x10
    1e86:	b9 8b       	std	Y+17, r27	; 0x11
				fs->fsi_flag |= 1;
    1e88:	8d 81       	ldd	r24, Y+5	; 0x05
    1e8a:	81 60       	ori	r24, 0x01	; 1
    1e8c:	8d 83       	std	Y+5, r24	; 0x05
    1e8e:	86 01       	movw	r16, r12
    1e90:	75 01       	movw	r14, r10
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
    1e92:	8a 89       	ldd	r24, Y+18	; 0x12
    1e94:	9b 89       	ldd	r25, Y+19	; 0x13
    1e96:	ac 89       	ldd	r26, Y+20	; 0x14
    1e98:	bd 89       	ldd	r27, Y+21	; 0x15
    1e9a:	e8 16       	cp	r14, r24
    1e9c:	f9 06       	cpc	r15, r25
    1e9e:	0a 07       	cpc	r16, r26
    1ea0:	1b 07       	cpc	r17, r27
    1ea2:	08 f4       	brcc	.+2      	; 0x1ea6 <remove_chain+0xc8>
    1ea4:	b9 cf       	rjmp	.-142    	; 0x1e18 <remove_chain+0x3a>
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
    1ea6:	80 e0       	ldi	r24, 0x00	; 0
    1ea8:	03 c0       	rjmp	.+6      	; 0x1eb0 <remove_chain+0xd2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    1eaa:	82 e0       	ldi	r24, 0x02	; 2
    1eac:	01 c0       	rjmp	.+2      	; 0x1eb0 <remove_chain+0xd2>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    1eae:	81 e0       	ldi	r24, 0x01	; 1
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
}
    1eb0:	df 91       	pop	r29
    1eb2:	cf 91       	pop	r28
    1eb4:	1f 91       	pop	r17
    1eb6:	0f 91       	pop	r16
    1eb8:	ff 90       	pop	r15
    1eba:	ef 90       	pop	r14
    1ebc:	df 90       	pop	r13
    1ebe:	cf 90       	pop	r12
    1ec0:	bf 90       	pop	r11
    1ec2:	af 90       	pop	r10
    1ec4:	08 95       	ret

00001ec6 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
    1ec6:	df 93       	push	r29
    1ec8:	cf 93       	push	r28
    1eca:	cd b7       	in	r28, 0x3d	; 61
    1ecc:	de b7       	in	r29, 0x3e	; 62
    1ece:	27 97       	sbiw	r28, 0x07	; 7
    1ed0:	0f b6       	in	r0, 0x3f	; 63
    1ed2:	f8 94       	cli
    1ed4:	de bf       	out	0x3e, r29	; 62
    1ed6:	0f be       	out	0x3f, r0	; 63
    1ed8:	cd bf       	out	0x3d, r28	; 61
    1eda:	9c 83       	std	Y+4, r25	; 0x04
    1edc:	8b 83       	std	Y+3, r24	; 0x03
    1ede:	7e 83       	std	Y+6, r23	; 0x06
    1ee0:	6d 83       	std	Y+5, r22	; 0x05
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
    1ee2:	7a 83       	std	Y+2, r23	; 0x02
    1ee4:	69 83       	std	Y+1, r22	; 0x01


	vol = get_ldnumber(&rp);
    1ee6:	ce 01       	movw	r24, r28
    1ee8:	01 96       	adiw	r24, 0x01	; 1
    1eea:	4f 83       	std	Y+7, r20	; 0x07
    1eec:	0e 94 4d 04 	call	0x89a	; 0x89a <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
    1ef0:	4f 81       	ldd	r20, Y+7	; 0x07
    1ef2:	97 fd       	sbrc	r25, 7
    1ef4:	25 c0       	rjmp	.+74     	; 0x1f40 <f_mount+0x7a>
	cfs = FatFs[vol];					/* Pointer to fs object */
    1ef6:	fc 01       	movw	r30, r24
    1ef8:	ee 0f       	add	r30, r30
    1efa:	ff 1f       	adc	r31, r31
    1efc:	e5 57       	subi	r30, 0x75	; 117
    1efe:	ff 4f       	sbci	r31, 0xFF	; 255
    1f00:	01 90       	ld	r0, Z+
    1f02:	f0 81       	ld	r31, Z
    1f04:	e0 2d       	mov	r30, r0

	if (cfs) {
    1f06:	30 97       	sbiw	r30, 0x00	; 0
    1f08:	09 f0       	breq	.+2      	; 0x1f0c <f_mount+0x46>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
    1f0a:	10 82       	st	Z, r1
	}

	if (fs) {
    1f0c:	eb 81       	ldd	r30, Y+3	; 0x03
    1f0e:	fc 81       	ldd	r31, Y+4	; 0x04
    1f10:	30 97       	sbiw	r30, 0x00	; 0
    1f12:	09 f0       	breq	.+2      	; 0x1f16 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
    1f14:	10 82       	st	Z, r1
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
    1f16:	dc 01       	movw	r26, r24
    1f18:	aa 0f       	add	r26, r26
    1f1a:	bb 1f       	adc	r27, r27
    1f1c:	a5 57       	subi	r26, 0x75	; 117
    1f1e:	bf 4f       	sbci	r27, 0xFF	; 255
    1f20:	11 96       	adiw	r26, 0x01	; 1
    1f22:	fc 93       	st	X, r31
    1f24:	ee 93       	st	-X, r30

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
    1f26:	30 97       	sbiw	r30, 0x00	; 0
    1f28:	69 f0       	breq	.+26     	; 0x1f44 <f_mount+0x7e>
    1f2a:	41 30       	cpi	r20, 0x01	; 1
    1f2c:	59 f4       	brne	.+22     	; 0x1f44 <f_mount+0x7e>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
    1f2e:	ce 01       	movw	r24, r28
    1f30:	03 96       	adiw	r24, 0x03	; 3
    1f32:	be 01       	movw	r22, r28
    1f34:	6b 5f       	subi	r22, 0xFB	; 251
    1f36:	7f 4f       	sbci	r23, 0xFF	; 255
    1f38:	40 e0       	ldi	r20, 0x00	; 0
    1f3a:	0e 94 70 05 	call	0xae0	; 0xae0 <find_volume>
	LEAVE_FF(fs, res);
    1f3e:	03 c0       	rjmp	.+6      	; 0x1f46 <f_mount+0x80>
	FRESULT res;
	const TCHAR *rp = path;


	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
    1f40:	8b e0       	ldi	r24, 0x0B	; 11
    1f42:	01 c0       	rjmp	.+2      	; 0x1f46 <f_mount+0x80>
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
    1f44:	80 e0       	ldi	r24, 0x00	; 0

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
    1f46:	27 96       	adiw	r28, 0x07	; 7
    1f48:	0f b6       	in	r0, 0x3f	; 63
    1f4a:	f8 94       	cli
    1f4c:	de bf       	out	0x3e, r29	; 62
    1f4e:	0f be       	out	0x3f, r0	; 63
    1f50:	cd bf       	out	0x3d, r28	; 61
    1f52:	cf 91       	pop	r28
    1f54:	df 91       	pop	r29
    1f56:	08 95       	ret

00001f58 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    1f58:	2f 92       	push	r2
    1f5a:	3f 92       	push	r3
    1f5c:	4f 92       	push	r4
    1f5e:	5f 92       	push	r5
    1f60:	6f 92       	push	r6
    1f62:	7f 92       	push	r7
    1f64:	8f 92       	push	r8
    1f66:	9f 92       	push	r9
    1f68:	af 92       	push	r10
    1f6a:	bf 92       	push	r11
    1f6c:	cf 92       	push	r12
    1f6e:	df 92       	push	r13
    1f70:	ef 92       	push	r14
    1f72:	ff 92       	push	r15
    1f74:	0f 93       	push	r16
    1f76:	1f 93       	push	r17
    1f78:	df 93       	push	r29
    1f7a:	cf 93       	push	r28
    1f7c:	cd b7       	in	r28, 0x3d	; 61
    1f7e:	de b7       	in	r29, 0x3e	; 62
    1f80:	a4 97       	sbiw	r28, 0x24	; 36
    1f82:	0f b6       	in	r0, 0x3f	; 63
    1f84:	f8 94       	cli
    1f86:	de bf       	out	0x3e, r29	; 62
    1f88:	0f be       	out	0x3f, r0	; 63
    1f8a:	cd bf       	out	0x3d, r28	; 61
    1f8c:	7c 01       	movw	r14, r24
    1f8e:	7c a3       	std	Y+36, r23	; 0x24
    1f90:	6b a3       	std	Y+35, r22	; 0x23
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	if (!fp) return FR_INVALID_OBJECT;
    1f92:	00 97       	sbiw	r24, 0x00	; 0
    1f94:	09 f4       	brne	.+2      	; 0x1f98 <f_open+0x40>
    1f96:	cf c0       	rjmp	.+414    	; 0x2136 <f_open+0x1de>
	fp->fs = 0;			/* Clear file object */
    1f98:	fc 01       	movw	r30, r24
    1f9a:	11 82       	std	Z+1, r1	; 0x01
    1f9c:	10 82       	st	Z, r1

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    1f9e:	5f e1       	ldi	r21, 0x1F	; 31
    1fa0:	b5 2e       	mov	r11, r21
    1fa2:	b4 22       	and	r11, r20
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
    1fa4:	8e 01       	movw	r16, r28
    1fa6:	03 5f       	subi	r16, 0xF3	; 243
    1fa8:	1f 4f       	sbci	r17, 0xFF	; 255
    1faa:	4e 71       	andi	r20, 0x1E	; 30
    1fac:	c8 01       	movw	r24, r16
    1fae:	be 01       	movw	r22, r28
    1fb0:	6d 5d       	subi	r22, 0xDD	; 221
    1fb2:	7f 4f       	sbci	r23, 0xFF	; 255
    1fb4:	0e 94 70 05 	call	0xae0	; 0xae0 <find_volume>
    1fb8:	a8 2e       	mov	r10, r24
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
    1fba:	88 23       	and	r24, r24
    1fbc:	09 f0       	breq	.+2      	; 0x1fc0 <f_open+0x68>
    1fbe:	bd c0       	rjmp	.+378    	; 0x213a <f_open+0x1e2>
		INIT_BUF(dj);
    1fc0:	ce 01       	movw	r24, r28
    1fc2:	01 96       	adiw	r24, 0x01	; 1
    1fc4:	9a a3       	std	Y+34, r25	; 0x22
    1fc6:	89 a3       	std	Y+33, r24	; 0x21
		res = follow_path(&dj, path);	/* Follow the file path */
    1fc8:	6b a1       	ldd	r22, Y+35	; 0x23
    1fca:	7c a1       	ldd	r23, Y+36	; 0x24
    1fcc:	c8 01       	movw	r24, r16
    1fce:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <follow_path>
		dir = dj.dir;
    1fd2:	0f 8d       	ldd	r16, Y+31	; 0x1f
    1fd4:	18 a1       	ldd	r17, Y+32	; 0x20
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
    1fd6:	88 23       	and	r24, r24
    1fd8:	21 f4       	brne	.+8      	; 0x1fe2 <f_open+0x8a>
			if (!dir)	/* Default directory itself */
    1fda:	01 15       	cp	r16, r1
    1fdc:	11 05       	cpc	r17, r1
    1fde:	09 f4       	brne	.+2      	; 0x1fe2 <f_open+0x8a>
				res = FR_INVALID_NAME;
    1fe0:	86 e0       	ldi	r24, 0x06	; 6
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    1fe2:	2b 2d       	mov	r18, r11
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	a9 01       	movw	r20, r18
    1fe8:	4c 71       	andi	r20, 0x1C	; 28
    1fea:	50 70       	andi	r21, 0x00	; 0
    1fec:	41 15       	cp	r20, r1
    1fee:	51 05       	cpc	r21, r1
    1ff0:	09 f4       	brne	.+2      	; 0x1ff4 <f_open+0x9c>
    1ff2:	5b c0       	rjmp	.+182    	; 0x20aa <f_open+0x152>
			DWORD dw, cl;

			if (res != FR_OK) {					/* No file, create new */
    1ff4:	88 23       	and	r24, r24
    1ff6:	71 f0       	breq	.+28     	; 0x2014 <f_open+0xbc>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    1ff8:	84 30       	cpi	r24, 0x04	; 4
    1ffa:	21 f4       	brne	.+8      	; 0x2004 <f_open+0xac>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
    1ffc:	ce 01       	movw	r24, r28
    1ffe:	0d 96       	adiw	r24, 0x0d	; 13
    2000:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <dir_register>
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
				dir = dj.dir;					/* New entry */
    2004:	0f 8d       	ldd	r16, Y+31	; 0x1f
    2006:	18 a1       	ldd	r17, Y+32	; 0x20
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    2008:	88 23       	and	r24, r24
    200a:	09 f0       	breq	.+2      	; 0x200e <f_open+0xb6>
    200c:	92 c0       	rjmp	.+292    	; 0x2132 <f_open+0x1da>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
    200e:	f8 e0       	ldi	r31, 0x08	; 8
    2010:	bf 2a       	or	r11, r31
    2012:	07 c0       	rjmp	.+14     	; 0x2022 <f_open+0xca>
				dir = dj.dir;					/* New entry */
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    2014:	f8 01       	movw	r30, r16
    2016:	83 85       	ldd	r24, Z+11	; 0x0b
    2018:	81 71       	andi	r24, 0x11	; 17
    201a:	09 f0       	breq	.+2      	; 0x201e <f_open+0xc6>
    201c:	ac c0       	rjmp	.+344    	; 0x2176 <f_open+0x21e>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    201e:	b2 fc       	sbrc	r11, 2
    2020:	a6 c0       	rjmp	.+332    	; 0x216e <f_open+0x216>
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    2022:	b3 fe       	sbrs	r11, 3
    2024:	4d c0       	rjmp	.+154    	; 0x20c0 <f_open+0x168>
				dw = get_fattime();				/* Created time */
    2026:	0e 94 81 1c 	call	0x3902	; 0x3902 <get_fattime>
				ST_DWORD(dir+DIR_CrtTime, dw);
    202a:	f8 01       	movw	r30, r16
    202c:	66 87       	std	Z+14, r22	; 0x0e
    202e:	77 87       	std	Z+15, r23	; 0x0f
    2030:	80 8b       	std	Z+16, r24	; 0x10
    2032:	91 8b       	std	Z+17, r25	; 0x11
				dir[DIR_Attr] = 0;				/* Reset attribute */
    2034:	13 86       	std	Z+11, r1	; 0x0b
				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
    2036:	14 8e       	std	Z+28, r1	; 0x1c
    2038:	15 8e       	std	Z+29, r1	; 0x1d
    203a:	16 8e       	std	Z+30, r1	; 0x1e
    203c:	17 8e       	std	Z+31, r1	; 0x1f
		}
		FREE_BUF();
	}

	LEAVE_FF(djo.fs, res);
}
    203e:	ed 85       	ldd	r30, Y+13	; 0x0d
    2040:	fe 85       	ldd	r31, Y+14	; 0x0e
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
				dw = get_fattime();				/* Created time */
				ST_DWORD(dir+DIR_CrtTime, dw);
				dir[DIR_Attr] = 0;				/* Reset attribute */
				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
    2042:	80 81       	ld	r24, Z
    2044:	b8 01       	movw	r22, r16
    2046:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <ld_clust.clone.0>
    204a:	3b 01       	movw	r6, r22
    204c:	4c 01       	movw	r8, r24
				st_clust(dir, 0);				/* cluster = 0 */
    204e:	c8 01       	movw	r24, r16
    2050:	40 e0       	ldi	r20, 0x00	; 0
    2052:	50 e0       	ldi	r21, 0x00	; 0
    2054:	ba 01       	movw	r22, r20
    2056:	0e 94 05 04 	call	0x80a	; 0x80a <st_clust>
				dj.fs->wflag = 1;
    205a:	8d 85       	ldd	r24, Y+13	; 0x0d
    205c:	9e 85       	ldd	r25, Y+14	; 0x0e
    205e:	21 e0       	ldi	r18, 0x01	; 1
    2060:	fc 01       	movw	r30, r24
    2062:	24 83       	std	Z+4, r18	; 0x04
				if (cl) {						/* Remove the cluster chain if exist */
    2064:	61 14       	cp	r6, r1
    2066:	71 04       	cpc	r7, r1
    2068:	81 04       	cpc	r8, r1
    206a:	91 04       	cpc	r9, r1
    206c:	49 f1       	breq	.+82     	; 0x20c0 <f_open+0x168>
					dw = dj.fs->winsect;
    206e:	22 a4       	ldd	r2, Z+42	; 0x2a
    2070:	33 a4       	ldd	r3, Z+43	; 0x2b
    2072:	44 a4       	ldd	r4, Z+44	; 0x2c
    2074:	55 a4       	ldd	r5, Z+45	; 0x2d
					res = remove_chain(dj.fs, cl);
    2076:	b4 01       	movw	r22, r8
    2078:	a3 01       	movw	r20, r6
    207a:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <remove_chain>
					if (res == FR_OK) {
    207e:	88 23       	and	r24, r24
    2080:	09 f0       	breq	.+2      	; 0x2084 <f_open+0x12c>
    2082:	57 c0       	rjmp	.+174    	; 0x2132 <f_open+0x1da>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    2084:	8d 85       	ldd	r24, Y+13	; 0x0d
    2086:	9e 85       	ldd	r25, Y+14	; 0x0e
    2088:	08 94       	sec
    208a:	61 08       	sbc	r6, r1
    208c:	71 08       	sbc	r7, r1
    208e:	81 08       	sbc	r8, r1
    2090:	91 08       	sbc	r9, r1
    2092:	fc 01       	movw	r30, r24
    2094:	62 86       	std	Z+10, r6	; 0x0a
    2096:	73 86       	std	Z+11, r7	; 0x0b
    2098:	84 86       	std	Z+12, r8	; 0x0c
    209a:	95 86       	std	Z+13, r9	; 0x0d
						res = move_window(dj.fs, dw);
    209c:	b2 01       	movw	r22, r4
    209e:	a1 01       	movw	r20, r2
    20a0:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <move_window>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
						res = FR_DENIED;
				}
			}
		}
		if (res == FR_OK) {
    20a4:	88 23       	and	r24, r24
    20a6:	61 f0       	breq	.+24     	; 0x20c0 <f_open+0x168>
    20a8:	44 c0       	rjmp	.+136    	; 0x2132 <f_open+0x1da>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
    20aa:	88 23       	and	r24, r24
    20ac:	09 f0       	breq	.+2      	; 0x20b0 <f_open+0x158>
    20ae:	41 c0       	rjmp	.+130    	; 0x2132 <f_open+0x1da>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
    20b0:	f8 01       	movw	r30, r16
    20b2:	83 85       	ldd	r24, Z+11	; 0x0b
    20b4:	84 fd       	sbrc	r24, 4
    20b6:	5d c0       	rjmp	.+186    	; 0x2172 <f_open+0x21a>
					res = FR_NO_FILE;
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    20b8:	b1 fe       	sbrs	r11, 1
    20ba:	02 c0       	rjmp	.+4      	; 0x20c0 <f_open+0x168>
    20bc:	80 fd       	sbrc	r24, 0
    20be:	5b c0       	rjmp	.+182    	; 0x2176 <f_open+0x21e>
						res = FR_DENIED;
				}
			}
		}
		if (res == FR_OK) {
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
    20c0:	b3 fe       	sbrs	r11, 3
    20c2:	02 c0       	rjmp	.+4      	; 0x20c8 <f_open+0x170>
				mode |= FA__WRITTEN;
    20c4:	f0 e2       	ldi	r31, 0x20	; 32
    20c6:	bf 2a       	or	r11, r31
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
    20c8:	cd 84       	ldd	r12, Y+13	; 0x0d
    20ca:	de 84       	ldd	r13, Y+14	; 0x0e
    20cc:	f6 01       	movw	r30, r12
    20ce:	82 a5       	ldd	r24, Z+42	; 0x2a
    20d0:	93 a5       	ldd	r25, Z+43	; 0x2b
    20d2:	a4 a5       	ldd	r26, Z+44	; 0x2c
    20d4:	b5 a5       	ldd	r27, Z+45	; 0x2d
    20d6:	f7 01       	movw	r30, r14
    20d8:	82 8f       	std	Z+26, r24	; 0x1a
    20da:	93 8f       	std	Z+27, r25	; 0x1b
    20dc:	a4 8f       	std	Z+28, r26	; 0x1c
    20de:	b5 8f       	std	Z+29, r27	; 0x1d
			fp->dir_ptr = dir;
    20e0:	17 8f       	std	Z+31, r17	; 0x1f
    20e2:	06 8f       	std	Z+30, r16	; 0x1e
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
			fp->flag = mode;					/* File access mode */
    20e4:	b4 82       	std	Z+4, r11	; 0x04
			fp->err = 0;						/* Clear error flag */
    20e6:	15 82       	std	Z+5, r1	; 0x05
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
    20e8:	f6 01       	movw	r30, r12
    20ea:	80 81       	ld	r24, Z
    20ec:	b8 01       	movw	r22, r16
    20ee:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <ld_clust.clone.0>
    20f2:	f7 01       	movw	r30, r14
    20f4:	66 87       	std	Z+14, r22	; 0x0e
    20f6:	77 87       	std	Z+15, r23	; 0x0f
    20f8:	80 8b       	std	Z+16, r24	; 0x10
    20fa:	91 8b       	std	Z+17, r25	; 0x11
			fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    20fc:	f8 01       	movw	r30, r16
    20fe:	84 8d       	ldd	r24, Z+28	; 0x1c
    2100:	95 8d       	ldd	r25, Z+29	; 0x1d
    2102:	a6 8d       	ldd	r26, Z+30	; 0x1e
    2104:	b7 8d       	ldd	r27, Z+31	; 0x1f
    2106:	f7 01       	movw	r30, r14
    2108:	82 87       	std	Z+10, r24	; 0x0a
    210a:	93 87       	std	Z+11, r25	; 0x0b
    210c:	a4 87       	std	Z+12, r26	; 0x0c
    210e:	b5 87       	std	Z+13, r27	; 0x0d
			fp->fptr = 0;						/* File pointer */
    2110:	16 82       	std	Z+6, r1	; 0x06
    2112:	17 82       	std	Z+7, r1	; 0x07
    2114:	10 86       	std	Z+8, r1	; 0x08
    2116:	11 86       	std	Z+9, r1	; 0x09
			fp->dsect = 0;
    2118:	16 8a       	std	Z+22, r1	; 0x16
    211a:	17 8a       	std	Z+23, r1	; 0x17
    211c:	10 8e       	std	Z+24, r1	; 0x18
    211e:	11 8e       	std	Z+25, r1	; 0x19
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
    2120:	d1 82       	std	Z+1, r13	; 0x01
    2122:	c0 82       	st	Z, r12
			fp->id = fp->fs->id;
    2124:	f6 01       	movw	r30, r12
    2126:	86 81       	ldd	r24, Z+6	; 0x06
    2128:	97 81       	ldd	r25, Z+7	; 0x07
    212a:	f7 01       	movw	r30, r14
    212c:	93 83       	std	Z+3, r25	; 0x03
    212e:	82 83       	std	Z+2, r24	; 0x02
    2130:	04 c0       	rjmp	.+8      	; 0x213a <f_open+0x1e2>
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	if (!fp) return FR_INVALID_OBJECT;
    2132:	a8 2e       	mov	r10, r24
    2134:	02 c0       	rjmp	.+4      	; 0x213a <f_open+0x1e2>
    2136:	39 e0       	ldi	r19, 0x09	; 9
    2138:	a3 2e       	mov	r10, r19
			fp->id = fp->fs->id;
		}
	}

	LEAVE_FF(dj.fs, res);
}
    213a:	8a 2d       	mov	r24, r10
    213c:	a4 96       	adiw	r28, 0x24	; 36
    213e:	0f b6       	in	r0, 0x3f	; 63
    2140:	f8 94       	cli
    2142:	de bf       	out	0x3e, r29	; 62
    2144:	0f be       	out	0x3f, r0	; 63
    2146:	cd bf       	out	0x3d, r28	; 61
    2148:	cf 91       	pop	r28
    214a:	df 91       	pop	r29
    214c:	1f 91       	pop	r17
    214e:	0f 91       	pop	r16
    2150:	ff 90       	pop	r15
    2152:	ef 90       	pop	r14
    2154:	df 90       	pop	r13
    2156:	cf 90       	pop	r12
    2158:	bf 90       	pop	r11
    215a:	af 90       	pop	r10
    215c:	9f 90       	pop	r9
    215e:	8f 90       	pop	r8
    2160:	7f 90       	pop	r7
    2162:	6f 90       	pop	r6
    2164:	5f 90       	pop	r5
    2166:	4f 90       	pop	r4
    2168:	3f 90       	pop	r3
    216a:	2f 90       	pop	r2
    216c:	08 95       	ret
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
    216e:	88 e0       	ldi	r24, 0x08	; 8
    2170:	e0 cf       	rjmp	.-64     	; 0x2132 <f_open+0x1da>
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
					res = FR_NO_FILE;
    2172:	84 e0       	ldi	r24, 0x04	; 4
    2174:	de cf       	rjmp	.-68     	; 0x2132 <f_open+0x1da>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
						res = FR_DENIED;
    2176:	87 e0       	ldi	r24, 0x07	; 7
    2178:	dc cf       	rjmp	.-72     	; 0x2132 <f_open+0x1da>

0000217a <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
    217a:	2f 92       	push	r2
    217c:	3f 92       	push	r3
    217e:	4f 92       	push	r4
    2180:	5f 92       	push	r5
    2182:	6f 92       	push	r6
    2184:	7f 92       	push	r7
    2186:	8f 92       	push	r8
    2188:	9f 92       	push	r9
    218a:	af 92       	push	r10
    218c:	bf 92       	push	r11
    218e:	cf 92       	push	r12
    2190:	df 92       	push	r13
    2192:	ff 92       	push	r15
    2194:	0f 93       	push	r16
    2196:	1f 93       	push	r17
    2198:	df 93       	push	r29
    219a:	cf 93       	push	r28
    219c:	00 d0       	rcall	.+0      	; 0x219e <f_read+0x24>
    219e:	00 d0       	rcall	.+0      	; 0x21a0 <f_read+0x26>
    21a0:	00 d0       	rcall	.+0      	; 0x21a2 <f_read+0x28>
    21a2:	cd b7       	in	r28, 0x3d	; 61
    21a4:	de b7       	in	r29, 0x3e	; 62
    21a6:	9e 83       	std	Y+6, r25	; 0x06
    21a8:	8d 83       	std	Y+5, r24	; 0x05
    21aa:	6a 01       	movw	r12, r20
    21ac:	3a 83       	std	Y+2, r19	; 0x02
    21ae:	29 83       	std	Y+1, r18	; 0x01
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
    21b0:	d9 01       	movw	r26, r18
    21b2:	1d 92       	st	X+, r1
    21b4:	1c 92       	st	X, r1

	res = validate(fp);							/* Check validity */
    21b6:	6b 83       	std	Y+3, r22	; 0x03
    21b8:	7c 83       	std	Y+4, r23	; 0x04
    21ba:	0e 94 76 04 	call	0x8ec	; 0x8ec <validate>
    21be:	f8 2e       	mov	r15, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    21c0:	6b 81       	ldd	r22, Y+3	; 0x03
    21c2:	7c 81       	ldd	r23, Y+4	; 0x04
    21c4:	88 23       	and	r24, r24
    21c6:	09 f0       	breq	.+2      	; 0x21ca <f_read+0x50>
    21c8:	3c c1       	rjmp	.+632    	; 0x2442 <f_read+0x2c8>
	if (fp->err)								/* Check error */
    21ca:	ed 81       	ldd	r30, Y+5	; 0x05
    21cc:	fe 81       	ldd	r31, Y+6	; 0x06
    21ce:	f5 80       	ldd	r15, Z+5	; 0x05
    21d0:	ff 20       	and	r15, r15
    21d2:	09 f0       	breq	.+2      	; 0x21d6 <f_read+0x5c>
    21d4:	36 c1       	rjmp	.+620    	; 0x2442 <f_read+0x2c8>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
    21d6:	84 81       	ldd	r24, Z+4	; 0x04
    21d8:	80 ff       	sbrs	r24, 0
    21da:	31 c1       	rjmp	.+610    	; 0x243e <f_read+0x2c4>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
    21dc:	82 85       	ldd	r24, Z+10	; 0x0a
    21de:	93 85       	ldd	r25, Z+11	; 0x0b
    21e0:	a4 85       	ldd	r26, Z+12	; 0x0c
    21e2:	b5 85       	ldd	r27, Z+13	; 0x0d
    21e4:	26 81       	ldd	r18, Z+6	; 0x06
    21e6:	37 81       	ldd	r19, Z+7	; 0x07
    21e8:	40 85       	ldd	r20, Z+8	; 0x08
    21ea:	51 85       	ldd	r21, Z+9	; 0x09
    21ec:	82 1b       	sub	r24, r18
    21ee:	93 0b       	sbc	r25, r19
    21f0:	a4 0b       	sbc	r26, r20
    21f2:	b5 0b       	sbc	r27, r21
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
    21f4:	96 01       	movw	r18, r12
    21f6:	40 e0       	ldi	r20, 0x00	; 0
    21f8:	50 e0       	ldi	r21, 0x00	; 0
    21fa:	82 17       	cp	r24, r18
    21fc:	93 07       	cpc	r25, r19
    21fe:	a4 07       	cpc	r26, r20
    2200:	b5 07       	cpc	r27, r21
    2202:	08 f4       	brcc	.+2      	; 0x2206 <f_read+0x8c>
    2204:	6c 01       	movw	r12, r24
)
{
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
    2206:	26 2e       	mov	r2, r22
    2208:	37 2e       	mov	r3, r23
    220a:	14 c1       	rjmp	.+552    	; 0x2434 <f_read+0x2ba>
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
    220c:	ad 81       	ldd	r26, Y+5	; 0x05
    220e:	be 81       	ldd	r27, Y+6	; 0x06
    2210:	16 96       	adiw	r26, 0x06	; 6
    2212:	2d 91       	ld	r18, X+
    2214:	3d 91       	ld	r19, X+
    2216:	4d 91       	ld	r20, X+
    2218:	5c 91       	ld	r21, X
    221a:	19 97       	sbiw	r26, 0x09	; 9
    221c:	da 01       	movw	r26, r20
    221e:	c9 01       	movw	r24, r18
    2220:	91 70       	andi	r25, 0x01	; 1
    2222:	a0 70       	andi	r26, 0x00	; 0
    2224:	b0 70       	andi	r27, 0x00	; 0
    2226:	00 97       	sbiw	r24, 0x00	; 0
    2228:	a1 05       	cpc	r26, r1
    222a:	b1 05       	cpc	r27, r1
    222c:	09 f0       	breq	.+2      	; 0x2230 <f_read+0xb6>
    222e:	ab c0       	rjmp	.+342    	; 0x2386 <f_read+0x20c>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    2230:	ed 81       	ldd	r30, Y+5	; 0x05
    2232:	fe 81       	ldd	r31, Y+6	; 0x06
    2234:	80 81       	ld	r24, Z
    2236:	91 81       	ldd	r25, Z+1	; 0x01
    2238:	49 01       	movw	r8, r18
    223a:	5a 01       	movw	r10, r20
    223c:	09 e0       	ldi	r16, 0x09	; 9
    223e:	b6 94       	lsr	r11
    2240:	a7 94       	ror	r10
    2242:	97 94       	ror	r9
    2244:	87 94       	ror	r8
    2246:	0a 95       	dec	r16
    2248:	d1 f7       	brne	.-12     	; 0x223e <f_read+0xc4>
    224a:	dc 01       	movw	r26, r24
    224c:	12 96       	adiw	r26, 0x02	; 2
    224e:	0c 91       	ld	r16, X
    2250:	12 97       	sbiw	r26, 0x02	; 2
    2252:	01 50       	subi	r16, 0x01	; 1
    2254:	08 21       	and	r16, r8
			if (!csect) {						/* On the cluster boundary? */
    2256:	41 f5       	brne	.+80     	; 0x22a8 <f_read+0x12e>
				if (fp->fptr == 0) {			/* On the top of the file? */
    2258:	21 15       	cp	r18, r1
    225a:	31 05       	cpc	r19, r1
    225c:	41 05       	cpc	r20, r1
    225e:	51 05       	cpc	r21, r1
    2260:	29 f4       	brne	.+10     	; 0x226c <f_read+0xf2>
					clst = fp->sclust;			/* Follow from the origin */
    2262:	66 85       	ldd	r22, Z+14	; 0x0e
    2264:	77 85       	ldd	r23, Z+15	; 0x0f
    2266:	80 89       	ldd	r24, Z+16	; 0x10
    2268:	91 89       	ldd	r25, Z+17	; 0x11
    226a:	08 c0       	rjmp	.+16     	; 0x227c <f_read+0x102>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
    226c:	ed 81       	ldd	r30, Y+5	; 0x05
    226e:	fe 81       	ldd	r31, Y+6	; 0x06
    2270:	42 89       	ldd	r20, Z+18	; 0x12
    2272:	53 89       	ldd	r21, Z+19	; 0x13
    2274:	64 89       	ldd	r22, Z+20	; 0x14
    2276:	75 89       	ldd	r23, Z+21	; 0x15
    2278:	0e 94 c0 08 	call	0x1180	; 0x1180 <get_fat>
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
    227c:	62 30       	cpi	r22, 0x02	; 2
    227e:	71 05       	cpc	r23, r1
    2280:	81 05       	cpc	r24, r1
    2282:	91 05       	cpc	r25, r1
    2284:	08 f1       	brcs	.+66     	; 0x22c8 <f_read+0x14e>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    2286:	6f 3f       	cpi	r22, 0xFF	; 255
    2288:	bf ef       	ldi	r27, 0xFF	; 255
    228a:	7b 07       	cpc	r23, r27
    228c:	bf ef       	ldi	r27, 0xFF	; 255
    228e:	8b 07       	cpc	r24, r27
    2290:	bf ef       	ldi	r27, 0xFF	; 255
    2292:	9b 07       	cpc	r25, r27
    2294:	09 f4       	brne	.+2      	; 0x2298 <f_read+0x11e>
    2296:	8b c0       	rjmp	.+278    	; 0x23ae <f_read+0x234>
				fp->clust = clst;				/* Update current cluster */
    2298:	ad 81       	ldd	r26, Y+5	; 0x05
    229a:	be 81       	ldd	r27, Y+6	; 0x06
    229c:	52 96       	adiw	r26, 0x12	; 18
    229e:	6d 93       	st	X+, r22
    22a0:	7d 93       	st	X+, r23
    22a2:	8d 93       	st	X+, r24
    22a4:	9c 93       	st	X, r25
    22a6:	55 97       	sbiw	r26, 0x15	; 21
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    22a8:	ed 81       	ldd	r30, Y+5	; 0x05
    22aa:	fe 81       	ldd	r31, Y+6	; 0x06
    22ac:	80 80       	ld	r8, Z
    22ae:	91 80       	ldd	r9, Z+1	; 0x01
    22b0:	42 89       	ldd	r20, Z+18	; 0x12
    22b2:	53 89       	ldd	r21, Z+19	; 0x13
    22b4:	64 89       	ldd	r22, Z+20	; 0x14
    22b6:	75 89       	ldd	r23, Z+21	; 0x15
    22b8:	c4 01       	movw	r24, r8
    22ba:	0e 94 91 08 	call	0x1122	; 0x1122 <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    22be:	61 15       	cp	r22, r1
    22c0:	71 05       	cpc	r23, r1
    22c2:	81 05       	cpc	r24, r1
    22c4:	91 05       	cpc	r25, r1
    22c6:	49 f4       	brne	.+18     	; 0x22da <f_read+0x160>
    22c8:	82 e0       	ldi	r24, 0x02	; 2
    22ca:	ad 81       	ldd	r26, Y+5	; 0x05
    22cc:	be 81       	ldd	r27, Y+6	; 0x06
    22ce:	15 96       	adiw	r26, 0x05	; 5
    22d0:	8c 93       	st	X, r24
    22d2:	15 97       	sbiw	r26, 0x05	; 5
    22d4:	12 e0       	ldi	r17, 0x02	; 2
    22d6:	f1 2e       	mov	r15, r17
    22d8:	b4 c0       	rjmp	.+360    	; 0x2442 <f_read+0x2c8>
			sect += csect;
    22da:	2b 01       	movw	r4, r22
    22dc:	3c 01       	movw	r6, r24
    22de:	40 0e       	add	r4, r16
    22e0:	51 1c       	adc	r5, r1
    22e2:	61 1c       	adc	r6, r1
    22e4:	71 1c       	adc	r7, r1
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
    22e6:	56 01       	movw	r10, r12
    22e8:	ab 2c       	mov	r10, r11
    22ea:	bb 24       	eor	r11, r11
    22ec:	a6 94       	lsr	r10
			if (cc) {							/* Read maximum contiguous sectors directly */
    22ee:	a1 14       	cp	r10, r1
    22f0:	b1 04       	cpc	r11, r1
    22f2:	09 f4       	brne	.+2      	; 0x22f6 <f_read+0x17c>
    22f4:	42 c0       	rjmp	.+132    	; 0x237a <f_read+0x200>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    22f6:	f4 01       	movw	r30, r8
    22f8:	82 81       	ldd	r24, Z+2	; 0x02
    22fa:	10 e0       	ldi	r17, 0x00	; 0
    22fc:	95 01       	movw	r18, r10
    22fe:	20 0f       	add	r18, r16
    2300:	31 1f       	adc	r19, r17
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	82 17       	cp	r24, r18
    2306:	93 07       	cpc	r25, r19
    2308:	18 f4       	brcc	.+6      	; 0x2310 <f_read+0x196>
					cc = fp->fs->csize - csect;
    230a:	5c 01       	movw	r10, r24
    230c:	a0 1a       	sub	r10, r16
    230e:	b1 0a       	sbc	r11, r17
				if (disk_read(fp->fs->drv, rbuff, sect, cc))
    2310:	d4 01       	movw	r26, r8
    2312:	11 96       	adiw	r26, 0x01	; 1
    2314:	8c 91       	ld	r24, X
    2316:	b1 01       	movw	r22, r2
    2318:	a3 01       	movw	r20, r6
    231a:	92 01       	movw	r18, r4
    231c:	85 01       	movw	r16, r10
    231e:	0e 94 75 02 	call	0x4ea	; 0x4ea <disk_read>
    2322:	88 23       	and	r24, r24
    2324:	09 f0       	breq	.+2      	; 0x2328 <f_read+0x1ae>
    2326:	43 c0       	rjmp	.+134    	; 0x23ae <f_read+0x234>
					ABORT(fp->fs, FR_DISK_ERR);
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
    2328:	ad 81       	ldd	r26, Y+5	; 0x05
    232a:	be 81       	ldd	r27, Y+6	; 0x06
    232c:	ed 91       	ld	r30, X+
    232e:	fc 91       	ld	r31, X
    2330:	11 97       	sbiw	r26, 0x01	; 1
    2332:	84 81       	ldd	r24, Z+4	; 0x04
    2334:	88 23       	and	r24, r24
    2336:	e1 f0       	breq	.+56     	; 0x2370 <f_read+0x1f6>
    2338:	82 a5       	ldd	r24, Z+42	; 0x2a
    233a:	93 a5       	ldd	r25, Z+43	; 0x2b
    233c:	a4 a5       	ldd	r26, Z+44	; 0x2c
    233e:	b5 a5       	ldd	r27, Z+45	; 0x2d
    2340:	84 19       	sub	r24, r4
    2342:	95 09       	sbc	r25, r5
    2344:	a6 09       	sbc	r26, r6
    2346:	b7 09       	sbc	r27, r7
    2348:	95 01       	movw	r18, r10
    234a:	40 e0       	ldi	r20, 0x00	; 0
    234c:	50 e0       	ldi	r21, 0x00	; 0
    234e:	82 17       	cp	r24, r18
    2350:	93 07       	cpc	r25, r19
    2352:	a4 07       	cpc	r26, r20
    2354:	b5 07       	cpc	r27, r21
    2356:	60 f4       	brcc	.+24     	; 0x2370 <f_read+0x1f6>
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
    2358:	98 2f       	mov	r25, r24
    235a:	88 27       	eor	r24, r24
    235c:	99 0f       	add	r25, r25
    235e:	bf 01       	movw	r22, r30
    2360:	62 5d       	subi	r22, 0xD2	; 210
    2362:	7f 4f       	sbci	r23, 0xFF	; 255
    2364:	82 0d       	add	r24, r2
    2366:	93 1d       	adc	r25, r3
    2368:	40 e0       	ldi	r20, 0x00	; 0
    236a:	52 e0       	ldi	r21, 0x02	; 2
    236c:	0e 94 da 03 	call	0x7b4	; 0x7b4 <mem_cpy>
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
    2370:	85 01       	movw	r16, r10
    2372:	10 2f       	mov	r17, r16
    2374:	00 27       	eor	r16, r16
    2376:	11 0f       	add	r17, r17
				continue;
    2378:	3e c0       	rjmp	.+124    	; 0x23f6 <f_read+0x27c>
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1))	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    237a:	ed 81       	ldd	r30, Y+5	; 0x05
    237c:	fe 81       	ldd	r31, Y+6	; 0x06
    237e:	46 8a       	std	Z+22, r4	; 0x16
    2380:	57 8a       	std	Z+23, r5	; 0x17
    2382:	60 8e       	std	Z+24, r6	; 0x18
    2384:	71 8e       	std	Z+25, r7	; 0x19
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    2386:	ad 81       	ldd	r26, Y+5	; 0x05
    2388:	be 81       	ldd	r27, Y+6	; 0x06
    238a:	16 96       	adiw	r26, 0x06	; 6
    238c:	8d 90       	ld	r8, X+
    238e:	9d 90       	ld	r9, X+
    2390:	ad 90       	ld	r10, X+
    2392:	bc 90       	ld	r11, X
    2394:	19 97       	sbiw	r26, 0x09	; 9
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
    2396:	56 96       	adiw	r26, 0x16	; 22
    2398:	4d 91       	ld	r20, X+
    239a:	5d 91       	ld	r21, X+
    239c:	6d 91       	ld	r22, X+
    239e:	7c 91       	ld	r23, X
    23a0:	59 97       	sbiw	r26, 0x19	; 25
    23a2:	8d 91       	ld	r24, X+
    23a4:	9c 91       	ld	r25, X
    23a6:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <move_window>
    23aa:	88 23       	and	r24, r24
    23ac:	39 f0       	breq	.+14     	; 0x23bc <f_read+0x242>
			ABORT(fp->fs, FR_DISK_ERR);
    23ae:	81 e0       	ldi	r24, 0x01	; 1
    23b0:	ed 81       	ldd	r30, Y+5	; 0x05
    23b2:	fe 81       	ldd	r31, Y+6	; 0x06
    23b4:	85 83       	std	Z+5, r24	; 0x05
    23b6:	ff 24       	eor	r15, r15
    23b8:	f3 94       	inc	r15
    23ba:	43 c0       	rjmp	.+134    	; 0x2442 <f_read+0x2c8>
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    23bc:	c4 01       	movw	r24, r8
    23be:	91 70       	andi	r25, 0x01	; 1
    23c0:	20 e0       	ldi	r18, 0x00	; 0
    23c2:	32 e0       	ldi	r19, 0x02	; 2
    23c4:	28 1b       	sub	r18, r24
    23c6:	39 0b       	sbc	r19, r25
    23c8:	86 01       	movw	r16, r12
    23ca:	2c 15       	cp	r18, r12
    23cc:	3d 05       	cpc	r19, r13
    23ce:	08 f4       	brcc	.+2      	; 0x23d2 <f_read+0x258>
    23d0:	89 01       	movw	r16, r18
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
    23d2:	ad 81       	ldd	r26, Y+5	; 0x05
    23d4:	be 81       	ldd	r27, Y+6	; 0x06
    23d6:	6d 91       	ld	r22, X+
    23d8:	7c 91       	ld	r23, X
    23da:	11 97       	sbiw	r26, 0x01	; 1
    23dc:	62 5d       	subi	r22, 0xD2	; 210
    23de:	7f 4f       	sbci	r23, 0xFF	; 255
    23e0:	16 96       	adiw	r26, 0x06	; 6
    23e2:	8d 91       	ld	r24, X+
    23e4:	9c 91       	ld	r25, X
    23e6:	17 97       	sbiw	r26, 0x07	; 7
    23e8:	91 70       	andi	r25, 0x01	; 1
    23ea:	68 0f       	add	r22, r24
    23ec:	79 1f       	adc	r23, r25
    23ee:	c1 01       	movw	r24, r2
    23f0:	a8 01       	movw	r20, r16
    23f2:	0e 94 da 03 	call	0x7b4	; 0x7b4 <mem_cpy>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    23f6:	20 0e       	add	r2, r16
    23f8:	31 1e       	adc	r3, r17
    23fa:	98 01       	movw	r18, r16
    23fc:	40 e0       	ldi	r20, 0x00	; 0
    23fe:	50 e0       	ldi	r21, 0x00	; 0
    2400:	ed 81       	ldd	r30, Y+5	; 0x05
    2402:	fe 81       	ldd	r31, Y+6	; 0x06
    2404:	86 81       	ldd	r24, Z+6	; 0x06
    2406:	97 81       	ldd	r25, Z+7	; 0x07
    2408:	a0 85       	ldd	r26, Z+8	; 0x08
    240a:	b1 85       	ldd	r27, Z+9	; 0x09
    240c:	82 0f       	add	r24, r18
    240e:	93 1f       	adc	r25, r19
    2410:	a4 1f       	adc	r26, r20
    2412:	b5 1f       	adc	r27, r21
    2414:	86 83       	std	Z+6, r24	; 0x06
    2416:	97 83       	std	Z+7, r25	; 0x07
    2418:	a0 87       	std	Z+8, r26	; 0x08
    241a:	b1 87       	std	Z+9, r27	; 0x09
    241c:	a9 81       	ldd	r26, Y+1	; 0x01
    241e:	ba 81       	ldd	r27, Y+2	; 0x02
    2420:	8d 91       	ld	r24, X+
    2422:	9c 91       	ld	r25, X
    2424:	11 97       	sbiw	r26, 0x01	; 1
    2426:	80 0f       	add	r24, r16
    2428:	91 1f       	adc	r25, r17
    242a:	11 96       	adiw	r26, 0x01	; 1
    242c:	9c 93       	st	X, r25
    242e:	8e 93       	st	-X, r24
    2430:	c0 1a       	sub	r12, r16
    2432:	d1 0a       	sbc	r13, r17
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
    2434:	c1 14       	cp	r12, r1
    2436:	d1 04       	cpc	r13, r1
    2438:	09 f0       	breq	.+2      	; 0x243c <f_read+0x2c2>
    243a:	e8 ce       	rjmp	.-560    	; 0x220c <f_read+0x92>
    243c:	02 c0       	rjmp	.+4      	; 0x2442 <f_read+0x2c8>
	res = validate(fp);							/* Check validity */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->err)								/* Check error */
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
    243e:	67 e0       	ldi	r22, 0x07	; 7
    2440:	f6 2e       	mov	r15, r22
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    2442:	8f 2d       	mov	r24, r15
    2444:	26 96       	adiw	r28, 0x06	; 6
    2446:	0f b6       	in	r0, 0x3f	; 63
    2448:	f8 94       	cli
    244a:	de bf       	out	0x3e, r29	; 62
    244c:	0f be       	out	0x3f, r0	; 63
    244e:	cd bf       	out	0x3d, r28	; 61
    2450:	cf 91       	pop	r28
    2452:	df 91       	pop	r29
    2454:	1f 91       	pop	r17
    2456:	0f 91       	pop	r16
    2458:	ff 90       	pop	r15
    245a:	df 90       	pop	r13
    245c:	cf 90       	pop	r12
    245e:	bf 90       	pop	r11
    2460:	af 90       	pop	r10
    2462:	9f 90       	pop	r9
    2464:	8f 90       	pop	r8
    2466:	7f 90       	pop	r7
    2468:	6f 90       	pop	r6
    246a:	5f 90       	pop	r5
    246c:	4f 90       	pop	r4
    246e:	3f 90       	pop	r3
    2470:	2f 90       	pop	r2
    2472:	08 95       	ret

00002474 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
    2474:	2f 92       	push	r2
    2476:	3f 92       	push	r3
    2478:	4f 92       	push	r4
    247a:	5f 92       	push	r5
    247c:	6f 92       	push	r6
    247e:	7f 92       	push	r7
    2480:	8f 92       	push	r8
    2482:	9f 92       	push	r9
    2484:	af 92       	push	r10
    2486:	bf 92       	push	r11
    2488:	cf 92       	push	r12
    248a:	df 92       	push	r13
    248c:	ef 92       	push	r14
    248e:	ff 92       	push	r15
    2490:	0f 93       	push	r16
    2492:	1f 93       	push	r17
    2494:	df 93       	push	r29
    2496:	cf 93       	push	r28
    2498:	00 d0       	rcall	.+0      	; 0x249a <f_write+0x26>
    249a:	00 d0       	rcall	.+0      	; 0x249c <f_write+0x28>
    249c:	cd b7       	in	r28, 0x3d	; 61
    249e:	de b7       	in	r29, 0x3e	; 62
    24a0:	9c 83       	std	Y+4, r25	; 0x04
    24a2:	8b 83       	std	Y+3, r24	; 0x03
    24a4:	3a 01       	movw	r6, r20
    24a6:	19 01       	movw	r2, r18
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
    24a8:	d9 01       	movw	r26, r18
    24aa:	1d 92       	st	X+, r1
    24ac:	1c 92       	st	X, r1

	res = validate(fp);						/* Check validity */
    24ae:	69 83       	std	Y+1, r22	; 0x01
    24b0:	7a 83       	std	Y+2, r23	; 0x02
    24b2:	0e 94 76 04 	call	0x8ec	; 0x8ec <validate>
    24b6:	f8 2e       	mov	r15, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    24b8:	69 81       	ldd	r22, Y+1	; 0x01
    24ba:	7a 81       	ldd	r23, Y+2	; 0x02
    24bc:	88 23       	and	r24, r24
    24be:	09 f0       	breq	.+2      	; 0x24c2 <f_write+0x4e>
    24c0:	bb c1       	rjmp	.+886    	; 0x2838 <f_write+0x3c4>
	if (fp->err)							/* Check error */
    24c2:	eb 81       	ldd	r30, Y+3	; 0x03
    24c4:	fc 81       	ldd	r31, Y+4	; 0x04
    24c6:	f5 80       	ldd	r15, Z+5	; 0x05
    24c8:	ff 20       	and	r15, r15
    24ca:	09 f0       	breq	.+2      	; 0x24ce <f_write+0x5a>
    24cc:	b5 c1       	rjmp	.+874    	; 0x2838 <f_write+0x3c4>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    24ce:	84 81       	ldd	r24, Z+4	; 0x04
    24d0:	81 ff       	sbrs	r24, 1
    24d2:	b0 c1       	rjmp	.+864    	; 0x2834 <f_write+0x3c0>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
    24d4:	26 81       	ldd	r18, Z+6	; 0x06
    24d6:	37 81       	ldd	r19, Z+7	; 0x07
    24d8:	40 85       	ldd	r20, Z+8	; 0x08
    24da:	51 85       	ldd	r21, Z+9	; 0x09
    24dc:	c3 01       	movw	r24, r6
    24de:	a0 e0       	ldi	r26, 0x00	; 0
    24e0:	b0 e0       	ldi	r27, 0x00	; 0
    24e2:	82 0f       	add	r24, r18
    24e4:	93 1f       	adc	r25, r19
    24e6:	a4 1f       	adc	r26, r20
    24e8:	b5 1f       	adc	r27, r21
    24ea:	82 17       	cp	r24, r18
    24ec:	93 07       	cpc	r25, r19
    24ee:	a4 07       	cpc	r26, r20
    24f0:	b5 07       	cpc	r27, r21
    24f2:	10 f4       	brcc	.+4      	; 0x24f8 <f_write+0x84>
    24f4:	66 24       	eor	r6, r6
    24f6:	77 24       	eor	r7, r7
)
{
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
    24f8:	46 2e       	mov	r4, r22
    24fa:	57 2e       	mov	r5, r23
    24fc:	7a c1       	rjmp	.+756    	; 0x27f2 <f_write+0x37e>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    24fe:	ab 81       	ldd	r26, Y+3	; 0x03
    2500:	bc 81       	ldd	r27, Y+4	; 0x04
    2502:	16 96       	adiw	r26, 0x06	; 6
    2504:	2d 91       	ld	r18, X+
    2506:	3d 91       	ld	r19, X+
    2508:	4d 91       	ld	r20, X+
    250a:	5c 91       	ld	r21, X
    250c:	19 97       	sbiw	r26, 0x09	; 9
    250e:	da 01       	movw	r26, r20
    2510:	c9 01       	movw	r24, r18
    2512:	91 70       	andi	r25, 0x01	; 1
    2514:	a0 70       	andi	r26, 0x00	; 0
    2516:	b0 70       	andi	r27, 0x00	; 0
    2518:	00 97       	sbiw	r24, 0x00	; 0
    251a:	a1 05       	cpc	r26, r1
    251c:	b1 05       	cpc	r27, r1
    251e:	09 f0       	breq	.+2      	; 0x2522 <f_write+0xae>
    2520:	0c c1       	rjmp	.+536    	; 0x273a <f_write+0x2c6>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    2522:	ab 81       	ldd	r26, Y+3	; 0x03
    2524:	bc 81       	ldd	r27, Y+4	; 0x04
    2526:	ed 91       	ld	r30, X+
    2528:	fc 91       	ld	r31, X
    252a:	11 97       	sbiw	r26, 0x01	; 1
    252c:	ca 01       	movw	r24, r20
    252e:	b9 01       	movw	r22, r18
    2530:	19 e0       	ldi	r17, 0x09	; 9
    2532:	96 95       	lsr	r25
    2534:	87 95       	ror	r24
    2536:	77 95       	ror	r23
    2538:	67 95       	ror	r22
    253a:	1a 95       	dec	r17
    253c:	d1 f7       	brne	.-12     	; 0x2532 <f_write+0xbe>
    253e:	e2 80       	ldd	r14, Z+2	; 0x02
    2540:	ea 94       	dec	r14
    2542:	e6 22       	and	r14, r22
			if (!csect) {					/* On the cluster boundary? */
    2544:	09 f0       	breq	.+2      	; 0x2548 <f_write+0xd4>
    2546:	48 c0       	rjmp	.+144    	; 0x25d8 <f_write+0x164>
				if (fp->fptr == 0) {		/* On the top of the file? */
    2548:	21 15       	cp	r18, r1
    254a:	31 05       	cpc	r19, r1
    254c:	41 05       	cpc	r20, r1
    254e:	51 05       	cpc	r21, r1
    2550:	81 f4       	brne	.+32     	; 0x2572 <f_write+0xfe>
					clst = fp->sclust;		/* Follow from the origin */
    2552:	1e 96       	adiw	r26, 0x0e	; 14
    2554:	6d 91       	ld	r22, X+
    2556:	7d 91       	ld	r23, X+
    2558:	8d 91       	ld	r24, X+
    255a:	9c 91       	ld	r25, X
    255c:	51 97       	sbiw	r26, 0x11	; 17
					if (clst == 0)			/* When no cluster is allocated, */
    255e:	61 15       	cp	r22, r1
    2560:	71 05       	cpc	r23, r1
    2562:	81 05       	cpc	r24, r1
    2564:	91 05       	cpc	r25, r1
    2566:	b1 f4       	brne	.+44     	; 0x2594 <f_write+0x120>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    2568:	cf 01       	movw	r24, r30
    256a:	40 e0       	ldi	r20, 0x00	; 0
    256c:	50 e0       	ldi	r21, 0x00	; 0
    256e:	ba 01       	movw	r22, r20
    2570:	09 c0       	rjmp	.+18     	; 0x2584 <f_write+0x110>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    2572:	ab 81       	ldd	r26, Y+3	; 0x03
    2574:	bc 81       	ldd	r27, Y+4	; 0x04
    2576:	52 96       	adiw	r26, 0x12	; 18
    2578:	4d 91       	ld	r20, X+
    257a:	5d 91       	ld	r21, X+
    257c:	6d 91       	ld	r22, X+
    257e:	7c 91       	ld	r23, X
    2580:	55 97       	sbiw	r26, 0x15	; 21
    2582:	cf 01       	movw	r24, r30
    2584:	0e 94 4a 0b 	call	0x1694	; 0x1694 <create_chain>
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    2588:	61 15       	cp	r22, r1
    258a:	71 05       	cpc	r23, r1
    258c:	81 05       	cpc	r24, r1
    258e:	91 05       	cpc	r25, r1
    2590:	09 f4       	brne	.+2      	; 0x2594 <f_write+0x120>
    2592:	33 c1       	rjmp	.+614    	; 0x27fa <f_write+0x386>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    2594:	61 30       	cpi	r22, 0x01	; 1
    2596:	71 05       	cpc	r23, r1
    2598:	81 05       	cpc	r24, r1
    259a:	91 05       	cpc	r25, r1
    259c:	09 f4       	brne	.+2      	; 0x25a0 <f_write+0x12c>
    259e:	49 c0       	rjmp	.+146    	; 0x2632 <f_write+0x1be>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    25a0:	6f 3f       	cpi	r22, 0xFF	; 255
    25a2:	ff ef       	ldi	r31, 0xFF	; 255
    25a4:	7f 07       	cpc	r23, r31
    25a6:	ff ef       	ldi	r31, 0xFF	; 255
    25a8:	8f 07       	cpc	r24, r31
    25aa:	ff ef       	ldi	r31, 0xFF	; 255
    25ac:	9f 07       	cpc	r25, r31
    25ae:	09 f4       	brne	.+2      	; 0x25b2 <f_write+0x13e>
    25b0:	af c0       	rjmp	.+350    	; 0x2710 <f_write+0x29c>
				fp->clust = clst;			/* Update current cluster */
    25b2:	eb 81       	ldd	r30, Y+3	; 0x03
    25b4:	fc 81       	ldd	r31, Y+4	; 0x04
    25b6:	62 8b       	std	Z+18, r22	; 0x12
    25b8:	73 8b       	std	Z+19, r23	; 0x13
    25ba:	84 8b       	std	Z+20, r24	; 0x14
    25bc:	95 8b       	std	Z+21, r25	; 0x15
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
    25be:	26 85       	ldd	r18, Z+14	; 0x0e
    25c0:	37 85       	ldd	r19, Z+15	; 0x0f
    25c2:	40 89       	ldd	r20, Z+16	; 0x10
    25c4:	51 89       	ldd	r21, Z+17	; 0x11
    25c6:	21 15       	cp	r18, r1
    25c8:	31 05       	cpc	r19, r1
    25ca:	41 05       	cpc	r20, r1
    25cc:	51 05       	cpc	r21, r1
    25ce:	21 f4       	brne	.+8      	; 0x25d8 <f_write+0x164>
    25d0:	66 87       	std	Z+14, r22	; 0x0e
    25d2:	77 87       	std	Z+15, r23	; 0x0f
    25d4:	80 8b       	std	Z+16, r24	; 0x10
    25d6:	91 8b       	std	Z+17, r25	; 0x11
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
    25d8:	ab 81       	ldd	r26, Y+3	; 0x03
    25da:	bc 81       	ldd	r27, Y+4	; 0x04
    25dc:	ed 91       	ld	r30, X+
    25de:	fc 91       	ld	r31, X
    25e0:	11 97       	sbiw	r26, 0x01	; 1
    25e2:	62 a5       	ldd	r22, Z+42	; 0x2a
    25e4:	73 a5       	ldd	r23, Z+43	; 0x2b
    25e6:	84 a5       	ldd	r24, Z+44	; 0x2c
    25e8:	95 a5       	ldd	r25, Z+45	; 0x2d
    25ea:	56 96       	adiw	r26, 0x16	; 22
    25ec:	2d 91       	ld	r18, X+
    25ee:	3d 91       	ld	r19, X+
    25f0:	4d 91       	ld	r20, X+
    25f2:	5c 91       	ld	r21, X
    25f4:	59 97       	sbiw	r26, 0x19	; 25
    25f6:	62 17       	cp	r22, r18
    25f8:	73 07       	cpc	r23, r19
    25fa:	84 07       	cpc	r24, r20
    25fc:	95 07       	cpc	r25, r21
    25fe:	31 f4       	brne	.+12     	; 0x260c <f_write+0x198>
    2600:	cf 01       	movw	r24, r30
    2602:	0e 94 95 04 	call	0x92a	; 0x92a <sync_window>
    2606:	88 23       	and	r24, r24
    2608:	09 f0       	breq	.+2      	; 0x260c <f_write+0x198>
    260a:	ab c0       	rjmp	.+342    	; 0x2762 <f_write+0x2ee>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1))
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    260c:	ab 81       	ldd	r26, Y+3	; 0x03
    260e:	bc 81       	ldd	r27, Y+4	; 0x04
    2610:	0d 91       	ld	r16, X+
    2612:	1c 91       	ld	r17, X
    2614:	11 97       	sbiw	r26, 0x01	; 1
    2616:	52 96       	adiw	r26, 0x12	; 18
    2618:	4d 91       	ld	r20, X+
    261a:	5d 91       	ld	r21, X+
    261c:	6d 91       	ld	r22, X+
    261e:	7c 91       	ld	r23, X
    2620:	55 97       	sbiw	r26, 0x15	; 21
    2622:	c8 01       	movw	r24, r16
    2624:	0e 94 91 08 	call	0x1122	; 0x1122 <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    2628:	61 15       	cp	r22, r1
    262a:	71 05       	cpc	r23, r1
    262c:	81 05       	cpc	r24, r1
    262e:	91 05       	cpc	r25, r1
    2630:	39 f4       	brne	.+14     	; 0x2640 <f_write+0x1cc>
    2632:	82 e0       	ldi	r24, 0x02	; 2
    2634:	eb 81       	ldd	r30, Y+3	; 0x03
    2636:	fc 81       	ldd	r31, Y+4	; 0x04
    2638:	85 83       	std	Z+5, r24	; 0x05
    263a:	42 e0       	ldi	r20, 0x02	; 2
    263c:	f4 2e       	mov	r15, r20
    263e:	fc c0       	rjmp	.+504    	; 0x2838 <f_write+0x3c4>
			sect += csect;
    2640:	4b 01       	movw	r8, r22
    2642:	5c 01       	movw	r10, r24
    2644:	8e 0c       	add	r8, r14
    2646:	91 1c       	adc	r9, r1
    2648:	a1 1c       	adc	r10, r1
    264a:	b1 1c       	adc	r11, r1
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    264c:	63 01       	movw	r12, r6
    264e:	cd 2c       	mov	r12, r13
    2650:	dd 24       	eor	r13, r13
    2652:	c6 94       	lsr	r12
			if (cc) {						/* Write maximum contiguous sectors directly */
    2654:	c1 14       	cp	r12, r1
    2656:	d1 04       	cpc	r13, r1
    2658:	09 f4       	brne	.+2      	; 0x265c <f_write+0x1e8>
    265a:	46 c0       	rjmp	.+140    	; 0x26e8 <f_write+0x274>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    265c:	d8 01       	movw	r26, r16
    265e:	12 96       	adiw	r26, 0x02	; 2
    2660:	2c 91       	ld	r18, X
    2662:	12 97       	sbiw	r26, 0x02	; 2
    2664:	8e 2d       	mov	r24, r14
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	a6 01       	movw	r20, r12
    266a:	48 0f       	add	r20, r24
    266c:	59 1f       	adc	r21, r25
    266e:	30 e0       	ldi	r19, 0x00	; 0
    2670:	24 17       	cp	r18, r20
    2672:	35 07       	cpc	r19, r21
    2674:	18 f4       	brcc	.+6      	; 0x267c <f_write+0x208>
					cc = fp->fs->csize - csect;
    2676:	69 01       	movw	r12, r18
    2678:	c8 1a       	sub	r12, r24
    267a:	d9 0a       	sbc	r13, r25
				if (disk_write(fp->fs->drv, wbuff, sect, cc))
    267c:	f8 01       	movw	r30, r16
    267e:	81 81       	ldd	r24, Z+1	; 0x01
    2680:	b2 01       	movw	r22, r4
    2682:	a5 01       	movw	r20, r10
    2684:	94 01       	movw	r18, r8
    2686:	86 01       	movw	r16, r12
    2688:	0e 94 c2 02 	call	0x584	; 0x584 <disk_write>
    268c:	88 23       	and	r24, r24
    268e:	09 f0       	breq	.+2      	; 0x2692 <f_write+0x21e>
    2690:	3f c0       	rjmp	.+126    	; 0x2710 <f_write+0x29c>
					ABORT(fp->fs, FR_DISK_ERR);
#if _FS_MINIMIZE <= 2
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    2692:	ab 81       	ldd	r26, Y+3	; 0x03
    2694:	bc 81       	ldd	r27, Y+4	; 0x04
    2696:	ed 91       	ld	r30, X+
    2698:	fc 91       	ld	r31, X
    269a:	11 97       	sbiw	r26, 0x01	; 1
    269c:	62 a5       	ldd	r22, Z+42	; 0x2a
    269e:	73 a5       	ldd	r23, Z+43	; 0x2b
    26a0:	84 a5       	ldd	r24, Z+44	; 0x2c
    26a2:	95 a5       	ldd	r25, Z+45	; 0x2d
    26a4:	68 19       	sub	r22, r8
    26a6:	79 09       	sbc	r23, r9
    26a8:	8a 09       	sbc	r24, r10
    26aa:	9b 09       	sbc	r25, r11
    26ac:	96 01       	movw	r18, r12
    26ae:	40 e0       	ldi	r20, 0x00	; 0
    26b0:	50 e0       	ldi	r21, 0x00	; 0
    26b2:	62 17       	cp	r22, r18
    26b4:	73 07       	cpc	r23, r19
    26b6:	84 07       	cpc	r24, r20
    26b8:	95 07       	cpc	r25, r21
    26ba:	88 f4       	brcc	.+34     	; 0x26de <f_write+0x26a>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    26bc:	76 2f       	mov	r23, r22
    26be:	66 27       	eor	r22, r22
    26c0:	77 0f       	add	r23, r23
    26c2:	64 0d       	add	r22, r4
    26c4:	75 1d       	adc	r23, r5
    26c6:	cf 01       	movw	r24, r30
    26c8:	8e 96       	adiw	r24, 0x2e	; 46
    26ca:	40 e0       	ldi	r20, 0x00	; 0
    26cc:	52 e0       	ldi	r21, 0x02	; 2
    26ce:	0e 94 da 03 	call	0x7b4	; 0x7b4 <mem_cpy>
					fp->fs->wflag = 0;
    26d2:	ab 81       	ldd	r26, Y+3	; 0x03
    26d4:	bc 81       	ldd	r27, Y+4	; 0x04
    26d6:	ed 91       	ld	r30, X+
    26d8:	fc 91       	ld	r31, X
    26da:	11 97       	sbiw	r26, 0x01	; 1
    26dc:	14 82       	std	Z+4, r1	; 0x04
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    26de:	86 01       	movw	r16, r12
    26e0:	10 2f       	mov	r17, r16
    26e2:	00 27       	eor	r16, r16
    26e4:	11 0f       	add	r17, r17
				continue;
    26e6:	67 c0       	rjmp	.+206    	; 0x27b6 <f_write+0x342>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
    26e8:	eb 81       	ldd	r30, Y+3	; 0x03
    26ea:	fc 81       	ldd	r31, Y+4	; 0x04
    26ec:	26 81       	ldd	r18, Z+6	; 0x06
    26ee:	37 81       	ldd	r19, Z+7	; 0x07
    26f0:	40 85       	ldd	r20, Z+8	; 0x08
    26f2:	51 85       	ldd	r21, Z+9	; 0x09
    26f4:	82 85       	ldd	r24, Z+10	; 0x0a
    26f6:	93 85       	ldd	r25, Z+11	; 0x0b
    26f8:	a4 85       	ldd	r26, Z+12	; 0x0c
    26fa:	b5 85       	ldd	r27, Z+13	; 0x0d
    26fc:	28 17       	cp	r18, r24
    26fe:	39 07       	cpc	r19, r25
    2700:	4a 07       	cpc	r20, r26
    2702:	5b 07       	cpc	r21, r27
    2704:	a0 f0       	brcs	.+40     	; 0x272e <f_write+0x2ba>
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
    2706:	c8 01       	movw	r24, r16
    2708:	0e 94 95 04 	call	0x92a	; 0x92a <sync_window>
    270c:	88 23       	and	r24, r24
    270e:	39 f0       	breq	.+14     	; 0x271e <f_write+0x2aa>
    2710:	81 e0       	ldi	r24, 0x01	; 1
    2712:	ab 81       	ldd	r26, Y+3	; 0x03
    2714:	bc 81       	ldd	r27, Y+4	; 0x04
    2716:	15 96       	adiw	r26, 0x05	; 5
    2718:	8c 93       	st	X, r24
    271a:	15 97       	sbiw	r26, 0x05	; 5
    271c:	26 c0       	rjmp	.+76     	; 0x276a <f_write+0x2f6>
				fp->fs->winsect = sect;
    271e:	ab 81       	ldd	r26, Y+3	; 0x03
    2720:	bc 81       	ldd	r27, Y+4	; 0x04
    2722:	ed 91       	ld	r30, X+
    2724:	fc 91       	ld	r31, X
    2726:	82 a6       	std	Z+42, r8	; 0x2a
    2728:	93 a6       	std	Z+43, r9	; 0x2b
    272a:	a4 a6       	std	Z+44, r10	; 0x2c
    272c:	b5 a6       	std	Z+45, r11	; 0x2d
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1))
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    272e:	eb 81       	ldd	r30, Y+3	; 0x03
    2730:	fc 81       	ldd	r31, Y+4	; 0x04
    2732:	86 8a       	std	Z+22, r8	; 0x16
    2734:	97 8a       	std	Z+23, r9	; 0x17
    2736:	a0 8e       	std	Z+24, r10	; 0x18
    2738:	b1 8e       	std	Z+25, r11	; 0x19
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    273a:	ab 81       	ldd	r26, Y+3	; 0x03
    273c:	bc 81       	ldd	r27, Y+4	; 0x04
    273e:	16 96       	adiw	r26, 0x06	; 6
    2740:	8d 90       	ld	r8, X+
    2742:	9d 90       	ld	r9, X+
    2744:	ad 90       	ld	r10, X+
    2746:	bc 90       	ld	r11, X
    2748:	19 97       	sbiw	r26, 0x09	; 9
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
    274a:	56 96       	adiw	r26, 0x16	; 22
    274c:	4d 91       	ld	r20, X+
    274e:	5d 91       	ld	r21, X+
    2750:	6d 91       	ld	r22, X+
    2752:	7c 91       	ld	r23, X
    2754:	59 97       	sbiw	r26, 0x19	; 25
    2756:	8d 91       	ld	r24, X+
    2758:	9c 91       	ld	r25, X
    275a:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <move_window>
    275e:	88 23       	and	r24, r24
    2760:	39 f0       	breq	.+14     	; 0x2770 <f_write+0x2fc>
			ABORT(fp->fs, FR_DISK_ERR);
    2762:	81 e0       	ldi	r24, 0x01	; 1
    2764:	eb 81       	ldd	r30, Y+3	; 0x03
    2766:	fc 81       	ldd	r31, Y+4	; 0x04
    2768:	85 83       	std	Z+5, r24	; 0x05
    276a:	ff 24       	eor	r15, r15
    276c:	f3 94       	inc	r15
    276e:	64 c0       	rjmp	.+200    	; 0x2838 <f_write+0x3c4>
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    2770:	c4 01       	movw	r24, r8
    2772:	91 70       	andi	r25, 0x01	; 1
    2774:	20 e0       	ldi	r18, 0x00	; 0
    2776:	32 e0       	ldi	r19, 0x02	; 2
    2778:	28 1b       	sub	r18, r24
    277a:	39 0b       	sbc	r19, r25
    277c:	83 01       	movw	r16, r6
    277e:	26 15       	cp	r18, r6
    2780:	37 05       	cpc	r19, r7
    2782:	08 f4       	brcc	.+2      	; 0x2786 <f_write+0x312>
    2784:	89 01       	movw	r16, r18
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    2786:	ab 81       	ldd	r26, Y+3	; 0x03
    2788:	bc 81       	ldd	r27, Y+4	; 0x04
    278a:	2d 91       	ld	r18, X+
    278c:	3c 91       	ld	r19, X
    278e:	11 97       	sbiw	r26, 0x01	; 1
    2790:	22 5d       	subi	r18, 0xD2	; 210
    2792:	3f 4f       	sbci	r19, 0xFF	; 255
    2794:	16 96       	adiw	r26, 0x06	; 6
    2796:	8d 91       	ld	r24, X+
    2798:	9c 91       	ld	r25, X
    279a:	17 97       	sbiw	r26, 0x07	; 7
    279c:	91 70       	andi	r25, 0x01	; 1
    279e:	82 0f       	add	r24, r18
    27a0:	93 1f       	adc	r25, r19
    27a2:	b2 01       	movw	r22, r4
    27a4:	a8 01       	movw	r20, r16
    27a6:	0e 94 da 03 	call	0x7b4	; 0x7b4 <mem_cpy>
		fp->fs->wflag = 1;
    27aa:	ab 81       	ldd	r26, Y+3	; 0x03
    27ac:	bc 81       	ldd	r27, Y+4	; 0x04
    27ae:	ed 91       	ld	r30, X+
    27b0:	fc 91       	ld	r31, X
    27b2:	b1 e0       	ldi	r27, 0x01	; 1
    27b4:	b4 83       	std	Z+4, r27	; 0x04
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    27b6:	40 0e       	add	r4, r16
    27b8:	51 1e       	adc	r5, r17
    27ba:	98 01       	movw	r18, r16
    27bc:	40 e0       	ldi	r20, 0x00	; 0
    27be:	50 e0       	ldi	r21, 0x00	; 0
    27c0:	eb 81       	ldd	r30, Y+3	; 0x03
    27c2:	fc 81       	ldd	r31, Y+4	; 0x04
    27c4:	86 81       	ldd	r24, Z+6	; 0x06
    27c6:	97 81       	ldd	r25, Z+7	; 0x07
    27c8:	a0 85       	ldd	r26, Z+8	; 0x08
    27ca:	b1 85       	ldd	r27, Z+9	; 0x09
    27cc:	82 0f       	add	r24, r18
    27ce:	93 1f       	adc	r25, r19
    27d0:	a4 1f       	adc	r26, r20
    27d2:	b5 1f       	adc	r27, r21
    27d4:	86 83       	std	Z+6, r24	; 0x06
    27d6:	97 83       	std	Z+7, r25	; 0x07
    27d8:	a0 87       	std	Z+8, r26	; 0x08
    27da:	b1 87       	std	Z+9, r27	; 0x09
    27dc:	d1 01       	movw	r26, r2
    27de:	8d 91       	ld	r24, X+
    27e0:	9c 91       	ld	r25, X
    27e2:	11 97       	sbiw	r26, 0x01	; 1
    27e4:	80 0f       	add	r24, r16
    27e6:	91 1f       	adc	r25, r17
    27e8:	11 96       	adiw	r26, 0x01	; 1
    27ea:	9c 93       	st	X, r25
    27ec:	8e 93       	st	-X, r24
    27ee:	60 1a       	sub	r6, r16
    27f0:	71 0a       	sbc	r7, r17
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */

	for ( ;  btw;							/* Repeat until all data written */
    27f2:	61 14       	cp	r6, r1
    27f4:	71 04       	cpc	r7, r1
    27f6:	09 f0       	breq	.+2      	; 0x27fa <f_write+0x386>
    27f8:	82 ce       	rjmp	.-764    	; 0x24fe <f_write+0x8a>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    27fa:	eb 81       	ldd	r30, Y+3	; 0x03
    27fc:	fc 81       	ldd	r31, Y+4	; 0x04
    27fe:	86 81       	ldd	r24, Z+6	; 0x06
    2800:	97 81       	ldd	r25, Z+7	; 0x07
    2802:	a0 85       	ldd	r26, Z+8	; 0x08
    2804:	b1 85       	ldd	r27, Z+9	; 0x09
    2806:	22 85       	ldd	r18, Z+10	; 0x0a
    2808:	33 85       	ldd	r19, Z+11	; 0x0b
    280a:	44 85       	ldd	r20, Z+12	; 0x0c
    280c:	55 85       	ldd	r21, Z+13	; 0x0d
    280e:	28 17       	cp	r18, r24
    2810:	39 07       	cpc	r19, r25
    2812:	4a 07       	cpc	r20, r26
    2814:	5b 07       	cpc	r21, r27
    2816:	20 f4       	brcc	.+8      	; 0x2820 <f_write+0x3ac>
    2818:	82 87       	std	Z+10, r24	; 0x0a
    281a:	93 87       	std	Z+11, r25	; 0x0b
    281c:	a4 87       	std	Z+12, r26	; 0x0c
    281e:	b5 87       	std	Z+13, r27	; 0x0d
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    2820:	ab 81       	ldd	r26, Y+3	; 0x03
    2822:	bc 81       	ldd	r27, Y+4	; 0x04
    2824:	14 96       	adiw	r26, 0x04	; 4
    2826:	8c 91       	ld	r24, X
    2828:	14 97       	sbiw	r26, 0x04	; 4
    282a:	80 62       	ori	r24, 0x20	; 32
    282c:	14 96       	adiw	r26, 0x04	; 4
    282e:	8c 93       	st	X, r24
    2830:	14 97       	sbiw	r26, 0x04	; 4

	LEAVE_FF(fp->fs, FR_OK);
    2832:	02 c0       	rjmp	.+4      	; 0x2838 <f_write+0x3c4>
	res = validate(fp);						/* Check validity */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->err)							/* Check error */
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
    2834:	87 e0       	ldi	r24, 0x07	; 7
    2836:	f8 2e       	mov	r15, r24

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file change flag */

	LEAVE_FF(fp->fs, FR_OK);
}
    2838:	8f 2d       	mov	r24, r15
    283a:	0f 90       	pop	r0
    283c:	0f 90       	pop	r0
    283e:	0f 90       	pop	r0
    2840:	0f 90       	pop	r0
    2842:	cf 91       	pop	r28
    2844:	df 91       	pop	r29
    2846:	1f 91       	pop	r17
    2848:	0f 91       	pop	r16
    284a:	ff 90       	pop	r15
    284c:	ef 90       	pop	r14
    284e:	df 90       	pop	r13
    2850:	cf 90       	pop	r12
    2852:	bf 90       	pop	r11
    2854:	af 90       	pop	r10
    2856:	9f 90       	pop	r9
    2858:	8f 90       	pop	r8
    285a:	7f 90       	pop	r7
    285c:	6f 90       	pop	r6
    285e:	5f 90       	pop	r5
    2860:	4f 90       	pop	r4
    2862:	3f 90       	pop	r3
    2864:	2f 90       	pop	r2
    2866:	08 95       	ret

00002868 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
    2868:	0f 93       	push	r16
    286a:	1f 93       	push	r17
    286c:	cf 93       	push	r28
    286e:	df 93       	push	r29
    2870:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
    2872:	0e 94 76 04 	call	0x8ec	; 0x8ec <validate>
	if (res == FR_OK) {
    2876:	88 23       	and	r24, r24
    2878:	b1 f5       	brne	.+108    	; 0x28e6 <f_sync+0x7e>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    287a:	9c 81       	ldd	r25, Y+4	; 0x04
    287c:	95 ff       	sbrs	r25, 5
    287e:	33 c0       	rjmp	.+102    	; 0x28e6 <f_sync+0x7e>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    2880:	4a 8d       	ldd	r20, Y+26	; 0x1a
    2882:	5b 8d       	ldd	r21, Y+27	; 0x1b
    2884:	6c 8d       	ldd	r22, Y+28	; 0x1c
    2886:	7d 8d       	ldd	r23, Y+29	; 0x1d
    2888:	88 81       	ld	r24, Y
    288a:	99 81       	ldd	r25, Y+1	; 0x01
    288c:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <move_window>
			if (res == FR_OK) {
    2890:	88 23       	and	r24, r24
    2892:	49 f5       	brne	.+82     	; 0x28e6 <f_sync+0x7e>
				dir = fp->dir_ptr;
    2894:	0e 8d       	ldd	r16, Y+30	; 0x1e
    2896:	1f 8d       	ldd	r17, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    2898:	f8 01       	movw	r30, r16
    289a:	83 85       	ldd	r24, Z+11	; 0x0b
    289c:	80 62       	ori	r24, 0x20	; 32
    289e:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    28a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    28a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    28a4:	ac 85       	ldd	r26, Y+12	; 0x0c
    28a6:	bd 85       	ldd	r27, Y+13	; 0x0d
    28a8:	84 8f       	std	Z+28, r24	; 0x1c
    28aa:	95 8f       	std	Z+29, r25	; 0x1d
    28ac:	a6 8f       	std	Z+30, r26	; 0x1e
    28ae:	b7 8f       	std	Z+31, r27	; 0x1f
				st_clust(dir, fp->sclust);					/* Update start cluster */
    28b0:	4e 85       	ldd	r20, Y+14	; 0x0e
    28b2:	5f 85       	ldd	r21, Y+15	; 0x0f
    28b4:	68 89       	ldd	r22, Y+16	; 0x10
    28b6:	79 89       	ldd	r23, Y+17	; 0x11
    28b8:	c8 01       	movw	r24, r16
    28ba:	0e 94 05 04 	call	0x80a	; 0x80a <st_clust>
				tm = get_fattime();							/* Update updated time */
    28be:	0e 94 81 1c 	call	0x3902	; 0x3902 <get_fattime>
				ST_DWORD(dir+DIR_WrtTime, tm);
    28c2:	f8 01       	movw	r30, r16
    28c4:	66 8b       	std	Z+22, r22	; 0x16
    28c6:	77 8b       	std	Z+23, r23	; 0x17
    28c8:	80 8f       	std	Z+24, r24	; 0x18
    28ca:	91 8f       	std	Z+25, r25	; 0x19
				ST_WORD(dir+DIR_LstAccDate, 0);
    28cc:	13 8a       	std	Z+19, r1	; 0x13
    28ce:	12 8a       	std	Z+18, r1	; 0x12
				fp->flag &= ~FA__WRITTEN;
    28d0:	8c 81       	ldd	r24, Y+4	; 0x04
    28d2:	8f 7d       	andi	r24, 0xDF	; 223
    28d4:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    28d6:	e8 81       	ld	r30, Y
    28d8:	f9 81       	ldd	r31, Y+1	; 0x01
    28da:	81 e0       	ldi	r24, 0x01	; 1
    28dc:	84 83       	std	Z+4, r24	; 0x04
				res = sync_fs(fp->fs);
    28de:	88 81       	ld	r24, Y
    28e0:	99 81       	ldd	r25, Y+1	; 0x01
    28e2:	0e 94 0c 08 	call	0x1018	; 0x1018 <sync_fs>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    28e6:	df 91       	pop	r29
    28e8:	cf 91       	pop	r28
    28ea:	1f 91       	pop	r17
    28ec:	0f 91       	pop	r16
    28ee:	08 95       	ret

000028f0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    28f0:	cf 93       	push	r28
    28f2:	df 93       	push	r29
    28f4:	ec 01       	movw	r28, r24
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
    28f6:	0e 94 34 14 	call	0x2868	; 0x2868 <f_sync>
	if (res == FR_OK)
    28fa:	88 23       	and	r24, r24
    28fc:	39 f4       	brne	.+14     	; 0x290c <f_close+0x1c>
#endif
	{
		res = validate(fp);				/* Lock volume */
    28fe:	ce 01       	movw	r24, r28
    2900:	0e 94 76 04 	call	0x8ec	; 0x8ec <validate>
		if (res == FR_OK) {
    2904:	88 23       	and	r24, r24
    2906:	11 f4       	brne	.+4      	; 0x290c <f_close+0x1c>
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
				fp->fs = 0;				/* Invalidate file object */
    2908:	19 82       	std	Y+1, r1	; 0x01
    290a:	18 82       	st	Y, r1
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
    290c:	df 91       	pop	r29
    290e:	cf 91       	pop	r28
    2910:	08 95       	ret

00002912 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    2912:	2f 92       	push	r2
    2914:	3f 92       	push	r3
    2916:	4f 92       	push	r4
    2918:	5f 92       	push	r5
    291a:	6f 92       	push	r6
    291c:	7f 92       	push	r7
    291e:	9f 92       	push	r9
    2920:	af 92       	push	r10
    2922:	bf 92       	push	r11
    2924:	cf 92       	push	r12
    2926:	df 92       	push	r13
    2928:	ef 92       	push	r14
    292a:	ff 92       	push	r15
    292c:	0f 93       	push	r16
    292e:	1f 93       	push	r17
    2930:	df 93       	push	r29
    2932:	cf 93       	push	r28
    2934:	00 d0       	rcall	.+0      	; 0x2936 <f_lseek+0x24>
    2936:	00 d0       	rcall	.+0      	; 0x2938 <f_lseek+0x26>
    2938:	00 d0       	rcall	.+0      	; 0x293a <f_lseek+0x28>
    293a:	cd b7       	in	r28, 0x3d	; 61
    293c:	de b7       	in	r29, 0x3e	; 62
    293e:	9e 83       	std	Y+6, r25	; 0x06
    2940:	8d 83       	std	Y+5, r24	; 0x05
    2942:	7a 01       	movw	r14, r20
    2944:	8b 01       	movw	r16, r22
	FRESULT res;


	res = validate(fp);					/* Check validity of the object */
    2946:	0e 94 76 04 	call	0x8ec	; 0x8ec <validate>
    294a:	98 2e       	mov	r9, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    294c:	88 23       	and	r24, r24
    294e:	09 f0       	breq	.+2      	; 0x2952 <f_lseek+0x40>
    2950:	85 c1       	rjmp	.+778    	; 0x2c5c <f_lseek+0x34a>
	if (fp->err)						/* Check error */
    2952:	ad 81       	ldd	r26, Y+5	; 0x05
    2954:	be 81       	ldd	r27, Y+6	; 0x06
    2956:	15 96       	adiw	r26, 0x05	; 5
    2958:	9c 90       	ld	r9, X
    295a:	15 97       	sbiw	r26, 0x05	; 5
    295c:	99 20       	and	r9, r9
    295e:	09 f0       	breq	.+2      	; 0x2962 <f_lseek+0x50>
    2960:	7d c1       	rjmp	.+762    	; 0x2c5c <f_lseek+0x34a>

	/* Normal Seek */
	{
		DWORD clst, bcs, nsect, ifptr;

		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    2962:	1a 96       	adiw	r26, 0x0a	; 10
    2964:	8d 91       	ld	r24, X+
    2966:	9d 91       	ld	r25, X+
    2968:	0d 90       	ld	r0, X+
    296a:	bc 91       	ld	r27, X
    296c:	a0 2d       	mov	r26, r0
    296e:	8e 15       	cp	r24, r14
    2970:	9f 05       	cpc	r25, r15
    2972:	a0 07       	cpc	r26, r16
    2974:	b1 07       	cpc	r27, r17
    2976:	38 f4       	brcc	.+14     	; 0x2986 <f_lseek+0x74>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
    2978:	ed 81       	ldd	r30, Y+5	; 0x05
    297a:	fe 81       	ldd	r31, Y+6	; 0x06
    297c:	24 81       	ldd	r18, Z+4	; 0x04
    297e:	21 fd       	sbrc	r18, 1
    2980:	02 c0       	rjmp	.+4      	; 0x2986 <f_lseek+0x74>
    2982:	7c 01       	movw	r14, r24
    2984:	8d 01       	movw	r16, r26
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
    2986:	ed 81       	ldd	r30, Y+5	; 0x05
    2988:	fe 81       	ldd	r31, Y+6	; 0x06
    298a:	86 81       	ldd	r24, Z+6	; 0x06
    298c:	97 81       	ldd	r25, Z+7	; 0x07
    298e:	a0 85       	ldd	r26, Z+8	; 0x08
    2990:	b1 85       	ldd	r27, Z+9	; 0x09
		fp->fptr = nsect = 0;
    2992:	16 82       	std	Z+6, r1	; 0x06
    2994:	17 82       	std	Z+7, r1	; 0x07
    2996:	10 86       	std	Z+8, r1	; 0x08
    2998:	11 86       	std	Z+9, r1	; 0x09
		if (ofs) {
    299a:	e1 14       	cp	r14, r1
    299c:	f1 04       	cpc	r15, r1
    299e:	01 05       	cpc	r16, r1
    29a0:	11 05       	cpc	r17, r1
    29a2:	09 f4       	brne	.+2      	; 0x29a6 <f_lseek+0x94>
    29a4:	2a c1       	rjmp	.+596    	; 0x2bfa <f_lseek+0x2e8>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    29a6:	20 80       	ld	r2, Z
    29a8:	31 80       	ldd	r3, Z+1	; 0x01
    29aa:	f1 01       	movw	r30, r2
    29ac:	a2 80       	ldd	r10, Z+2	; 0x02
    29ae:	bb 24       	eor	r11, r11
    29b0:	cc 24       	eor	r12, r12
    29b2:	dd 24       	eor	r13, r13
    29b4:	49 e0       	ldi	r20, 0x09	; 9
    29b6:	aa 0c       	add	r10, r10
    29b8:	bb 1c       	adc	r11, r11
    29ba:	cc 1c       	adc	r12, r12
    29bc:	dd 1c       	adc	r13, r13
    29be:	4a 95       	dec	r20
    29c0:	d1 f7       	brne	.-12     	; 0x29b6 <f_lseek+0xa4>
			if (ifptr > 0 &&
    29c2:	00 97       	sbiw	r24, 0x00	; 0
    29c4:	a1 05       	cpc	r26, r1
    29c6:	b1 05       	cpc	r27, r1
    29c8:	f1 f1       	breq	.+124    	; 0x2a46 <f_lseek+0x134>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    29ca:	2c 01       	movw	r4, r24
    29cc:	3d 01       	movw	r6, r26
    29ce:	08 94       	sec
    29d0:	41 08       	sbc	r4, r1
    29d2:	51 08       	sbc	r5, r1
    29d4:	61 08       	sbc	r6, r1
    29d6:	71 08       	sbc	r7, r1
    29d8:	c8 01       	movw	r24, r16
    29da:	b7 01       	movw	r22, r14
    29dc:	61 50       	subi	r22, 0x01	; 1
    29de:	70 40       	sbci	r23, 0x00	; 0
    29e0:	80 40       	sbci	r24, 0x00	; 0
    29e2:	90 40       	sbci	r25, 0x00	; 0
    29e4:	a6 01       	movw	r20, r12
    29e6:	95 01       	movw	r18, r10
    29e8:	0e 94 a5 1c 	call	0x394a	; 0x394a <__udivmodsi4>
    29ec:	29 83       	std	Y+1, r18	; 0x01
    29ee:	3a 83       	std	Y+2, r19	; 0x02
    29f0:	4b 83       	std	Y+3, r20	; 0x03
    29f2:	5c 83       	std	Y+4, r21	; 0x04
    29f4:	c3 01       	movw	r24, r6
    29f6:	b2 01       	movw	r22, r4
    29f8:	a6 01       	movw	r20, r12
    29fa:	95 01       	movw	r18, r10
    29fc:	0e 94 a5 1c 	call	0x394a	; 0x394a <__udivmodsi4>

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
		if (ofs) {
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
			if (ifptr > 0 &&
    2a00:	89 81       	ldd	r24, Y+1	; 0x01
    2a02:	9a 81       	ldd	r25, Y+2	; 0x02
    2a04:	ab 81       	ldd	r26, Y+3	; 0x03
    2a06:	bc 81       	ldd	r27, Y+4	; 0x04
    2a08:	82 17       	cp	r24, r18
    2a0a:	93 07       	cpc	r25, r19
    2a0c:	a4 07       	cpc	r26, r20
    2a0e:	b5 07       	cpc	r27, r21
    2a10:	d0 f0       	brcs	.+52     	; 0x2a46 <f_lseek+0x134>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    2a12:	88 27       	eor	r24, r24
    2a14:	99 27       	eor	r25, r25
    2a16:	dc 01       	movw	r26, r24
    2a18:	8a 19       	sub	r24, r10
    2a1a:	9b 09       	sbc	r25, r11
    2a1c:	ac 09       	sbc	r26, r12
    2a1e:	bd 09       	sbc	r27, r13
    2a20:	84 21       	and	r24, r4
    2a22:	95 21       	and	r25, r5
    2a24:	a6 21       	and	r26, r6
    2a26:	b7 21       	and	r27, r7
    2a28:	ed 81       	ldd	r30, Y+5	; 0x05
    2a2a:	fe 81       	ldd	r31, Y+6	; 0x06
    2a2c:	86 83       	std	Z+6, r24	; 0x06
    2a2e:	97 83       	std	Z+7, r25	; 0x07
    2a30:	a0 87       	std	Z+8, r26	; 0x08
    2a32:	b1 87       	std	Z+9, r27	; 0x09
				ofs -= fp->fptr;
    2a34:	e8 1a       	sub	r14, r24
    2a36:	f9 0a       	sbc	r15, r25
    2a38:	0a 0b       	sbc	r16, r26
    2a3a:	1b 0b       	sbc	r17, r27
				clst = fp->clust;
    2a3c:	42 89       	ldd	r20, Z+18	; 0x12
    2a3e:	53 89       	ldd	r21, Z+19	; 0x13
    2a40:	64 89       	ldd	r22, Z+20	; 0x14
    2a42:	75 89       	ldd	r23, Z+21	; 0x15
    2a44:	38 c0       	rjmp	.+112    	; 0x2ab6 <f_lseek+0x1a4>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
    2a46:	ad 81       	ldd	r26, Y+5	; 0x05
    2a48:	be 81       	ldd	r27, Y+6	; 0x06
    2a4a:	1e 96       	adiw	r26, 0x0e	; 14
    2a4c:	4d 91       	ld	r20, X+
    2a4e:	5d 91       	ld	r21, X+
    2a50:	6d 91       	ld	r22, X+
    2a52:	7c 91       	ld	r23, X
    2a54:	51 97       	sbiw	r26, 0x11	; 17
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    2a56:	41 15       	cp	r20, r1
    2a58:	51 05       	cpc	r21, r1
    2a5a:	61 05       	cpc	r22, r1
    2a5c:	71 05       	cpc	r23, r1
    2a5e:	19 f5       	brne	.+70     	; 0x2aa6 <f_lseek+0x194>
					clst = create_chain(fp->fs, 0);
    2a60:	c1 01       	movw	r24, r2
    2a62:	40 e0       	ldi	r20, 0x00	; 0
    2a64:	50 e0       	ldi	r21, 0x00	; 0
    2a66:	ba 01       	movw	r22, r20
    2a68:	0e 94 4a 0b 	call	0x1694	; 0x1694 <create_chain>
    2a6c:	ab 01       	movw	r20, r22
    2a6e:	bc 01       	movw	r22, r24
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    2a70:	41 30       	cpi	r20, 0x01	; 1
    2a72:	51 05       	cpc	r21, r1
    2a74:	61 05       	cpc	r22, r1
    2a76:	71 05       	cpc	r23, r1
    2a78:	21 f4       	brne	.+8      	; 0x2a82 <f_lseek+0x170>
    2a7a:	82 e0       	ldi	r24, 0x02	; 2
    2a7c:	ed 81       	ldd	r30, Y+5	; 0x05
    2a7e:	fe 81       	ldd	r31, Y+6	; 0x06
    2a80:	5e c0       	rjmp	.+188    	; 0x2b3e <f_lseek+0x22c>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    2a82:	4f 3f       	cpi	r20, 0xFF	; 255
    2a84:	ff ef       	ldi	r31, 0xFF	; 255
    2a86:	5f 07       	cpc	r21, r31
    2a88:	ff ef       	ldi	r31, 0xFF	; 255
    2a8a:	6f 07       	cpc	r22, r31
    2a8c:	ff ef       	ldi	r31, 0xFF	; 255
    2a8e:	7f 07       	cpc	r23, r31
    2a90:	21 f4       	brne	.+8      	; 0x2a9a <f_lseek+0x188>
    2a92:	81 e0       	ldi	r24, 0x01	; 1
    2a94:	ad 81       	ldd	r26, Y+5	; 0x05
    2a96:	be 81       	ldd	r27, Y+6	; 0x06
    2a98:	37 c0       	rjmp	.+110    	; 0x2b08 <f_lseek+0x1f6>
					fp->sclust = clst;
    2a9a:	ed 81       	ldd	r30, Y+5	; 0x05
    2a9c:	fe 81       	ldd	r31, Y+6	; 0x06
    2a9e:	46 87       	std	Z+14, r20	; 0x0e
    2aa0:	57 87       	std	Z+15, r21	; 0x0f
    2aa2:	60 8b       	std	Z+16, r22	; 0x10
    2aa4:	71 8b       	std	Z+17, r23	; 0x11
				}
#endif
				fp->clust = clst;
    2aa6:	ad 81       	ldd	r26, Y+5	; 0x05
    2aa8:	be 81       	ldd	r27, Y+6	; 0x06
    2aaa:	52 96       	adiw	r26, 0x12	; 18
    2aac:	4d 93       	st	X+, r20
    2aae:	5d 93       	st	X+, r21
    2ab0:	6d 93       	st	X+, r22
    2ab2:	7c 93       	st	X, r23
    2ab4:	55 97       	sbiw	r26, 0x15	; 21
			}
			if (clst != 0) {
    2ab6:	41 15       	cp	r20, r1
    2ab8:	51 05       	cpc	r21, r1
    2aba:	61 05       	cpc	r22, r1
    2abc:	71 05       	cpc	r23, r1
    2abe:	09 f4       	brne	.+2      	; 0x2ac2 <f_lseek+0x1b0>
    2ac0:	9c c0       	rjmp	.+312    	; 0x2bfa <f_lseek+0x2e8>
    2ac2:	4d 80       	ldd	r4, Y+5	; 0x05
    2ac4:	5e 80       	ldd	r5, Y+6	; 0x06
    2ac6:	59 c0       	rjmp	.+178    	; 0x2b7a <f_lseek+0x268>
				while (ofs > bcs) {						/* Cluster following loop */
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    2ac8:	f2 01       	movw	r30, r4
    2aca:	24 81       	ldd	r18, Z+4	; 0x04
    2acc:	80 81       	ld	r24, Z
    2ace:	91 81       	ldd	r25, Z+1	; 0x01
    2ad0:	21 ff       	sbrs	r18, 1
    2ad2:	0a c0       	rjmp	.+20     	; 0x2ae8 <f_lseek+0x1d6>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    2ad4:	0e 94 4a 0b 	call	0x1694	; 0x1694 <create_chain>
    2ad8:	ab 01       	movw	r20, r22
    2ada:	bc 01       	movw	r22, r24
						if (clst == 0) {				/* When disk gets full, clip file size */
    2adc:	41 15       	cp	r20, r1
    2ade:	51 05       	cpc	r21, r1
    2ae0:	61 05       	cpc	r22, r1
    2ae2:	71 05       	cpc	r23, r1
    2ae4:	29 f4       	brne	.+10     	; 0x2af0 <f_lseek+0x1de>
    2ae6:	52 c0       	rjmp	.+164    	; 0x2b8c <f_lseek+0x27a>
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    2ae8:	0e 94 c0 08 	call	0x1180	; 0x1180 <get_fat>
    2aec:	ab 01       	movw	r20, r22
    2aee:	bc 01       	movw	r22, r24
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    2af0:	4f 3f       	cpi	r20, 0xFF	; 255
    2af2:	ff ef       	ldi	r31, 0xFF	; 255
    2af4:	5f 07       	cpc	r21, r31
    2af6:	ff ef       	ldi	r31, 0xFF	; 255
    2af8:	6f 07       	cpc	r22, r31
    2afa:	ff ef       	ldi	r31, 0xFF	; 255
    2afc:	7f 07       	cpc	r23, r31
    2afe:	51 f4       	brne	.+20     	; 0x2b14 <f_lseek+0x202>
    2b00:	5e 82       	std	Y+6, r5	; 0x06
    2b02:	4d 82       	std	Y+5, r4	; 0x05
    2b04:	81 e0       	ldi	r24, 0x01	; 1
    2b06:	d2 01       	movw	r26, r4
    2b08:	15 96       	adiw	r26, 0x05	; 5
    2b0a:	8c 93       	st	X, r24
    2b0c:	15 97       	sbiw	r26, 0x05	; 5
    2b0e:	99 24       	eor	r9, r9
    2b10:	93 94       	inc	r9
    2b12:	a4 c0       	rjmp	.+328    	; 0x2c5c <f_lseek+0x34a>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    2b14:	42 30       	cpi	r20, 0x02	; 2
    2b16:	51 05       	cpc	r21, r1
    2b18:	61 05       	cpc	r22, r1
    2b1a:	71 05       	cpc	r23, r1
    2b1c:	60 f0       	brcs	.+24     	; 0x2b36 <f_lseek+0x224>
    2b1e:	d2 01       	movw	r26, r4
    2b20:	ed 91       	ld	r30, X+
    2b22:	fc 91       	ld	r31, X
    2b24:	82 89       	ldd	r24, Z+18	; 0x12
    2b26:	93 89       	ldd	r25, Z+19	; 0x13
    2b28:	a4 89       	ldd	r26, Z+20	; 0x14
    2b2a:	b5 89       	ldd	r27, Z+21	; 0x15
    2b2c:	48 17       	cp	r20, r24
    2b2e:	59 07       	cpc	r21, r25
    2b30:	6a 07       	cpc	r22, r26
    2b32:	7b 07       	cpc	r23, r27
    2b34:	40 f0       	brcs	.+16     	; 0x2b46 <f_lseek+0x234>
    2b36:	5e 82       	std	Y+6, r5	; 0x06
    2b38:	4d 82       	std	Y+5, r4	; 0x05
    2b3a:	82 e0       	ldi	r24, 0x02	; 2
    2b3c:	f2 01       	movw	r30, r4
    2b3e:	85 83       	std	Z+5, r24	; 0x05
    2b40:	32 e0       	ldi	r19, 0x02	; 2
    2b42:	93 2e       	mov	r9, r19
    2b44:	8b c0       	rjmp	.+278    	; 0x2c5c <f_lseek+0x34a>
					fp->clust = clst;
    2b46:	d2 01       	movw	r26, r4
    2b48:	52 96       	adiw	r26, 0x12	; 18
    2b4a:	4d 93       	st	X+, r20
    2b4c:	5d 93       	st	X+, r21
    2b4e:	6d 93       	st	X+, r22
    2b50:	7c 93       	st	X, r23
    2b52:	55 97       	sbiw	r26, 0x15	; 21
					fp->fptr += bcs;
    2b54:	16 96       	adiw	r26, 0x06	; 6
    2b56:	8d 91       	ld	r24, X+
    2b58:	9d 91       	ld	r25, X+
    2b5a:	0d 90       	ld	r0, X+
    2b5c:	bc 91       	ld	r27, X
    2b5e:	a0 2d       	mov	r26, r0
    2b60:	8a 0d       	add	r24, r10
    2b62:	9b 1d       	adc	r25, r11
    2b64:	ac 1d       	adc	r26, r12
    2b66:	bd 1d       	adc	r27, r13
    2b68:	f2 01       	movw	r30, r4
    2b6a:	86 83       	std	Z+6, r24	; 0x06
    2b6c:	97 83       	std	Z+7, r25	; 0x07
    2b6e:	a0 87       	std	Z+8, r26	; 0x08
    2b70:	b1 87       	std	Z+9, r27	; 0x09
					ofs -= bcs;
    2b72:	ea 18       	sub	r14, r10
    2b74:	fb 08       	sbc	r15, r11
    2b76:	0c 09       	sbc	r16, r12
    2b78:	1d 09       	sbc	r17, r13
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
    2b7a:	ae 14       	cp	r10, r14
    2b7c:	bf 04       	cpc	r11, r15
    2b7e:	c0 06       	cpc	r12, r16
    2b80:	d1 06       	cpc	r13, r17
    2b82:	08 f4       	brcc	.+2      	; 0x2b86 <f_lseek+0x274>
    2b84:	a1 cf       	rjmp	.-190    	; 0x2ac8 <f_lseek+0x1b6>
    2b86:	5e 82       	std	Y+6, r5	; 0x06
    2b88:	4d 82       	std	Y+5, r4	; 0x05
    2b8a:	04 c0       	rjmp	.+8      	; 0x2b94 <f_lseek+0x282>
    2b8c:	5e 82       	std	Y+6, r5	; 0x06
    2b8e:	4d 82       	std	Y+5, r4	; 0x05
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
						if (clst == 0) {				/* When disk gets full, clip file size */
    2b90:	86 01       	movw	r16, r12
    2b92:	75 01       	movw	r14, r10
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
					fp->clust = clst;
					fp->fptr += bcs;
					ofs -= bcs;
				}
				fp->fptr += ofs;
    2b94:	ed 81       	ldd	r30, Y+5	; 0x05
    2b96:	fe 81       	ldd	r31, Y+6	; 0x06
    2b98:	86 81       	ldd	r24, Z+6	; 0x06
    2b9a:	97 81       	ldd	r25, Z+7	; 0x07
    2b9c:	a0 85       	ldd	r26, Z+8	; 0x08
    2b9e:	b1 85       	ldd	r27, Z+9	; 0x09
    2ba0:	8e 0d       	add	r24, r14
    2ba2:	9f 1d       	adc	r25, r15
    2ba4:	a0 1f       	adc	r26, r16
    2ba6:	b1 1f       	adc	r27, r17
    2ba8:	86 83       	std	Z+6, r24	; 0x06
    2baa:	97 83       	std	Z+7, r25	; 0x07
    2bac:	a0 87       	std	Z+8, r26	; 0x08
    2bae:	b1 87       	std	Z+9, r27	; 0x09
				if (ofs % SS(fp->fs)) {
    2bb0:	d8 01       	movw	r26, r16
    2bb2:	c7 01       	movw	r24, r14
    2bb4:	91 70       	andi	r25, 0x01	; 1
    2bb6:	a0 70       	andi	r26, 0x00	; 0
    2bb8:	b0 70       	andi	r27, 0x00	; 0
    2bba:	00 97       	sbiw	r24, 0x00	; 0
    2bbc:	a1 05       	cpc	r26, r1
    2bbe:	b1 05       	cpc	r27, r1
    2bc0:	e1 f0       	breq	.+56     	; 0x2bfa <f_lseek+0x2e8>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    2bc2:	80 81       	ld	r24, Z
    2bc4:	91 81       	ldd	r25, Z+1	; 0x01
    2bc6:	0e 94 91 08 	call	0x1122	; 0x1122 <clust2sect>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    2bca:	61 15       	cp	r22, r1
    2bcc:	71 05       	cpc	r23, r1
    2bce:	81 05       	cpc	r24, r1
    2bd0:	91 05       	cpc	r25, r1
    2bd2:	39 f4       	brne	.+14     	; 0x2be2 <f_lseek+0x2d0>
    2bd4:	82 e0       	ldi	r24, 0x02	; 2
    2bd6:	ad 81       	ldd	r26, Y+5	; 0x05
    2bd8:	be 81       	ldd	r27, Y+6	; 0x06
    2bda:	15 96       	adiw	r26, 0x05	; 5
    2bdc:	8c 93       	st	X, r24
    2bde:	15 97       	sbiw	r26, 0x05	; 5
    2be0:	af cf       	rjmp	.-162    	; 0x2b40 <f_lseek+0x22e>
					nsect += ofs / SS(fp->fs);
    2be2:	29 e0       	ldi	r18, 0x09	; 9
    2be4:	16 95       	lsr	r17
    2be6:	07 95       	ror	r16
    2be8:	f7 94       	ror	r15
    2bea:	e7 94       	ror	r14
    2bec:	2a 95       	dec	r18
    2bee:	d1 f7       	brne	.-12     	; 0x2be4 <f_lseek+0x2d2>
    2bf0:	e6 0e       	add	r14, r22
    2bf2:	f7 1e       	adc	r15, r23
    2bf4:	08 1f       	adc	r16, r24
    2bf6:	19 1f       	adc	r17, r25
    2bf8:	03 c0       	rjmp	.+6      	; 0x2c00 <f_lseek+0x2ee>
			 && !(fp->flag & FA_WRITE)
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
    2bfa:	ee 24       	eor	r14, r14
    2bfc:	ff 24       	eor	r15, r15
    2bfe:	87 01       	movw	r16, r14
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
					nsect += ofs / SS(fp->fs);
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
    2c00:	ed 81       	ldd	r30, Y+5	; 0x05
    2c02:	fe 81       	ldd	r31, Y+6	; 0x06
    2c04:	26 81       	ldd	r18, Z+6	; 0x06
    2c06:	37 81       	ldd	r19, Z+7	; 0x07
    2c08:	40 85       	ldd	r20, Z+8	; 0x08
    2c0a:	51 85       	ldd	r21, Z+9	; 0x09
    2c0c:	da 01       	movw	r26, r20
    2c0e:	c9 01       	movw	r24, r18
    2c10:	91 70       	andi	r25, 0x01	; 1
    2c12:	a0 70       	andi	r26, 0x00	; 0
    2c14:	b0 70       	andi	r27, 0x00	; 0
    2c16:	00 97       	sbiw	r24, 0x00	; 0
    2c18:	a1 05       	cpc	r26, r1
    2c1a:	b1 05       	cpc	r27, r1
    2c1c:	69 f0       	breq	.+26     	; 0x2c38 <f_lseek+0x326>
    2c1e:	86 89       	ldd	r24, Z+22	; 0x16
    2c20:	97 89       	ldd	r25, Z+23	; 0x17
    2c22:	a0 8d       	ldd	r26, Z+24	; 0x18
    2c24:	b1 8d       	ldd	r27, Z+25	; 0x19
    2c26:	e8 16       	cp	r14, r24
    2c28:	f9 06       	cpc	r15, r25
    2c2a:	0a 07       	cpc	r16, r26
    2c2c:	1b 07       	cpc	r17, r27
    2c2e:	21 f0       	breq	.+8      	; 0x2c38 <f_lseek+0x326>
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1))	/* Fill sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
    2c30:	e6 8a       	std	Z+22, r14	; 0x16
    2c32:	f7 8a       	std	Z+23, r15	; 0x17
    2c34:	00 8f       	std	Z+24, r16	; 0x18
    2c36:	11 8f       	std	Z+25, r17	; 0x19
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
    2c38:	ed 81       	ldd	r30, Y+5	; 0x05
    2c3a:	fe 81       	ldd	r31, Y+6	; 0x06
    2c3c:	82 85       	ldd	r24, Z+10	; 0x0a
    2c3e:	93 85       	ldd	r25, Z+11	; 0x0b
    2c40:	a4 85       	ldd	r26, Z+12	; 0x0c
    2c42:	b5 85       	ldd	r27, Z+13	; 0x0d
    2c44:	82 17       	cp	r24, r18
    2c46:	93 07       	cpc	r25, r19
    2c48:	a4 07       	cpc	r26, r20
    2c4a:	b5 07       	cpc	r27, r21
    2c4c:	38 f4       	brcc	.+14     	; 0x2c5c <f_lseek+0x34a>
			fp->fsize = fp->fptr;
    2c4e:	22 87       	std	Z+10, r18	; 0x0a
    2c50:	33 87       	std	Z+11, r19	; 0x0b
    2c52:	44 87       	std	Z+12, r20	; 0x0c
    2c54:	55 87       	std	Z+13, r21	; 0x0d
			fp->flag |= FA__WRITTEN;
    2c56:	84 81       	ldd	r24, Z+4	; 0x04
    2c58:	80 62       	ori	r24, 0x20	; 32
    2c5a:	84 83       	std	Z+4, r24	; 0x04
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
    2c5c:	89 2d       	mov	r24, r9
    2c5e:	26 96       	adiw	r28, 0x06	; 6
    2c60:	0f b6       	in	r0, 0x3f	; 63
    2c62:	f8 94       	cli
    2c64:	de bf       	out	0x3e, r29	; 62
    2c66:	0f be       	out	0x3f, r0	; 63
    2c68:	cd bf       	out	0x3d, r28	; 61
    2c6a:	cf 91       	pop	r28
    2c6c:	df 91       	pop	r29
    2c6e:	1f 91       	pop	r17
    2c70:	0f 91       	pop	r16
    2c72:	ff 90       	pop	r15
    2c74:	ef 90       	pop	r14
    2c76:	df 90       	pop	r13
    2c78:	cf 90       	pop	r12
    2c7a:	bf 90       	pop	r11
    2c7c:	af 90       	pop	r10
    2c7e:	9f 90       	pop	r9
    2c80:	7f 90       	pop	r7
    2c82:	6f 90       	pop	r6
    2c84:	5f 90       	pop	r5
    2c86:	4f 90       	pop	r4
    2c88:	3f 90       	pop	r3
    2c8a:	2f 90       	pop	r2
    2c8c:	08 95       	ret

00002c8e <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
    2c8e:	0f 93       	push	r16
    2c90:	1f 93       	push	r17
    2c92:	df 93       	push	r29
    2c94:	cf 93       	push	r28
    2c96:	cd b7       	in	r28, 0x3d	; 61
    2c98:	de b7       	in	r29, 0x3e	; 62
    2c9a:	60 97       	sbiw	r28, 0x10	; 16
    2c9c:	0f b6       	in	r0, 0x3f	; 63
    2c9e:	f8 94       	cli
    2ca0:	de bf       	out	0x3e, r29	; 62
    2ca2:	0f be       	out	0x3f, r0	; 63
    2ca4:	cd bf       	out	0x3d, r28	; 61
    2ca6:	8c 01       	movw	r16, r24
    2ca8:	78 8b       	std	Y+16, r23	; 0x10
    2caa:	6f 87       	std	Y+15, r22	; 0x0f
	FRESULT res;
	FATFS* fs;
	DEF_NAMEBUF;


	if (!dp) return FR_INVALID_OBJECT;
    2cac:	00 97       	sbiw	r24, 0x00	; 0
    2cae:	09 f4       	brne	.+2      	; 0x2cb2 <f_opendir+0x24>
    2cb0:	44 c0       	rjmp	.+136    	; 0x2d3a <f_opendir+0xac>

	/* Get logical drive number */
	res = find_volume(&fs, &path, 0);
    2cb2:	ce 01       	movw	r24, r28
    2cb4:	01 96       	adiw	r24, 0x01	; 1
    2cb6:	be 01       	movw	r22, r28
    2cb8:	61 5f       	subi	r22, 0xF1	; 241
    2cba:	7f 4f       	sbci	r23, 0xFF	; 255
    2cbc:	40 e0       	ldi	r20, 0x00	; 0
    2cbe:	0e 94 70 05 	call	0xae0	; 0xae0 <find_volume>
	if (res == FR_OK) {
    2cc2:	88 23       	and	r24, r24
    2cc4:	b1 f5       	brne	.+108    	; 0x2d32 <f_opendir+0xa4>
		dp->fs = fs;
    2cc6:	89 81       	ldd	r24, Y+1	; 0x01
    2cc8:	9a 81       	ldd	r25, Y+2	; 0x02
    2cca:	f8 01       	movw	r30, r16
    2ccc:	91 83       	std	Z+1, r25	; 0x01
    2cce:	80 83       	st	Z, r24
		INIT_BUF(*dp);
    2cd0:	ce 01       	movw	r24, r28
    2cd2:	03 96       	adiw	r24, 0x03	; 3
    2cd4:	95 8b       	std	Z+21, r25	; 0x15
    2cd6:	84 8b       	std	Z+20, r24	; 0x14
		res = follow_path(dp, path);			/* Follow the path to the directory */
    2cd8:	6f 85       	ldd	r22, Y+15	; 0x0f
    2cda:	78 89       	ldd	r23, Y+16	; 0x10
    2cdc:	c8 01       	movw	r24, r16
    2cde:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <follow_path>
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
    2ce2:	88 23       	and	r24, r24
    2ce4:	01 f5       	brne	.+64     	; 0x2d26 <f_opendir+0x98>
			if (dp->dir) {						/* It is not the origin directory itself */
    2ce6:	f8 01       	movw	r30, r16
    2ce8:	62 89       	ldd	r22, Z+18	; 0x12
    2cea:	73 89       	ldd	r23, Z+19	; 0x13
    2cec:	61 15       	cp	r22, r1
    2cee:	71 05       	cpc	r23, r1
    2cf0:	71 f0       	breq	.+28     	; 0x2d0e <f_opendir+0x80>
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
    2cf2:	fb 01       	movw	r30, r22
    2cf4:	83 85       	ldd	r24, Z+11	; 0x0b
    2cf6:	84 ff       	sbrs	r24, 4
    2cf8:	1b c0       	rjmp	.+54     	; 0x2d30 <f_opendir+0xa2>
		}
		FREE_BUF();
	}

	LEAVE_FF(djo.fs, res);
}
    2cfa:	e9 81       	ldd	r30, Y+1	; 0x01
    2cfc:	fa 81       	ldd	r31, Y+2	; 0x02
		res = follow_path(dp, path);			/* Follow the path to the directory */
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
			if (dp->dir) {						/* It is not the origin directory itself */
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
					dp->sclust = ld_clust(fs, dp->dir);
    2cfe:	80 81       	ld	r24, Z
    2d00:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <ld_clust.clone.0>
    2d04:	f8 01       	movw	r30, r16
    2d06:	66 83       	std	Z+6, r22	; 0x06
    2d08:	77 83       	std	Z+7, r23	; 0x07
    2d0a:	80 87       	std	Z+8, r24	; 0x08
    2d0c:	91 87       	std	Z+9, r25	; 0x09
				else							/* The object is a file */
					res = FR_NO_PATH;
			}
			if (res == FR_OK) {
				dp->id = fs->id;
    2d0e:	e9 81       	ldd	r30, Y+1	; 0x01
    2d10:	fa 81       	ldd	r31, Y+2	; 0x02
    2d12:	86 81       	ldd	r24, Z+6	; 0x06
    2d14:	97 81       	ldd	r25, Z+7	; 0x07
    2d16:	f8 01       	movw	r30, r16
    2d18:	93 83       	std	Z+3, r25	; 0x03
    2d1a:	82 83       	std	Z+2, r24	; 0x02
				res = dir_sdi(dp, 0);			/* Rewind directory */
    2d1c:	c8 01       	movw	r24, r16
    2d1e:	60 e0       	ldi	r22, 0x00	; 0
    2d20:	70 e0       	ldi	r23, 0x00	; 0
    2d22:	0e 94 88 09 	call	0x1310	; 0x1310 <dir_sdi>
					}
				}
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    2d26:	84 30       	cpi	r24, 0x04	; 4
    2d28:	19 f0       	breq	.+6      	; 0x2d30 <f_opendir+0xa2>
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
    2d2a:	88 23       	and	r24, r24
    2d2c:	39 f0       	breq	.+14     	; 0x2d3c <f_opendir+0xae>
    2d2e:	01 c0       	rjmp	.+2      	; 0x2d32 <f_opendir+0xa4>
		if (res == FR_OK) {						/* Follow completed */
			if (dp->dir) {						/* It is not the origin directory itself */
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
					dp->sclust = ld_clust(fs, dp->dir);
				else							/* The object is a file */
					res = FR_NO_PATH;
    2d30:	85 e0       	ldi	r24, 0x05	; 5
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
    2d32:	f8 01       	movw	r30, r16
    2d34:	11 82       	std	Z+1, r1	; 0x01
    2d36:	10 82       	st	Z, r1
    2d38:	01 c0       	rjmp	.+2      	; 0x2d3c <f_opendir+0xae>
	FRESULT res;
	FATFS* fs;
	DEF_NAMEBUF;


	if (!dp) return FR_INVALID_OBJECT;
    2d3a:	89 e0       	ldi	r24, 0x09	; 9
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */

	LEAVE_FF(fs, res);
}
    2d3c:	60 96       	adiw	r28, 0x10	; 16
    2d3e:	0f b6       	in	r0, 0x3f	; 63
    2d40:	f8 94       	cli
    2d42:	de bf       	out	0x3e, r29	; 62
    2d44:	0f be       	out	0x3f, r0	; 63
    2d46:	cd bf       	out	0x3d, r28	; 61
    2d48:	cf 91       	pop	r28
    2d4a:	df 91       	pop	r29
    2d4c:	1f 91       	pop	r17
    2d4e:	0f 91       	pop	r16
    2d50:	08 95       	ret

00002d52 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
    2d52:	cf 93       	push	r28
    2d54:	df 93       	push	r29
    2d56:	ec 01       	movw	r28, r24
	FRESULT res;


	res = validate(dp);
    2d58:	0e 94 76 04 	call	0x8ec	; 0x8ec <validate>
	if (res == FR_OK) {
    2d5c:	88 23       	and	r24, r24
    2d5e:	11 f4       	brne	.+4      	; 0x2d64 <f_closedir+0x12>
#if _FS_LOCK
		if (dp->lockid)				/* Decrement sub-directory open counter */
			res = dec_lock(dp->lockid);
		if (res == FR_OK)
#endif
			dp->fs = 0;				/* Invalidate directory object */
    2d60:	19 82       	std	Y+1, r1	; 0x01
    2d62:	18 82       	st	Y, r1
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
}
    2d64:	df 91       	pop	r29
    2d66:	cf 91       	pop	r28
    2d68:	08 95       	ret

00002d6a <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
    2d6a:	df 92       	push	r13
    2d6c:	ef 92       	push	r14
    2d6e:	ff 92       	push	r15
    2d70:	0f 93       	push	r16
    2d72:	1f 93       	push	r17
    2d74:	df 93       	push	r29
    2d76:	cf 93       	push	r28
    2d78:	cd b7       	in	r28, 0x3d	; 61
    2d7a:	de b7       	in	r29, 0x3e	; 62
    2d7c:	2c 97       	sbiw	r28, 0x0c	; 12
    2d7e:	0f b6       	in	r0, 0x3f	; 63
    2d80:	f8 94       	cli
    2d82:	de bf       	out	0x3e, r29	; 62
    2d84:	0f be       	out	0x3f, r0	; 63
    2d86:	cd bf       	out	0x3d, r28	; 61
    2d88:	8c 01       	movw	r16, r24
    2d8a:	7b 01       	movw	r14, r22
	FRESULT res;
	DEF_NAMEBUF;


	res = validate(dp);						/* Check validity of the object */
    2d8c:	0e 94 76 04 	call	0x8ec	; 0x8ec <validate>
    2d90:	d8 2e       	mov	r13, r24
	if (res == FR_OK) {
    2d92:	88 23       	and	r24, r24
    2d94:	71 f5       	brne	.+92     	; 0x2df2 <f_readdir+0x88>
		if (!fno) {
    2d96:	e1 14       	cp	r14, r1
    2d98:	f1 04       	cpc	r15, r1
    2d9a:	31 f4       	brne	.+12     	; 0x2da8 <f_readdir+0x3e>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
    2d9c:	c8 01       	movw	r24, r16
    2d9e:	60 e0       	ldi	r22, 0x00	; 0
    2da0:	70 e0       	ldi	r23, 0x00	; 0
    2da2:	0e 94 88 09 	call	0x1310	; 0x1310 <dir_sdi>
    2da6:	24 c0       	rjmp	.+72     	; 0x2df0 <f_readdir+0x86>
		} else {
			INIT_BUF(*dp);
    2da8:	9e 01       	movw	r18, r28
    2daa:	2f 5f       	subi	r18, 0xFF	; 255
    2dac:	3f 4f       	sbci	r19, 0xFF	; 255
    2dae:	f8 01       	movw	r30, r16
    2db0:	35 8b       	std	Z+21, r19	; 0x15
    2db2:	24 8b       	std	Z+20, r18	; 0x14
			res = dir_read(dp, 0);			/* Read an item */
    2db4:	c8 01       	movw	r24, r16
    2db6:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <dir_read.clone.2>
			if (res == FR_NO_FILE) {		/* Reached end of directory */
    2dba:	84 30       	cpi	r24, 0x04	; 4
    2dbc:	31 f4       	brne	.+12     	; 0x2dca <f_readdir+0x60>
				dp->sect = 0;
    2dbe:	f8 01       	movw	r30, r16
    2dc0:	16 86       	std	Z+14, r1	; 0x0e
    2dc2:	17 86       	std	Z+15, r1	; 0x0f
    2dc4:	10 8a       	std	Z+16, r1	; 0x10
    2dc6:	11 8a       	std	Z+17, r1	; 0x11
    2dc8:	02 c0       	rjmp	.+4      	; 0x2dce <f_readdir+0x64>
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
    2dca:	88 23       	and	r24, r24
    2dcc:	89 f4       	brne	.+34     	; 0x2df0 <f_readdir+0x86>
				get_fileinfo(dp, fno);		/* Get the object information */
    2dce:	c8 01       	movw	r24, r16
    2dd0:	b7 01       	movw	r22, r14
    2dd2:	0e 94 0b 04 	call	0x816	; 0x816 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
    2dd6:	c8 01       	movw	r24, r16
    2dd8:	60 e0       	ldi	r22, 0x00	; 0
    2dda:	70 e0       	ldi	r23, 0x00	; 0
    2ddc:	0e 94 33 0c 	call	0x1866	; 0x1866 <dir_next>
				if (res == FR_NO_FILE) {
    2de0:	84 30       	cpi	r24, 0x04	; 4
    2de2:	31 f4       	brne	.+12     	; 0x2df0 <f_readdir+0x86>
					dp->sect = 0;
    2de4:	f8 01       	movw	r30, r16
    2de6:	16 86       	std	Z+14, r1	; 0x0e
    2de8:	17 86       	std	Z+15, r1	; 0x0f
    2dea:	10 8a       	std	Z+16, r1	; 0x10
    2dec:	11 8a       	std	Z+17, r1	; 0x11
    2dee:	01 c0       	rjmp	.+2      	; 0x2df2 <f_readdir+0x88>
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dp, fno);		/* Get the object information */
				res = dir_next(dp, 0);		/* Increment index for next */
				if (res == FR_NO_FILE) {
    2df0:	d8 2e       	mov	r13, r24
			FREE_BUF();
		}
	}

	LEAVE_FF(dp->fs, res);
}
    2df2:	8d 2d       	mov	r24, r13
    2df4:	2c 96       	adiw	r28, 0x0c	; 12
    2df6:	0f b6       	in	r0, 0x3f	; 63
    2df8:	f8 94       	cli
    2dfa:	de bf       	out	0x3e, r29	; 62
    2dfc:	0f be       	out	0x3f, r0	; 63
    2dfe:	cd bf       	out	0x3d, r28	; 61
    2e00:	cf 91       	pop	r28
    2e02:	df 91       	pop	r29
    2e04:	1f 91       	pop	r17
    2e06:	0f 91       	pop	r16
    2e08:	ff 90       	pop	r15
    2e0a:	ef 90       	pop	r14
    2e0c:	df 90       	pop	r13
    2e0e:	08 95       	ret

00002e10 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
    2e10:	df 92       	push	r13
    2e12:	ef 92       	push	r14
    2e14:	ff 92       	push	r15
    2e16:	0f 93       	push	r16
    2e18:	1f 93       	push	r17
    2e1a:	df 93       	push	r29
    2e1c:	cf 93       	push	r28
    2e1e:	cd b7       	in	r28, 0x3d	; 61
    2e20:	de b7       	in	r29, 0x3e	; 62
    2e22:	a4 97       	sbiw	r28, 0x24	; 36
    2e24:	0f b6       	in	r0, 0x3f	; 63
    2e26:	f8 94       	cli
    2e28:	de bf       	out	0x3e, r29	; 62
    2e2a:	0f be       	out	0x3f, r0	; 63
    2e2c:	cd bf       	out	0x3d, r28	; 61
    2e2e:	9c a3       	std	Y+36, r25	; 0x24
    2e30:	8b a3       	std	Y+35, r24	; 0x23
    2e32:	7b 01       	movw	r14, r22
	DIR dj;
	DEF_NAMEBUF;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 0);
    2e34:	8e 01       	movw	r16, r28
    2e36:	03 5f       	subi	r16, 0xF3	; 243
    2e38:	1f 4f       	sbci	r17, 0xFF	; 255
    2e3a:	c8 01       	movw	r24, r16
    2e3c:	be 01       	movw	r22, r28
    2e3e:	6d 5d       	subi	r22, 0xDD	; 221
    2e40:	7f 4f       	sbci	r23, 0xFF	; 255
    2e42:	40 e0       	ldi	r20, 0x00	; 0
    2e44:	0e 94 70 05 	call	0xae0	; 0xae0 <find_volume>
    2e48:	d8 2e       	mov	r13, r24
	if (res == FR_OK) {
    2e4a:	88 23       	and	r24, r24
    2e4c:	d9 f4       	brne	.+54     	; 0x2e84 <f_stat+0x74>
		INIT_BUF(dj);
    2e4e:	ce 01       	movw	r24, r28
    2e50:	01 96       	adiw	r24, 0x01	; 1
    2e52:	9a a3       	std	Y+34, r25	; 0x22
    2e54:	89 a3       	std	Y+33, r24	; 0x21
		res = follow_path(&dj, path);	/* Follow the file path */
    2e56:	6b a1       	ldd	r22, Y+35	; 0x23
    2e58:	7c a1       	ldd	r23, Y+36	; 0x24
    2e5a:	c8 01       	movw	r24, r16
    2e5c:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <follow_path>
    2e60:	d8 2e       	mov	r13, r24
		if (res == FR_OK) {				/* Follow completed */
    2e62:	88 23       	and	r24, r24
    2e64:	79 f4       	brne	.+30     	; 0x2e84 <f_stat+0x74>
			if (dj.dir) {		/* Found an object */
    2e66:	2f 8d       	ldd	r18, Y+31	; 0x1f
    2e68:	38 a1       	ldd	r19, Y+32	; 0x20
    2e6a:	21 15       	cp	r18, r1
    2e6c:	31 05       	cpc	r19, r1
    2e6e:	41 f0       	breq	.+16     	; 0x2e80 <f_stat+0x70>
				if (fno) get_fileinfo(&dj, fno);
    2e70:	e1 14       	cp	r14, r1
    2e72:	f1 04       	cpc	r15, r1
    2e74:	39 f0       	breq	.+14     	; 0x2e84 <f_stat+0x74>
    2e76:	c8 01       	movw	r24, r16
    2e78:	b7 01       	movw	r22, r14
    2e7a:	0e 94 0b 04 	call	0x816	; 0x816 <get_fileinfo>
    2e7e:	02 c0       	rjmp	.+4      	; 0x2e84 <f_stat+0x74>
			} else {			/* It is root directory */
				res = FR_INVALID_NAME;
    2e80:	56 e0       	ldi	r21, 0x06	; 6
    2e82:	d5 2e       	mov	r13, r21
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
    2e84:	8d 2d       	mov	r24, r13
    2e86:	a4 96       	adiw	r28, 0x24	; 36
    2e88:	0f b6       	in	r0, 0x3f	; 63
    2e8a:	f8 94       	cli
    2e8c:	de bf       	out	0x3e, r29	; 62
    2e8e:	0f be       	out	0x3f, r0	; 63
    2e90:	cd bf       	out	0x3d, r28	; 61
    2e92:	cf 91       	pop	r28
    2e94:	df 91       	pop	r29
    2e96:	1f 91       	pop	r17
    2e98:	0f 91       	pop	r16
    2e9a:	ff 90       	pop	r15
    2e9c:	ef 90       	pop	r14
    2e9e:	df 90       	pop	r13
    2ea0:	08 95       	ret

00002ea2 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
    2ea2:	2f 92       	push	r2
    2ea4:	3f 92       	push	r3
    2ea6:	4f 92       	push	r4
    2ea8:	5f 92       	push	r5
    2eaa:	6f 92       	push	r6
    2eac:	7f 92       	push	r7
    2eae:	8f 92       	push	r8
    2eb0:	9f 92       	push	r9
    2eb2:	af 92       	push	r10
    2eb4:	bf 92       	push	r11
    2eb6:	cf 92       	push	r12
    2eb8:	df 92       	push	r13
    2eba:	ef 92       	push	r14
    2ebc:	ff 92       	push	r15
    2ebe:	0f 93       	push	r16
    2ec0:	1f 93       	push	r17
    2ec2:	df 93       	push	r29
    2ec4:	cf 93       	push	r28
    2ec6:	00 d0       	rcall	.+0      	; 0x2ec8 <f_getfree+0x26>
    2ec8:	00 d0       	rcall	.+0      	; 0x2eca <f_getfree+0x28>
    2eca:	00 d0       	rcall	.+0      	; 0x2ecc <f_getfree+0x2a>
    2ecc:	cd b7       	in	r28, 0x3d	; 61
    2ece:	de b7       	in	r29, 0x3e	; 62
    2ed0:	9a 83       	std	Y+2, r25	; 0x02
    2ed2:	89 83       	std	Y+1, r24	; 0x01
    2ed4:	7c 83       	std	Y+4, r23	; 0x04
    2ed6:	6b 83       	std	Y+3, r22	; 0x03
    2ed8:	8a 01       	movw	r16, r20
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
    2eda:	ca 01       	movw	r24, r20
    2edc:	be 01       	movw	r22, r28
    2ede:	6f 5f       	subi	r22, 0xFF	; 255
    2ee0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ee2:	40 e0       	ldi	r20, 0x00	; 0
    2ee4:	0e 94 70 05 	call	0xae0	; 0xae0 <find_volume>
    2ee8:	38 2e       	mov	r3, r24
	fs = *fatfs;
    2eea:	f8 01       	movw	r30, r16
    2eec:	00 81       	ld	r16, Z
    2eee:	11 81       	ldd	r17, Z+1	; 0x01
	if (res == FR_OK) {
    2ef0:	88 23       	and	r24, r24
    2ef2:	09 f0       	breq	.+2      	; 0x2ef6 <f_getfree+0x54>
    2ef4:	ba c0       	rjmp	.+372    	; 0x306a <f_getfree+0x1c8>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
    2ef6:	f8 01       	movw	r30, r16
    2ef8:	86 85       	ldd	r24, Z+14	; 0x0e
    2efa:	97 85       	ldd	r25, Z+15	; 0x0f
    2efc:	a0 89       	ldd	r26, Z+16	; 0x10
    2efe:	b1 89       	ldd	r27, Z+17	; 0x11
    2f00:	42 88       	ldd	r4, Z+18	; 0x12
    2f02:	53 88       	ldd	r5, Z+19	; 0x13
    2f04:	64 88       	ldd	r6, Z+20	; 0x14
    2f06:	75 88       	ldd	r7, Z+21	; 0x15
    2f08:	a3 01       	movw	r20, r6
    2f0a:	92 01       	movw	r18, r4
    2f0c:	22 50       	subi	r18, 0x02	; 2
    2f0e:	30 40       	sbci	r19, 0x00	; 0
    2f10:	40 40       	sbci	r20, 0x00	; 0
    2f12:	50 40       	sbci	r21, 0x00	; 0
    2f14:	28 17       	cp	r18, r24
    2f16:	39 07       	cpc	r19, r25
    2f18:	4a 07       	cpc	r20, r26
    2f1a:	5b 07       	cpc	r21, r27
    2f1c:	38 f0       	brcs	.+14     	; 0x2f2c <f_getfree+0x8a>
			*nclst = fs->free_clust;
    2f1e:	eb 81       	ldd	r30, Y+3	; 0x03
    2f20:	fc 81       	ldd	r31, Y+4	; 0x04
    2f22:	80 83       	st	Z, r24
    2f24:	91 83       	std	Z+1, r25	; 0x01
    2f26:	a2 83       	std	Z+2, r26	; 0x02
    2f28:	b3 83       	std	Z+3, r27	; 0x03
    2f2a:	9f c0       	rjmp	.+318    	; 0x306a <f_getfree+0x1c8>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
    2f2c:	f8 01       	movw	r30, r16
    2f2e:	20 80       	ld	r2, Z
			n = 0;
			if (fat == FS_FAT12) {
    2f30:	f2 2d       	mov	r31, r2
    2f32:	f1 30       	cpi	r31, 0x01	; 1
    2f34:	b1 f5       	brne	.+108    	; 0x2fa2 <f_getfree+0x100>
    2f36:	72 e0       	ldi	r23, 0x02	; 2
    2f38:	87 2e       	mov	r8, r23
    2f3a:	91 2c       	mov	r9, r1
    2f3c:	a1 2c       	mov	r10, r1
    2f3e:	b1 2c       	mov	r11, r1
    2f40:	cc 24       	eor	r12, r12
    2f42:	dd 24       	eor	r13, r13
    2f44:	76 01       	movw	r14, r12
				clst = 2;
				do {
					stat = get_fat(fs, clst);
    2f46:	c8 01       	movw	r24, r16
    2f48:	b5 01       	movw	r22, r10
    2f4a:	a4 01       	movw	r20, r8
    2f4c:	0e 94 c0 08 	call	0x1180	; 0x1180 <get_fat>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
    2f50:	6f 3f       	cpi	r22, 0xFF	; 255
    2f52:	2f ef       	ldi	r18, 0xFF	; 255
    2f54:	72 07       	cpc	r23, r18
    2f56:	2f ef       	ldi	r18, 0xFF	; 255
    2f58:	82 07       	cpc	r24, r18
    2f5a:	2f ef       	ldi	r18, 0xFF	; 255
    2f5c:	92 07       	cpc	r25, r18
    2f5e:	09 f4       	brne	.+2      	; 0x2f62 <f_getfree+0xc0>
    2f60:	6f c0       	rjmp	.+222    	; 0x3040 <f_getfree+0x19e>
					if (stat == 1) { res = FR_INT_ERR; break; }
    2f62:	61 30       	cpi	r22, 0x01	; 1
    2f64:	71 05       	cpc	r23, r1
    2f66:	81 05       	cpc	r24, r1
    2f68:	91 05       	cpc	r25, r1
    2f6a:	09 f4       	brne	.+2      	; 0x2f6e <f_getfree+0xcc>
    2f6c:	6c c0       	rjmp	.+216    	; 0x3046 <f_getfree+0x1a4>
					if (stat == 0) n++;
    2f6e:	61 15       	cp	r22, r1
    2f70:	71 05       	cpc	r23, r1
    2f72:	81 05       	cpc	r24, r1
    2f74:	91 05       	cpc	r25, r1
    2f76:	29 f4       	brne	.+10     	; 0x2f82 <f_getfree+0xe0>
    2f78:	08 94       	sec
    2f7a:	c1 1c       	adc	r12, r1
    2f7c:	d1 1c       	adc	r13, r1
    2f7e:	e1 1c       	adc	r14, r1
    2f80:	f1 1c       	adc	r15, r1
				} while (++clst < fs->n_fatent);
    2f82:	08 94       	sec
    2f84:	81 1c       	adc	r8, r1
    2f86:	91 1c       	adc	r9, r1
    2f88:	a1 1c       	adc	r10, r1
    2f8a:	b1 1c       	adc	r11, r1
    2f8c:	f8 01       	movw	r30, r16
    2f8e:	82 89       	ldd	r24, Z+18	; 0x12
    2f90:	93 89       	ldd	r25, Z+19	; 0x13
    2f92:	a4 89       	ldd	r26, Z+20	; 0x14
    2f94:	b5 89       	ldd	r27, Z+21	; 0x15
    2f96:	88 16       	cp	r8, r24
    2f98:	99 06       	cpc	r9, r25
    2f9a:	aa 06       	cpc	r10, r26
    2f9c:	bb 06       	cpc	r11, r27
    2f9e:	98 f2       	brcs	.-90     	; 0x2f46 <f_getfree+0xa4>
    2fa0:	56 c0       	rjmp	.+172    	; 0x304e <f_getfree+0x1ac>
			} else {
				clst = fs->n_fatent;
				sect = fs->fatbase;
    2fa2:	f8 01       	movw	r30, r16
    2fa4:	86 8c       	ldd	r8, Z+30	; 0x1e
    2fa6:	97 8c       	ldd	r9, Z+31	; 0x1f
    2fa8:	a0 a0       	ldd	r10, Z+32	; 0x20
    2faa:	b1 a0       	ldd	r11, Z+33	; 0x21
				i = 0; p = 0;
    2fac:	e0 e0       	ldi	r30, 0x00	; 0
    2fae:	f0 e0       	ldi	r31, 0x00	; 0
    2fb0:	20 e0       	ldi	r18, 0x00	; 0
    2fb2:	30 e0       	ldi	r19, 0x00	; 0
		if (fs->free_clust <= fs->n_fatent - 2) {
			*nclst = fs->free_clust;
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
			n = 0;
    2fb4:	cc 24       	eor	r12, r12
    2fb6:	dd 24       	eor	r13, r13
    2fb8:	76 01       	movw	r14, r12
				i = 0; p = 0;
				do {
					if (!i) {
						res = move_window(fs, sect++);
						if (res != FR_OK) break;
						p = fs->win;
    2fba:	c8 01       	movw	r24, r16
    2fbc:	8e 96       	adiw	r24, 0x2e	; 46
    2fbe:	9e 83       	std	Y+6, r25	; 0x06
    2fc0:	8d 83       	std	Y+5, r24	; 0x05
			} else {
				clst = fs->n_fatent;
				sect = fs->fatbase;
				i = 0; p = 0;
				do {
					if (!i) {
    2fc2:	21 15       	cp	r18, r1
    2fc4:	31 05       	cpc	r19, r1
    2fc6:	81 f4       	brne	.+32     	; 0x2fe8 <f_getfree+0x146>
						res = move_window(fs, sect++);
    2fc8:	c8 01       	movw	r24, r16
    2fca:	b5 01       	movw	r22, r10
    2fcc:	a4 01       	movw	r20, r8
    2fce:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <move_window>
						if (res != FR_OK) break;
    2fd2:	88 23       	and	r24, r24
    2fd4:	d9 f5       	brne	.+118    	; 0x304c <f_getfree+0x1aa>
				clst = fs->n_fatent;
				sect = fs->fatbase;
				i = 0; p = 0;
				do {
					if (!i) {
						res = move_window(fs, sect++);
    2fd6:	08 94       	sec
    2fd8:	81 1c       	adc	r8, r1
    2fda:	91 1c       	adc	r9, r1
    2fdc:	a1 1c       	adc	r10, r1
    2fde:	b1 1c       	adc	r11, r1
						if (res != FR_OK) break;
						p = fs->win;
    2fe0:	ed 81       	ldd	r30, Y+5	; 0x05
    2fe2:	fe 81       	ldd	r31, Y+6	; 0x06
						i = SS(fs);
    2fe4:	20 e0       	ldi	r18, 0x00	; 0
    2fe6:	32 e0       	ldi	r19, 0x02	; 2
					}
					if (fat == FS_FAT16) {
    2fe8:	92 2d       	mov	r25, r2
    2fea:	92 30       	cpi	r25, 0x02	; 2
    2fec:	69 f4       	brne	.+26     	; 0x3008 <f_getfree+0x166>
						if (LD_WORD(p) == 0) n++;
    2fee:	80 81       	ld	r24, Z
    2ff0:	91 81       	ldd	r25, Z+1	; 0x01
    2ff2:	00 97       	sbiw	r24, 0x00	; 0
    2ff4:	29 f4       	brne	.+10     	; 0x3000 <f_getfree+0x15e>
    2ff6:	08 94       	sec
    2ff8:	c1 1c       	adc	r12, r1
    2ffa:	d1 1c       	adc	r13, r1
    2ffc:	e1 1c       	adc	r14, r1
    2ffe:	f1 1c       	adc	r15, r1
						p += 2; i -= 2;
    3000:	32 96       	adiw	r30, 0x02	; 2
    3002:	22 50       	subi	r18, 0x02	; 2
    3004:	30 40       	sbci	r19, 0x00	; 0
    3006:	11 c0       	rjmp	.+34     	; 0x302a <f_getfree+0x188>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
    3008:	80 81       	ld	r24, Z
    300a:	91 81       	ldd	r25, Z+1	; 0x01
    300c:	a2 81       	ldd	r26, Z+2	; 0x02
    300e:	b3 81       	ldd	r27, Z+3	; 0x03
    3010:	bf 70       	andi	r27, 0x0F	; 15
    3012:	00 97       	sbiw	r24, 0x00	; 0
    3014:	a1 05       	cpc	r26, r1
    3016:	b1 05       	cpc	r27, r1
    3018:	29 f4       	brne	.+10     	; 0x3024 <f_getfree+0x182>
    301a:	08 94       	sec
    301c:	c1 1c       	adc	r12, r1
    301e:	d1 1c       	adc	r13, r1
    3020:	e1 1c       	adc	r14, r1
    3022:	f1 1c       	adc	r15, r1
						p += 4; i -= 4;
    3024:	34 96       	adiw	r30, 0x04	; 4
    3026:	24 50       	subi	r18, 0x04	; 4
    3028:	30 40       	sbci	r19, 0x00	; 0
					}
				} while (--clst);
    302a:	08 94       	sec
    302c:	41 08       	sbc	r4, r1
    302e:	51 08       	sbc	r5, r1
    3030:	61 08       	sbc	r6, r1
    3032:	71 08       	sbc	r7, r1
    3034:	41 14       	cp	r4, r1
    3036:	51 04       	cpc	r5, r1
    3038:	61 04       	cpc	r6, r1
    303a:	71 04       	cpc	r7, r1
    303c:	11 f6       	brne	.-124    	; 0x2fc2 <f_getfree+0x120>
    303e:	07 c0       	rjmp	.+14     	; 0x304e <f_getfree+0x1ac>
			n = 0;
			if (fat == FS_FAT12) {
				clst = 2;
				do {
					stat = get_fat(fs, clst);
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
    3040:	33 24       	eor	r3, r3
    3042:	33 94       	inc	r3
    3044:	04 c0       	rjmp	.+8      	; 0x304e <f_getfree+0x1ac>
					if (stat == 1) { res = FR_INT_ERR; break; }
    3046:	62 e0       	ldi	r22, 0x02	; 2
    3048:	36 2e       	mov	r3, r22
    304a:	01 c0       	rjmp	.+2      	; 0x304e <f_getfree+0x1ac>
				clst = fs->n_fatent;
				sect = fs->fatbase;
				i = 0; p = 0;
				do {
					if (!i) {
						res = move_window(fs, sect++);
    304c:	38 2e       	mov	r3, r24
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
						p += 4; i -= 4;
					}
				} while (--clst);
			}
			fs->free_clust = n;
    304e:	f8 01       	movw	r30, r16
    3050:	c6 86       	std	Z+14, r12	; 0x0e
    3052:	d7 86       	std	Z+15, r13	; 0x0f
    3054:	e0 8a       	std	Z+16, r14	; 0x10
    3056:	f1 8a       	std	Z+17, r15	; 0x11
			fs->fsi_flag |= 1;
    3058:	85 81       	ldd	r24, Z+5	; 0x05
    305a:	81 60       	ori	r24, 0x01	; 1
    305c:	85 83       	std	Z+5, r24	; 0x05
			*nclst = n;
    305e:	eb 81       	ldd	r30, Y+3	; 0x03
    3060:	fc 81       	ldd	r31, Y+4	; 0x04
    3062:	c0 82       	st	Z, r12
    3064:	d1 82       	std	Z+1, r13	; 0x01
    3066:	e2 82       	std	Z+2, r14	; 0x02
    3068:	f3 82       	std	Z+3, r15	; 0x03
		}
	}
	LEAVE_FF(fs, res);
}
    306a:	83 2d       	mov	r24, r3
    306c:	26 96       	adiw	r28, 0x06	; 6
    306e:	0f b6       	in	r0, 0x3f	; 63
    3070:	f8 94       	cli
    3072:	de bf       	out	0x3e, r29	; 62
    3074:	0f be       	out	0x3f, r0	; 63
    3076:	cd bf       	out	0x3d, r28	; 61
    3078:	cf 91       	pop	r28
    307a:	df 91       	pop	r29
    307c:	1f 91       	pop	r17
    307e:	0f 91       	pop	r16
    3080:	ff 90       	pop	r15
    3082:	ef 90       	pop	r14
    3084:	df 90       	pop	r13
    3086:	cf 90       	pop	r12
    3088:	bf 90       	pop	r11
    308a:	af 90       	pop	r10
    308c:	9f 90       	pop	r9
    308e:	8f 90       	pop	r8
    3090:	7f 90       	pop	r7
    3092:	6f 90       	pop	r6
    3094:	5f 90       	pop	r5
    3096:	4f 90       	pop	r4
    3098:	3f 90       	pop	r3
    309a:	2f 90       	pop	r2
    309c:	08 95       	ret

0000309e <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
	FIL* fp		/* Pointer to the file object */
)
{
    309e:	cf 92       	push	r12
    30a0:	df 92       	push	r13
    30a2:	ef 92       	push	r14
    30a4:	ff 92       	push	r15
    30a6:	0f 93       	push	r16
    30a8:	1f 93       	push	r17
    30aa:	cf 93       	push	r28
    30ac:	df 93       	push	r29
    30ae:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD ncl;


	res = validate(fp);						/* Check validity of the object */
    30b0:	0e 94 76 04 	call	0x8ec	; 0x8ec <validate>
    30b4:	18 2f       	mov	r17, r24
	if (res == FR_OK) {
    30b6:	88 23       	and	r24, r24
    30b8:	09 f0       	breq	.+2      	; 0x30bc <f_truncate+0x1e>
    30ba:	50 c0       	rjmp	.+160    	; 0x315c <f_truncate+0xbe>
		if (fp->err) {						/* Check error */
    30bc:	1d 81       	ldd	r17, Y+5	; 0x05
    30be:	11 23       	and	r17, r17
    30c0:	09 f0       	breq	.+2      	; 0x30c4 <f_truncate+0x26>
    30c2:	4c c0       	rjmp	.+152    	; 0x315c <f_truncate+0xbe>
			res = (FRESULT)fp->err;
		} else {
			if (!(fp->flag & FA_WRITE))		/* Check access mode */
    30c4:	6c 81       	ldd	r22, Y+4	; 0x04
    30c6:	61 fd       	sbrc	r22, 1
    30c8:	53 c0       	rjmp	.+166    	; 0x3170 <f_truncate+0xd2>
				res = FR_DENIED;
    30ca:	17 e0       	ldi	r17, 0x07	; 7
    30cc:	47 c0       	rjmp	.+142    	; 0x315c <f_truncate+0xbe>
		}
	}
	if (res == FR_OK) {
		if (fp->fsize > fp->fptr) {
			fp->fsize = fp->fptr;	/* Set file size to current R/W point */
    30ce:	2a 87       	std	Y+10, r18	; 0x0a
    30d0:	3b 87       	std	Y+11, r19	; 0x0b
    30d2:	4c 87       	std	Y+12, r20	; 0x0c
    30d4:	5d 87       	std	Y+13, r21	; 0x0d
			fp->flag |= FA__WRITTEN;
    30d6:	60 62       	ori	r22, 0x20	; 32
    30d8:	6c 83       	std	Y+4, r22	; 0x04
    30da:	88 81       	ld	r24, Y
    30dc:	99 81       	ldd	r25, Y+1	; 0x01
			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
    30de:	21 15       	cp	r18, r1
    30e0:	31 05       	cpc	r19, r1
    30e2:	41 05       	cpc	r20, r1
    30e4:	51 05       	cpc	r21, r1
    30e6:	61 f4       	brne	.+24     	; 0x3100 <f_truncate+0x62>
				res = remove_chain(fp->fs, fp->sclust);
    30e8:	4e 85       	ldd	r20, Y+14	; 0x0e
    30ea:	5f 85       	ldd	r21, Y+15	; 0x0f
    30ec:	68 89       	ldd	r22, Y+16	; 0x10
    30ee:	79 89       	ldd	r23, Y+17	; 0x11
    30f0:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <remove_chain>
    30f4:	18 2f       	mov	r17, r24
				fp->sclust = 0;
    30f6:	1e 86       	std	Y+14, r1	; 0x0e
    30f8:	1f 86       	std	Y+15, r1	; 0x0f
    30fa:	18 8a       	std	Y+16, r1	; 0x10
    30fc:	19 8a       	std	Y+17, r1	; 0x11
    30fe:	2c c0       	rjmp	.+88     	; 0x3158 <f_truncate+0xba>
			} else {				/* When truncate a part of the file, remove remaining clusters */
				ncl = get_fat(fp->fs, fp->clust);
    3100:	4a 89       	ldd	r20, Y+18	; 0x12
    3102:	5b 89       	ldd	r21, Y+19	; 0x13
    3104:	6c 89       	ldd	r22, Y+20	; 0x14
    3106:	7d 89       	ldd	r23, Y+21	; 0x15
    3108:	0e 94 c0 08 	call	0x1180	; 0x1180 <get_fat>
    310c:	6b 01       	movw	r12, r22
    310e:	7c 01       	movw	r14, r24
				res = FR_OK;
				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
    3110:	8f ef       	ldi	r24, 0xFF	; 255
    3112:	c8 16       	cp	r12, r24
    3114:	8f ef       	ldi	r24, 0xFF	; 255
    3116:	d8 06       	cpc	r13, r24
    3118:	8f ef       	ldi	r24, 0xFF	; 255
    311a:	e8 06       	cpc	r14, r24
    311c:	8f ef       	ldi	r24, 0xFF	; 255
    311e:	f8 06       	cpc	r15, r24
    3120:	b1 f1       	breq	.+108    	; 0x318e <f_truncate+0xf0>
				if (ncl == 1) res = FR_INT_ERR;
    3122:	e1 e0       	ldi	r30, 0x01	; 1
    3124:	ce 16       	cp	r12, r30
    3126:	d1 04       	cpc	r13, r1
    3128:	e1 04       	cpc	r14, r1
    312a:	f1 04       	cpc	r15, r1
    312c:	a1 f5       	brne	.+104    	; 0x3196 <f_truncate+0xf8>
    312e:	31 c0       	rjmp	.+98     	; 0x3192 <f_truncate+0xf4>
				if (res == FR_OK && ncl < fp->fs->n_fatent) {
					res = put_fat(fp->fs, fp->clust, 0x0FFFFFFF);
    3130:	4a 89       	ldd	r20, Y+18	; 0x12
    3132:	5b 89       	ldd	r21, Y+19	; 0x13
    3134:	6c 89       	ldd	r22, Y+20	; 0x14
    3136:	7d 89       	ldd	r23, Y+21	; 0x15
    3138:	0f ef       	ldi	r16, 0xFF	; 255
    313a:	1f ef       	ldi	r17, 0xFF	; 255
    313c:	2f ef       	ldi	r18, 0xFF	; 255
    313e:	3f e0       	ldi	r19, 0x0F	; 15
    3140:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <put_fat>
    3144:	18 2f       	mov	r17, r24
					if (res == FR_OK) res = remove_chain(fp->fs, ncl);
    3146:	88 23       	and	r24, r24
    3148:	41 f4       	brne	.+16     	; 0x315a <f_truncate+0xbc>
    314a:	88 81       	ld	r24, Y
    314c:	99 81       	ldd	r25, Y+1	; 0x01
    314e:	b7 01       	movw	r22, r14
    3150:	a6 01       	movw	r20, r12
    3152:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <remove_chain>
    3156:	18 2f       	mov	r17, r24
				else
					fp->flag &= ~FA__DIRTY;
			}
#endif
		}
		if (res != FR_OK) fp->err = (FRESULT)res;
    3158:	11 11       	cpse	r17, r1
    315a:	1d 83       	std	Y+5, r17	; 0x05
	}

	LEAVE_FF(fp->fs, res);
}
    315c:	81 2f       	mov	r24, r17
    315e:	df 91       	pop	r29
    3160:	cf 91       	pop	r28
    3162:	1f 91       	pop	r17
    3164:	0f 91       	pop	r16
    3166:	ff 90       	pop	r15
    3168:	ef 90       	pop	r14
    316a:	df 90       	pop	r13
    316c:	cf 90       	pop	r12
    316e:	08 95       	ret
			if (!(fp->flag & FA_WRITE))		/* Check access mode */
				res = FR_DENIED;
		}
	}
	if (res == FR_OK) {
		if (fp->fsize > fp->fptr) {
    3170:	2e 81       	ldd	r18, Y+6	; 0x06
    3172:	3f 81       	ldd	r19, Y+7	; 0x07
    3174:	48 85       	ldd	r20, Y+8	; 0x08
    3176:	59 85       	ldd	r21, Y+9	; 0x09
    3178:	8a 85       	ldd	r24, Y+10	; 0x0a
    317a:	9b 85       	ldd	r25, Y+11	; 0x0b
    317c:	ac 85       	ldd	r26, Y+12	; 0x0c
    317e:	bd 85       	ldd	r27, Y+13	; 0x0d
    3180:	28 17       	cp	r18, r24
    3182:	39 07       	cpc	r19, r25
    3184:	4a 07       	cpc	r20, r26
    3186:	5b 07       	cpc	r21, r27
    3188:	08 f4       	brcc	.+2      	; 0x318c <f_truncate+0xee>
    318a:	a1 cf       	rjmp	.-190    	; 0x30ce <f_truncate+0x30>
    318c:	e7 cf       	rjmp	.-50     	; 0x315c <f_truncate+0xbe>
				res = remove_chain(fp->fs, fp->sclust);
				fp->sclust = 0;
			} else {				/* When truncate a part of the file, remove remaining clusters */
				ncl = get_fat(fp->fs, fp->clust);
				res = FR_OK;
				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
    318e:	11 e0       	ldi	r17, 0x01	; 1
    3190:	e4 cf       	rjmp	.-56     	; 0x315a <f_truncate+0xbc>
				if (ncl == 1) res = FR_INT_ERR;
    3192:	12 e0       	ldi	r17, 0x02	; 2
    3194:	e2 cf       	rjmp	.-60     	; 0x315a <f_truncate+0xbc>
				if (res == FR_OK && ncl < fp->fs->n_fatent) {
    3196:	88 81       	ld	r24, Y
    3198:	99 81       	ldd	r25, Y+1	; 0x01
    319a:	fc 01       	movw	r30, r24
    319c:	22 89       	ldd	r18, Z+18	; 0x12
    319e:	33 89       	ldd	r19, Z+19	; 0x13
    31a0:	44 89       	ldd	r20, Z+20	; 0x14
    31a2:	55 89       	ldd	r21, Z+21	; 0x15
    31a4:	c2 16       	cp	r12, r18
    31a6:	d3 06       	cpc	r13, r19
    31a8:	e4 06       	cpc	r14, r20
    31aa:	f5 06       	cpc	r15, r21
    31ac:	b8 f6       	brcc	.-82     	; 0x315c <f_truncate+0xbe>
    31ae:	c0 cf       	rjmp	.-128    	; 0x3130 <f_truncate+0x92>

000031b0 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
    31b0:	cf 92       	push	r12
    31b2:	df 92       	push	r13
    31b4:	ef 92       	push	r14
    31b6:	ff 92       	push	r15
    31b8:	0f 93       	push	r16
    31ba:	1f 93       	push	r17
    31bc:	df 93       	push	r29
    31be:	cf 93       	push	r28
    31c0:	cd b7       	in	r28, 0x3d	; 61
    31c2:	de b7       	in	r29, 0x3e	; 62
    31c4:	eb 97       	sbiw	r28, 0x3b	; 59
    31c6:	0f b6       	in	r0, 0x3f	; 63
    31c8:	f8 94       	cli
    31ca:	de bf       	out	0x3e, r29	; 62
    31cc:	0f be       	out	0x3f, r0	; 63
    31ce:	cd bf       	out	0x3d, r28	; 61
    31d0:	9a af       	std	Y+58, r25	; 0x3a
    31d2:	89 af       	std	Y+57, r24	; 0x39
	DWORD dclst;
	DEF_NAMEBUF;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 1);
    31d4:	8e 01       	movw	r16, r28
    31d6:	03 5f       	subi	r16, 0xF3	; 243
    31d8:	1f 4f       	sbci	r17, 0xFF	; 255
    31da:	c8 01       	movw	r24, r16
    31dc:	be 01       	movw	r22, r28
    31de:	67 5c       	subi	r22, 0xC7	; 199
    31e0:	7f 4f       	sbci	r23, 0xFF	; 255
    31e2:	41 e0       	ldi	r20, 0x01	; 1
    31e4:	0e 94 70 05 	call	0xae0	; 0xae0 <find_volume>
    31e8:	28 2f       	mov	r18, r24
	if (res == FR_OK) {
    31ea:	88 23       	and	r24, r24
    31ec:	09 f0       	breq	.+2      	; 0x31f0 <f_unlink+0x40>
    31ee:	6a c0       	rjmp	.+212    	; 0x32c4 <f_unlink+0x114>
		INIT_BUF(dj);
    31f0:	ce 01       	movw	r24, r28
    31f2:	01 96       	adiw	r24, 0x01	; 1
    31f4:	9a a3       	std	Y+34, r25	; 0x22
    31f6:	89 a3       	std	Y+33, r24	; 0x21
		res = follow_path(&dj, path);		/* Follow the file path */
    31f8:	69 ad       	ldd	r22, Y+57	; 0x39
    31fa:	7a ad       	ldd	r23, Y+58	; 0x3a
    31fc:	c8 01       	movw	r24, r16
    31fe:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <follow_path>
    3202:	28 2f       	mov	r18, r24
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
#if _FS_LOCK
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open file */
#endif
		if (res == FR_OK) {					/* The object is accessible */
    3204:	88 23       	and	r24, r24
    3206:	09 f0       	breq	.+2      	; 0x320a <f_unlink+0x5a>
    3208:	5d c0       	rjmp	.+186    	; 0x32c4 <f_unlink+0x114>
			dir = dj.dir;
    320a:	cf 8c       	ldd	r12, Y+31	; 0x1f
    320c:	d8 a0       	ldd	r13, Y+32	; 0x20
			if (!dir) {
    320e:	c1 14       	cp	r12, r1
    3210:	d1 04       	cpc	r13, r1
    3212:	29 f0       	breq	.+10     	; 0x321e <f_unlink+0x6e>
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
			} else {
				if (dir[DIR_Attr] & AM_RDO)
    3214:	f6 01       	movw	r30, r12
    3216:	83 85       	ldd	r24, Z+11	; 0x0b
    3218:	80 fd       	sbrc	r24, 0
    321a:	03 c0       	rjmp	.+6      	; 0x3222 <f_unlink+0x72>
    321c:	03 c0       	rjmp	.+6      	; 0x3224 <f_unlink+0x74>
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open file */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			dir = dj.dir;
			if (!dir) {
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
    321e:	26 e0       	ldi	r18, 0x06	; 6
    3220:	01 c0       	rjmp	.+2      	; 0x3224 <f_unlink+0x74>
			} else {
				if (dir[DIR_Attr] & AM_RDO)
					res = FR_DENIED;		/* Cannot remove R/O object */
    3222:	27 e0       	ldi	r18, 0x07	; 7
		}
		FREE_BUF();
	}

	LEAVE_FF(djo.fs, res);
}
    3224:	ed 85       	ldd	r30, Y+13	; 0x0d
    3226:	fe 85       	ldd	r31, Y+14	; 0x0e
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
			} else {
				if (dir[DIR_Attr] & AM_RDO)
					res = FR_DENIED;		/* Cannot remove R/O object */
			}
			dclst = ld_clust(dj.fs, dir);
    3228:	80 81       	ld	r24, Z
    322a:	b6 01       	movw	r22, r12
    322c:	2b af       	std	Y+59, r18	; 0x3b
    322e:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <ld_clust.clone.0>
    3232:	7b 01       	movw	r14, r22
    3234:	8c 01       	movw	r16, r24
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
    3236:	2b ad       	ldd	r18, Y+59	; 0x3b
    3238:	22 23       	and	r18, r18
    323a:	09 f0       	breq	.+2      	; 0x323e <f_unlink+0x8e>
    323c:	43 c0       	rjmp	.+134    	; 0x32c4 <f_unlink+0x114>
    323e:	f6 01       	movw	r30, r12
    3240:	83 85       	ldd	r24, Z+11	; 0x0b
    3242:	84 ff       	sbrs	r24, 4
    3244:	4f c0       	rjmp	.+158    	; 0x32e4 <f_unlink+0x134>
				if (dclst < 2) {
    3246:	f2 e0       	ldi	r31, 0x02	; 2
    3248:	ef 16       	cp	r14, r31
    324a:	f1 04       	cpc	r15, r1
    324c:	01 05       	cpc	r16, r1
    324e:	11 05       	cpc	r17, r1
    3250:	10 f1       	brcs	.+68     	; 0x3296 <f_unlink+0xe6>
					res = FR_INT_ERR;
				} else {
					mem_cpy(&sdj, &dj, sizeof (DIR));	/* Check if the sub-directory is empty or not */
    3252:	e3 e2       	ldi	r30, 0x23	; 35
    3254:	ce 2e       	mov	r12, r30
    3256:	d1 2c       	mov	r13, r1
    3258:	cc 0e       	add	r12, r28
    325a:	dd 1e       	adc	r13, r29
    325c:	c6 01       	movw	r24, r12
    325e:	be 01       	movw	r22, r28
    3260:	63 5f       	subi	r22, 0xF3	; 243
    3262:	7f 4f       	sbci	r23, 0xFF	; 255
    3264:	46 e1       	ldi	r20, 0x16	; 22
    3266:	50 e0       	ldi	r21, 0x00	; 0
    3268:	0e 94 da 03 	call	0x7b4	; 0x7b4 <mem_cpy>
					sdj.sclust = dclst;
    326c:	e9 a6       	std	Y+41, r14	; 0x29
    326e:	fa a6       	std	Y+42, r15	; 0x2a
    3270:	0b a7       	std	Y+43, r16	; 0x2b
    3272:	1c a7       	std	Y+44, r17	; 0x2c
					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
    3274:	c6 01       	movw	r24, r12
    3276:	62 e0       	ldi	r22, 0x02	; 2
    3278:	70 e0       	ldi	r23, 0x00	; 0
    327a:	0e 94 88 09 	call	0x1310	; 0x1310 <dir_sdi>
    327e:	28 2f       	mov	r18, r24
					if (res == FR_OK) {
    3280:	88 23       	and	r24, r24
    3282:	01 f5       	brne	.+64     	; 0x32c4 <f_unlink+0x114>
						res = dir_read(&sdj, 0);	/* Read an item */
    3284:	c6 01       	movw	r24, r12
    3286:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <dir_read.clone.2>
    328a:	28 2f       	mov	r18, r24
						if (res == FR_OK		/* Not empty directory */
    328c:	88 23       	and	r24, r24
    328e:	29 f0       	breq	.+10     	; 0x329a <f_unlink+0xea>
#if _FS_RPATH
						|| dclst == dj.fs->cdir	/* Current directory */
#endif
						) res = FR_DENIED;
						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
    3290:	84 30       	cpi	r24, 0x04	; 4
    3292:	41 f1       	breq	.+80     	; 0x32e4 <f_unlink+0x134>
    3294:	17 c0       	rjmp	.+46     	; 0x32c4 <f_unlink+0x114>
					res = FR_DENIED;		/* Cannot remove R/O object */
			}
			dclst = ld_clust(dj.fs, dir);
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
				if (dclst < 2) {
					res = FR_INT_ERR;
    3296:	22 e0       	ldi	r18, 0x02	; 2
    3298:	15 c0       	rjmp	.+42     	; 0x32c4 <f_unlink+0x114>
						res = dir_read(&sdj, 0);	/* Read an item */
						if (res == FR_OK		/* Not empty directory */
#if _FS_RPATH
						|| dclst == dj.fs->cdir	/* Current directory */
#endif
						) res = FR_DENIED;
    329a:	27 e0       	ldi	r18, 0x07	; 7
    329c:	13 c0       	rjmp	.+38     	; 0x32c4 <f_unlink+0x114>
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);		/* Remove the directory entry */
				if (res == FR_OK) {
					if (dclst)				/* Remove the cluster chain if exist */
    329e:	e1 14       	cp	r14, r1
    32a0:	f1 04       	cpc	r15, r1
    32a2:	01 05       	cpc	r16, r1
    32a4:	11 05       	cpc	r17, r1
    32a6:	49 f0       	breq	.+18     	; 0x32ba <f_unlink+0x10a>
						res = remove_chain(dj.fs, dclst);
    32a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    32aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    32ac:	b8 01       	movw	r22, r16
    32ae:	a7 01       	movw	r20, r14
    32b0:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <remove_chain>
    32b4:	28 2f       	mov	r18, r24
					if (res == FR_OK) res = sync_fs(dj.fs);
    32b6:	88 23       	and	r24, r24
    32b8:	29 f4       	brne	.+10     	; 0x32c4 <f_unlink+0x114>
    32ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    32bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    32be:	0e 94 0c 08 	call	0x1018	; 0x1018 <sync_fs>
    32c2:	28 2f       	mov	r18, r24
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
    32c4:	82 2f       	mov	r24, r18
    32c6:	eb 96       	adiw	r28, 0x3b	; 59
    32c8:	0f b6       	in	r0, 0x3f	; 63
    32ca:	f8 94       	cli
    32cc:	de bf       	out	0x3e, r29	; 62
    32ce:	0f be       	out	0x3f, r0	; 63
    32d0:	cd bf       	out	0x3d, r28	; 61
    32d2:	cf 91       	pop	r28
    32d4:	df 91       	pop	r29
    32d6:	1f 91       	pop	r17
    32d8:	0f 91       	pop	r16
    32da:	ff 90       	pop	r15
    32dc:	ef 90       	pop	r14
    32de:	df 90       	pop	r13
    32e0:	cf 90       	pop	r12
    32e2:	08 95       	ret
						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);		/* Remove the directory entry */
    32e4:	ce 01       	movw	r24, r28
    32e6:	0d 96       	adiw	r24, 0x0d	; 13
    32e8:	0e 94 37 0a 	call	0x146e	; 0x146e <dir_remove>
    32ec:	28 2f       	mov	r18, r24
				if (res == FR_OK) {
    32ee:	88 23       	and	r24, r24
    32f0:	b1 f2       	breq	.-84     	; 0x329e <f_unlink+0xee>
    32f2:	e8 cf       	rjmp	.-48     	; 0x32c4 <f_unlink+0x114>

000032f4 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
    32f4:	5f 92       	push	r5
    32f6:	6f 92       	push	r6
    32f8:	7f 92       	push	r7
    32fa:	8f 92       	push	r8
    32fc:	9f 92       	push	r9
    32fe:	af 92       	push	r10
    3300:	bf 92       	push	r11
    3302:	cf 92       	push	r12
    3304:	df 92       	push	r13
    3306:	ef 92       	push	r14
    3308:	ff 92       	push	r15
    330a:	0f 93       	push	r16
    330c:	1f 93       	push	r17
    330e:	df 93       	push	r29
    3310:	cf 93       	push	r28
    3312:	cd b7       	in	r28, 0x3d	; 61
    3314:	de b7       	in	r29, 0x3e	; 62
    3316:	a9 97       	sbiw	r28, 0x29	; 41
    3318:	0f b6       	in	r0, 0x3f	; 63
    331a:	f8 94       	cli
    331c:	de bf       	out	0x3e, r29	; 62
    331e:	0f be       	out	0x3f, r0	; 63
    3320:	cd bf       	out	0x3d, r28	; 61
    3322:	9c a3       	std	Y+36, r25	; 0x24
    3324:	8b a3       	std	Y+35, r24	; 0x23
	FRESULT res;
	DIR dj;
	BYTE *dir, n;
	DWORD dsc, dcl, pcl, tm = get_fattime();
    3326:	0e 94 81 1c 	call	0x3902	; 0x3902 <get_fattime>
    332a:	6d a3       	std	Y+37, r22	; 0x25
    332c:	7e a3       	std	Y+38, r23	; 0x26
    332e:	8f a3       	std	Y+39, r24	; 0x27
    3330:	98 a7       	std	Y+40, r25	; 0x28
	DEF_NAMEBUF;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 1);
    3332:	8e 01       	movw	r16, r28
    3334:	03 5f       	subi	r16, 0xF3	; 243
    3336:	1f 4f       	sbci	r17, 0xFF	; 255
    3338:	c8 01       	movw	r24, r16
    333a:	be 01       	movw	r22, r28
    333c:	6d 5d       	subi	r22, 0xDD	; 221
    333e:	7f 4f       	sbci	r23, 0xFF	; 255
    3340:	41 e0       	ldi	r20, 0x01	; 1
    3342:	0e 94 70 05 	call	0xae0	; 0xae0 <find_volume>
    3346:	28 2f       	mov	r18, r24
	if (res == FR_OK) {
    3348:	88 23       	and	r24, r24
    334a:	09 f0       	breq	.+2      	; 0x334e <f_mkdir+0x5a>
    334c:	dd c0       	rjmp	.+442    	; 0x3508 <f_mkdir+0x214>
		INIT_BUF(dj);
    334e:	ce 01       	movw	r24, r28
    3350:	01 96       	adiw	r24, 0x01	; 1
    3352:	9a a3       	std	Y+34, r25	; 0x22
    3354:	89 a3       	std	Y+33, r24	; 0x21
		res = follow_path(&dj, path);			/* Follow the file path */
    3356:	6b a1       	ldd	r22, Y+35	; 0x23
    3358:	7c a1       	ldd	r23, Y+36	; 0x24
    335a:	c8 01       	movw	r24, r16
    335c:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <follow_path>
    3360:	28 2f       	mov	r18, r24
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
    3362:	88 23       	and	r24, r24
    3364:	09 f4       	brne	.+2      	; 0x3368 <f_mkdir+0x74>
    3366:	cf c0       	rjmp	.+414    	; 0x3506 <f_mkdir+0x212>
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_NO_FILE) {				/* Can create a new directory */
    3368:	84 30       	cpi	r24, 0x04	; 4
    336a:	09 f0       	breq	.+2      	; 0x336e <f_mkdir+0x7a>
    336c:	cd c0       	rjmp	.+410    	; 0x3508 <f_mkdir+0x214>
			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
    336e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3370:	9e 85       	ldd	r25, Y+14	; 0x0e
    3372:	40 e0       	ldi	r20, 0x00	; 0
    3374:	50 e0       	ldi	r21, 0x00	; 0
    3376:	ba 01       	movw	r22, r20
    3378:	0e 94 4a 0b 	call	0x1694	; 0x1694 <create_chain>
    337c:	7b 01       	movw	r14, r22
    337e:	8c 01       	movw	r16, r24
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
    3380:	61 15       	cp	r22, r1
    3382:	71 05       	cpc	r23, r1
    3384:	81 05       	cpc	r24, r1
    3386:	91 05       	cpc	r25, r1
    3388:	09 f4       	brne	.+2      	; 0x338c <f_mkdir+0x98>
    338a:	d5 c0       	rjmp	.+426    	; 0x3536 <f_mkdir+0x242>
			if (dcl == 1) res = FR_INT_ERR;
    338c:	61 30       	cpi	r22, 0x01	; 1
    338e:	71 05       	cpc	r23, r1
    3390:	81 05       	cpc	r24, r1
    3392:	91 05       	cpc	r25, r1
    3394:	09 f4       	brne	.+2      	; 0x3398 <f_mkdir+0xa4>
    3396:	d1 c0       	rjmp	.+418    	; 0x353a <f_mkdir+0x246>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
    3398:	6f 3f       	cpi	r22, 0xFF	; 255
    339a:	3f ef       	ldi	r19, 0xFF	; 255
    339c:	73 07       	cpc	r23, r19
    339e:	3f ef       	ldi	r19, 0xFF	; 255
    33a0:	83 07       	cpc	r24, r19
    33a2:	3f ef       	ldi	r19, 0xFF	; 255
    33a4:	93 07       	cpc	r25, r19
    33a6:	09 f4       	brne	.+2      	; 0x33aa <f_mkdir+0xb6>
    33a8:	ca c0       	rjmp	.+404    	; 0x353e <f_mkdir+0x24a>
    33aa:	cb c0       	rjmp	.+406    	; 0x3542 <f_mkdir+0x24e>
			if (res == FR_OK)					/* Flush FAT */
				res = sync_window(dj.fs);
			if (res == FR_OK) {					/* Initialize the new directory table */
				dsc = clust2sect(dj.fs, dcl);
    33ac:	cd 84       	ldd	r12, Y+13	; 0x0d
    33ae:	de 84       	ldd	r13, Y+14	; 0x0e
    33b0:	c6 01       	movw	r24, r12
    33b2:	b8 01       	movw	r22, r16
    33b4:	a7 01       	movw	r20, r14
    33b6:	0e 94 91 08 	call	0x1122	; 0x1122 <clust2sect>
    33ba:	3b 01       	movw	r6, r22
    33bc:	4c 01       	movw	r8, r24
				dir = dj.fs->win;
    33be:	ae e2       	ldi	r26, 0x2E	; 46
    33c0:	aa 2e       	mov	r10, r26
    33c2:	b1 2c       	mov	r11, r1
    33c4:	ac 0c       	add	r10, r12
    33c6:	bd 1c       	adc	r11, r13
				mem_set(dir, 0, SS(dj.fs));
    33c8:	c5 01       	movw	r24, r10
    33ca:	60 e0       	ldi	r22, 0x00	; 0
    33cc:	70 e0       	ldi	r23, 0x00	; 0
    33ce:	40 e0       	ldi	r20, 0x00	; 0
    33d0:	52 e0       	ldi	r21, 0x02	; 2
    33d2:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <mem_set>
				mem_set(dir+DIR_Name, ' ', 11);	/* Create "." entry */
    33d6:	c5 01       	movw	r24, r10
    33d8:	60 e2       	ldi	r22, 0x20	; 32
    33da:	70 e0       	ldi	r23, 0x00	; 0
    33dc:	4b e0       	ldi	r20, 0x0B	; 11
    33de:	50 e0       	ldi	r21, 0x00	; 0
    33e0:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <mem_set>
				dir[DIR_Name] = '.';
    33e4:	fe e2       	ldi	r31, 0x2E	; 46
    33e6:	5f 2e       	mov	r5, r31
    33e8:	d6 01       	movw	r26, r12
    33ea:	9e 96       	adiw	r26, 0x2e	; 46
    33ec:	5c 92       	st	X, r5
    33ee:	9e 97       	sbiw	r26, 0x2e	; 46
				dir[DIR_Attr] = AM_DIR;
    33f0:	80 e1       	ldi	r24, 0x10	; 16
    33f2:	d9 96       	adiw	r26, 0x39	; 57
    33f4:	8c 93       	st	X, r24
				ST_DWORD(dir+DIR_WrtTime, tm);
    33f6:	f6 01       	movw	r30, r12
    33f8:	ec 5b       	subi	r30, 0xBC	; 188
    33fa:	ff 4f       	sbci	r31, 0xFF	; 255
    33fc:	2d a1       	ldd	r18, Y+37	; 0x25
    33fe:	3e a1       	ldd	r19, Y+38	; 0x26
    3400:	4f a1       	ldd	r20, Y+39	; 0x27
    3402:	58 a5       	ldd	r21, Y+40	; 0x28
    3404:	20 83       	st	Z, r18
    3406:	31 83       	std	Z+1, r19	; 0x01
    3408:	42 83       	std	Z+2, r20	; 0x02
    340a:	53 83       	std	Z+3, r21	; 0x03
				st_clust(dir, dcl);
    340c:	c5 01       	movw	r24, r10
    340e:	b8 01       	movw	r22, r16
    3410:	a7 01       	movw	r20, r14
    3412:	0e 94 05 04 	call	0x80a	; 0x80a <st_clust>
				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
    3416:	c6 01       	movw	r24, r12
    3418:	82 5b       	subi	r24, 0xB2	; 178
    341a:	9f 4f       	sbci	r25, 0xFF	; 255
    341c:	b5 01       	movw	r22, r10
    341e:	40 e2       	ldi	r20, 0x20	; 32
    3420:	50 e0       	ldi	r21, 0x00	; 0
    3422:	0e 94 da 03 	call	0x7b4	; 0x7b4 <mem_cpy>
				dir[SZ_DIR+1] = '.'; pcl = dj.sclust;
    3426:	f6 01       	movw	r30, r12
    3428:	e1 5b       	subi	r30, 0xB1	; 177
    342a:	ff 4f       	sbci	r31, 0xFF	; 255
    342c:	50 82       	st	Z, r5
    342e:	4b 89       	ldd	r20, Y+19	; 0x13
    3430:	5c 89       	ldd	r21, Y+20	; 0x14
    3432:	6d 89       	ldd	r22, Y+21	; 0x15
    3434:	7e 89       	ldd	r23, Y+22	; 0x16
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
    3436:	ed 85       	ldd	r30, Y+13	; 0x0d
    3438:	fe 85       	ldd	r31, Y+14	; 0x0e
    343a:	80 81       	ld	r24, Z
    343c:	83 30       	cpi	r24, 0x03	; 3
    343e:	61 f4       	brne	.+24     	; 0x3458 <f_mkdir+0x164>
    3440:	82 a1       	ldd	r24, Z+34	; 0x22
    3442:	93 a1       	ldd	r25, Z+35	; 0x23
    3444:	a4 a1       	ldd	r26, Z+36	; 0x24
    3446:	b5 a1       	ldd	r27, Z+37	; 0x25
    3448:	48 17       	cp	r20, r24
    344a:	59 07       	cpc	r21, r25
    344c:	6a 07       	cpc	r22, r26
    344e:	7b 07       	cpc	r23, r27
    3450:	19 f4       	brne	.+6      	; 0x3458 <f_mkdir+0x164>
					pcl = 0;
    3452:	40 e0       	ldi	r20, 0x00	; 0
    3454:	50 e0       	ldi	r21, 0x00	; 0
    3456:	ba 01       	movw	r22, r20
				st_clust(dir+SZ_DIR, pcl);
    3458:	c6 01       	movw	r24, r12
    345a:	82 5b       	subi	r24, 0xB2	; 178
    345c:	9f 4f       	sbci	r25, 0xFF	; 255
    345e:	0e 94 05 04 	call	0x80a	; 0x80a <st_clust>
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
    3462:	ed 85       	ldd	r30, Y+13	; 0x0d
    3464:	fe 85       	ldd	r31, Y+14	; 0x0e
    3466:	c2 80       	ldd	r12, Z+2	; 0x02
					dj.fs->winsect = dsc++;
					dj.fs->wflag = 1;
    3468:	55 24       	eor	r5, r5
    346a:	53 94       	inc	r5
				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
				dir[SZ_DIR+1] = '.'; pcl = dj.sclust;
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
					pcl = 0;
				st_clust(dir+SZ_DIR, pcl);
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
    346c:	1d c0       	rjmp	.+58     	; 0x34a8 <f_mkdir+0x1b4>
					dj.fs->winsect = dsc++;
    346e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3470:	9e 85       	ldd	r25, Y+14	; 0x0e
    3472:	dc 01       	movw	r26, r24
    3474:	9a 96       	adiw	r26, 0x2a	; 42
    3476:	6d 92       	st	X+, r6
    3478:	7d 92       	st	X+, r7
    347a:	8d 92       	st	X+, r8
    347c:	9c 92       	st	X, r9
    347e:	9d 97       	sbiw	r26, 0x2d	; 45
					dj.fs->wflag = 1;
    3480:	14 96       	adiw	r26, 0x04	; 4
    3482:	5c 92       	st	X, r5
					res = sync_window(dj.fs);
    3484:	0e 94 95 04 	call	0x92a	; 0x92a <sync_window>
    3488:	28 2f       	mov	r18, r24
					if (res != FR_OK) break;
    348a:	88 23       	and	r24, r24
    348c:	b1 f4       	brne	.+44     	; 0x34ba <f_mkdir+0x1c6>
				dir[SZ_DIR+1] = '.'; pcl = dj.sclust;
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
					pcl = 0;
				st_clust(dir+SZ_DIR, pcl);
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
					dj.fs->winsect = dsc++;
    348e:	08 94       	sec
    3490:	61 1c       	adc	r6, r1
    3492:	71 1c       	adc	r7, r1
    3494:	81 1c       	adc	r8, r1
    3496:	91 1c       	adc	r9, r1
					dj.fs->wflag = 1;
					res = sync_window(dj.fs);
					if (res != FR_OK) break;
					mem_set(dir, 0, SS(dj.fs));
    3498:	c5 01       	movw	r24, r10
    349a:	60 e0       	ldi	r22, 0x00	; 0
    349c:	70 e0       	ldi	r23, 0x00	; 0
    349e:	40 e0       	ldi	r20, 0x00	; 0
    34a0:	52 e0       	ldi	r21, 0x02	; 2
    34a2:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <mem_set>
				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
				dir[SZ_DIR+1] = '.'; pcl = dj.sclust;
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
					pcl = 0;
				st_clust(dir+SZ_DIR, pcl);
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
    34a6:	ca 94       	dec	r12
    34a8:	cc 20       	and	r12, r12
    34aa:	09 f7       	brne	.-62     	; 0x346e <f_mkdir+0x17a>
					res = sync_window(dj.fs);
					if (res != FR_OK) break;
					mem_set(dir, 0, SS(dj.fs));
				}
			}
			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
    34ac:	ce 01       	movw	r24, r28
    34ae:	0d 96       	adiw	r24, 0x0d	; 13
    34b0:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <dir_register>
    34b4:	28 2f       	mov	r18, r24
			if (res != FR_OK) {
    34b6:	88 23       	and	r24, r24
    34b8:	49 f0       	breq	.+18     	; 0x34cc <f_mkdir+0x1d8>
				remove_chain(dj.fs, dcl);			/* Could not register, remove cluster chain */
    34ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    34bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    34be:	b8 01       	movw	r22, r16
    34c0:	a7 01       	movw	r20, r14
    34c2:	29 a7       	std	Y+41, r18	; 0x29
    34c4:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <remove_chain>
    34c8:	29 a5       	ldd	r18, Y+41	; 0x29
    34ca:	1e c0       	rjmp	.+60     	; 0x3508 <f_mkdir+0x214>
			} else {
				dir = dj.dir;
    34cc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    34ce:	98 a1       	ldd	r25, Y+32	; 0x20
				dir[DIR_Attr] = AM_DIR;				/* Attribute */
    34d0:	20 e1       	ldi	r18, 0x10	; 16
    34d2:	fc 01       	movw	r30, r24
    34d4:	23 87       	std	Z+11, r18	; 0x0b
				ST_DWORD(dir+DIR_WrtTime, tm);		/* Created time */
    34d6:	2d a1       	ldd	r18, Y+37	; 0x25
    34d8:	3e a1       	ldd	r19, Y+38	; 0x26
    34da:	4f a1       	ldd	r20, Y+39	; 0x27
    34dc:	58 a5       	ldd	r21, Y+40	; 0x28
    34de:	dc 01       	movw	r26, r24
    34e0:	56 96       	adiw	r26, 0x16	; 22
    34e2:	2d 93       	st	X+, r18
    34e4:	3d 93       	st	X+, r19
    34e6:	4d 93       	st	X+, r20
    34e8:	5c 93       	st	X, r21
    34ea:	59 97       	sbiw	r26, 0x19	; 25
				st_clust(dir, dcl);					/* Table start cluster */
    34ec:	b8 01       	movw	r22, r16
    34ee:	a7 01       	movw	r20, r14
    34f0:	0e 94 05 04 	call	0x80a	; 0x80a <st_clust>
				dj.fs->wflag = 1;
    34f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    34f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    34f8:	21 e0       	ldi	r18, 0x01	; 1
    34fa:	fc 01       	movw	r30, r24
    34fc:	24 83       	std	Z+4, r18	; 0x04
				res = sync_fs(dj.fs);
    34fe:	0e 94 0c 08 	call	0x1018	; 0x1018 <sync_fs>
    3502:	28 2f       	mov	r18, r24
    3504:	01 c0       	rjmp	.+2      	; 0x3508 <f_mkdir+0x214>
	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 1);
	if (res == FR_OK) {
		INIT_BUF(dj);
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
    3506:	28 e0       	ldi	r18, 0x08	; 8
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
    3508:	82 2f       	mov	r24, r18
    350a:	a9 96       	adiw	r28, 0x29	; 41
    350c:	0f b6       	in	r0, 0x3f	; 63
    350e:	f8 94       	cli
    3510:	de bf       	out	0x3e, r29	; 62
    3512:	0f be       	out	0x3f, r0	; 63
    3514:	cd bf       	out	0x3d, r28	; 61
    3516:	cf 91       	pop	r28
    3518:	df 91       	pop	r29
    351a:	1f 91       	pop	r17
    351c:	0f 91       	pop	r16
    351e:	ff 90       	pop	r15
    3520:	ef 90       	pop	r14
    3522:	df 90       	pop	r13
    3524:	cf 90       	pop	r12
    3526:	bf 90       	pop	r11
    3528:	af 90       	pop	r10
    352a:	9f 90       	pop	r9
    352c:	8f 90       	pop	r8
    352e:	7f 90       	pop	r7
    3530:	6f 90       	pop	r6
    3532:	5f 90       	pop	r5
    3534:	08 95       	ret
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_NO_FILE) {				/* Can create a new directory */
			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
    3536:	27 e0       	ldi	r18, 0x07	; 7
    3538:	c0 cf       	rjmp	.-128    	; 0x34ba <f_mkdir+0x1c6>
			if (dcl == 1) res = FR_INT_ERR;
    353a:	22 e0       	ldi	r18, 0x02	; 2
    353c:	be cf       	rjmp	.-132    	; 0x34ba <f_mkdir+0x1c6>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
    353e:	21 e0       	ldi	r18, 0x01	; 1
    3540:	bc cf       	rjmp	.-136    	; 0x34ba <f_mkdir+0x1c6>
			if (res == FR_OK)					/* Flush FAT */
				res = sync_window(dj.fs);
    3542:	8d 85       	ldd	r24, Y+13	; 0x0d
    3544:	9e 85       	ldd	r25, Y+14	; 0x0e
    3546:	0e 94 95 04 	call	0x92a	; 0x92a <sync_window>
    354a:	28 2f       	mov	r18, r24
			if (res == FR_OK) {					/* Initialize the new directory table */
    354c:	88 23       	and	r24, r24
    354e:	09 f4       	brne	.+2      	; 0x3552 <f_mkdir+0x25e>
    3550:	2d cf       	rjmp	.-422    	; 0x33ac <f_mkdir+0xb8>
    3552:	b3 cf       	rjmp	.-154    	; 0x34ba <f_mkdir+0x1c6>

00003554 <f_chmod>:
FRESULT f_chmod (
	const TCHAR* path,	/* Pointer to the file path */
	BYTE value,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    3554:	ef 92       	push	r14
    3556:	ff 92       	push	r15
    3558:	0f 93       	push	r16
    355a:	1f 93       	push	r17
    355c:	df 93       	push	r29
    355e:	cf 93       	push	r28
    3560:	cd b7       	in	r28, 0x3d	; 61
    3562:	de b7       	in	r29, 0x3e	; 62
    3564:	a4 97       	sbiw	r28, 0x24	; 36
    3566:	0f b6       	in	r0, 0x3f	; 63
    3568:	f8 94       	cli
    356a:	de bf       	out	0x3e, r29	; 62
    356c:	0f be       	out	0x3f, r0	; 63
    356e:	cd bf       	out	0x3d, r28	; 61
    3570:	9c a3       	std	Y+36, r25	; 0x24
    3572:	8b a3       	std	Y+35, r24	; 0x23
    3574:	f6 2e       	mov	r15, r22
    3576:	e4 2e       	mov	r14, r20
	BYTE *dir;
	DEF_NAMEBUF;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 1);
    3578:	8e 01       	movw	r16, r28
    357a:	03 5f       	subi	r16, 0xF3	; 243
    357c:	1f 4f       	sbci	r17, 0xFF	; 255
    357e:	c8 01       	movw	r24, r16
    3580:	be 01       	movw	r22, r28
    3582:	6d 5d       	subi	r22, 0xDD	; 221
    3584:	7f 4f       	sbci	r23, 0xFF	; 255
    3586:	41 e0       	ldi	r20, 0x01	; 1
    3588:	0e 94 70 05 	call	0xae0	; 0xae0 <find_volume>
	if (res == FR_OK) {
    358c:	88 23       	and	r24, r24
    358e:	11 f5       	brne	.+68     	; 0x35d4 <f_chmod+0x80>
		INIT_BUF(dj);
    3590:	ce 01       	movw	r24, r28
    3592:	01 96       	adiw	r24, 0x01	; 1
    3594:	9a a3       	std	Y+34, r25	; 0x22
    3596:	89 a3       	std	Y+33, r24	; 0x21
		res = follow_path(&dj, path);		/* Follow the file path */
    3598:	2b a1       	ldd	r18, Y+35	; 0x23
    359a:	3c a1       	ldd	r19, Y+36	; 0x24
    359c:	c8 01       	movw	r24, r16
    359e:	b9 01       	movw	r22, r18
    35a0:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <follow_path>
		FREE_BUF();
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
    35a4:	88 23       	and	r24, r24
    35a6:	b1 f4       	brne	.+44     	; 0x35d4 <f_chmod+0x80>
			dir = dj.dir;
    35a8:	ef 8d       	ldd	r30, Y+31	; 0x1f
    35aa:	f8 a1       	ldd	r31, Y+32	; 0x20
			if (!dir) {						/* Is it a root directory? */
    35ac:	30 97       	sbiw	r30, 0x00	; 0
    35ae:	89 f0       	breq	.+34     	; 0x35d2 <f_chmod+0x7e>
				res = FR_INVALID_NAME;
			} else {						/* File or sub directory */
				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
    35b0:	87 e2       	ldi	r24, 0x27	; 39
    35b2:	e8 22       	and	r14, r24
				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    35b4:	8e 2d       	mov	r24, r14
    35b6:	80 95       	com	r24
    35b8:	93 85       	ldd	r25, Z+11	; 0x0b
    35ba:	89 23       	and	r24, r25
    35bc:	ef 20       	and	r14, r15
    35be:	8e 29       	or	r24, r14
    35c0:	83 87       	std	Z+11, r24	; 0x0b
				dj.fs->wflag = 1;
    35c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    35c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    35c6:	21 e0       	ldi	r18, 0x01	; 1
    35c8:	fc 01       	movw	r30, r24
    35ca:	24 83       	std	Z+4, r18	; 0x04
				res = sync_fs(dj.fs);
    35cc:	0e 94 0c 08 	call	0x1018	; 0x1018 <sync_fs>
    35d0:	01 c0       	rjmp	.+2      	; 0x35d4 <f_chmod+0x80>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
			dir = dj.dir;
			if (!dir) {						/* Is it a root directory? */
				res = FR_INVALID_NAME;
    35d2:	86 e0       	ldi	r24, 0x06	; 6
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
    35d4:	a4 96       	adiw	r28, 0x24	; 36
    35d6:	0f b6       	in	r0, 0x3f	; 63
    35d8:	f8 94       	cli
    35da:	de bf       	out	0x3e, r29	; 62
    35dc:	0f be       	out	0x3f, r0	; 63
    35de:	cd bf       	out	0x3d, r28	; 61
    35e0:	cf 91       	pop	r28
    35e2:	df 91       	pop	r29
    35e4:	1f 91       	pop	r17
    35e6:	0f 91       	pop	r16
    35e8:	ff 90       	pop	r15
    35ea:	ef 90       	pop	r14
    35ec:	08 95       	ret

000035ee <f_utime>:

FRESULT f_utime (
	const TCHAR* path,	/* Pointer to the file/directory name */
	const FILINFO* fno	/* Pointer to the time stamp to be set */
)
{
    35ee:	ef 92       	push	r14
    35f0:	ff 92       	push	r15
    35f2:	0f 93       	push	r16
    35f4:	1f 93       	push	r17
    35f6:	df 93       	push	r29
    35f8:	cf 93       	push	r28
    35fa:	cd b7       	in	r28, 0x3d	; 61
    35fc:	de b7       	in	r29, 0x3e	; 62
    35fe:	a4 97       	sbiw	r28, 0x24	; 36
    3600:	0f b6       	in	r0, 0x3f	; 63
    3602:	f8 94       	cli
    3604:	de bf       	out	0x3e, r29	; 62
    3606:	0f be       	out	0x3f, r0	; 63
    3608:	cd bf       	out	0x3d, r28	; 61
    360a:	9c a3       	std	Y+36, r25	; 0x24
    360c:	8b a3       	std	Y+35, r24	; 0x23
    360e:	7b 01       	movw	r14, r22
	BYTE *dir;
	DEF_NAMEBUF;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 1);
    3610:	8e 01       	movw	r16, r28
    3612:	03 5f       	subi	r16, 0xF3	; 243
    3614:	1f 4f       	sbci	r17, 0xFF	; 255
    3616:	c8 01       	movw	r24, r16
    3618:	be 01       	movw	r22, r28
    361a:	6d 5d       	subi	r22, 0xDD	; 221
    361c:	7f 4f       	sbci	r23, 0xFF	; 255
    361e:	41 e0       	ldi	r20, 0x01	; 1
    3620:	0e 94 70 05 	call	0xae0	; 0xae0 <find_volume>
	if (res == FR_OK) {
    3624:	88 23       	and	r24, r24
    3626:	29 f5       	brne	.+74     	; 0x3672 <f_utime+0x84>
		INIT_BUF(dj);
    3628:	ce 01       	movw	r24, r28
    362a:	01 96       	adiw	r24, 0x01	; 1
    362c:	9a a3       	std	Y+34, r25	; 0x22
    362e:	89 a3       	std	Y+33, r24	; 0x21
		res = follow_path(&dj, path);	/* Follow the file path */
    3630:	6b a1       	ldd	r22, Y+35	; 0x23
    3632:	7c a1       	ldd	r23, Y+36	; 0x24
    3634:	c8 01       	movw	r24, r16
    3636:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <follow_path>
		FREE_BUF();
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
    363a:	88 23       	and	r24, r24
    363c:	d1 f4       	brne	.+52     	; 0x3672 <f_utime+0x84>
			dir = dj.dir;
    363e:	ef 8d       	ldd	r30, Y+31	; 0x1f
    3640:	f8 a1       	ldd	r31, Y+32	; 0x20
			if (!dir) {					/* Root directory */
    3642:	30 97       	sbiw	r30, 0x00	; 0
    3644:	a9 f0       	breq	.+42     	; 0x3670 <f_utime+0x82>
				res = FR_INVALID_NAME;
			} else {					/* File or sub-directory */
				ST_WORD(dir+DIR_WrtTime, fno->ftime);
    3646:	d7 01       	movw	r26, r14
    3648:	16 96       	adiw	r26, 0x06	; 6
    364a:	8d 91       	ld	r24, X+
    364c:	9c 91       	ld	r25, X
    364e:	17 97       	sbiw	r26, 0x07	; 7
    3650:	97 8b       	std	Z+23, r25	; 0x17
    3652:	86 8b       	std	Z+22, r24	; 0x16
				ST_WORD(dir+DIR_WrtDate, fno->fdate);
    3654:	14 96       	adiw	r26, 0x04	; 4
    3656:	8d 91       	ld	r24, X+
    3658:	9c 91       	ld	r25, X
    365a:	15 97       	sbiw	r26, 0x05	; 5
    365c:	91 8f       	std	Z+25, r25	; 0x19
    365e:	80 8f       	std	Z+24, r24	; 0x18
				dj.fs->wflag = 1;
    3660:	8d 85       	ldd	r24, Y+13	; 0x0d
    3662:	9e 85       	ldd	r25, Y+14	; 0x0e
    3664:	21 e0       	ldi	r18, 0x01	; 1
    3666:	fc 01       	movw	r30, r24
    3668:	24 83       	std	Z+4, r18	; 0x04
				res = sync_fs(dj.fs);
    366a:	0e 94 0c 08 	call	0x1018	; 0x1018 <sync_fs>
    366e:	01 c0       	rjmp	.+2      	; 0x3672 <f_utime+0x84>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
			dir = dj.dir;
			if (!dir) {					/* Root directory */
				res = FR_INVALID_NAME;
    3670:	86 e0       	ldi	r24, 0x06	; 6
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
    3672:	a4 96       	adiw	r28, 0x24	; 36
    3674:	0f b6       	in	r0, 0x3f	; 63
    3676:	f8 94       	cli
    3678:	de bf       	out	0x3e, r29	; 62
    367a:	0f be       	out	0x3f, r0	; 63
    367c:	cd bf       	out	0x3d, r28	; 61
    367e:	cf 91       	pop	r28
    3680:	df 91       	pop	r29
    3682:	1f 91       	pop	r17
    3684:	0f 91       	pop	r16
    3686:	ff 90       	pop	r15
    3688:	ef 90       	pop	r14
    368a:	08 95       	ret

0000368c <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
    368c:	cf 92       	push	r12
    368e:	df 92       	push	r13
    3690:	ef 92       	push	r14
    3692:	ff 92       	push	r15
    3694:	0f 93       	push	r16
    3696:	1f 93       	push	r17
    3698:	df 93       	push	r29
    369a:	cf 93       	push	r28
    369c:	cd b7       	in	r28, 0x3d	; 61
    369e:	de b7       	in	r29, 0x3e	; 62
    36a0:	c1 55       	subi	r28, 0x51	; 81
    36a2:	d0 40       	sbci	r29, 0x00	; 0
    36a4:	0f b6       	in	r0, 0x3f	; 63
    36a6:	f8 94       	cli
    36a8:	de bf       	out	0x3e, r29	; 62
    36aa:	0f be       	out	0x3f, r0	; 63
    36ac:	cd bf       	out	0x3d, r28	; 61
    36ae:	8e 01       	movw	r16, r28
    36b0:	02 5b       	subi	r16, 0xB2	; 178
    36b2:	1f 4f       	sbci	r17, 0xFF	; 255
    36b4:	f8 01       	movw	r30, r16
    36b6:	91 83       	std	Z+1, r25	; 0x01
    36b8:	80 83       	st	Z, r24
    36ba:	80 e5       	ldi	r24, 0x50	; 80
    36bc:	c8 2e       	mov	r12, r24
    36be:	d1 2c       	mov	r13, r1
    36c0:	cc 0e       	add	r12, r28
    36c2:	dd 1e       	adc	r13, r29
    36c4:	f6 01       	movw	r30, r12
    36c6:	71 83       	std	Z+1, r23	; 0x01
    36c8:	60 83       	st	Z, r22
	DWORD dw;
	DEF_NAMEBUF;


	/* Get logical drive number of the source object */
	res = find_volume(&djo.fs, &path_old, 1);
    36ca:	b2 e2       	ldi	r27, 0x22	; 34
    36cc:	eb 2e       	mov	r14, r27
    36ce:	f1 2c       	mov	r15, r1
    36d0:	ec 0e       	add	r14, r28
    36d2:	fd 1e       	adc	r15, r29
    36d4:	c7 01       	movw	r24, r14
    36d6:	b8 01       	movw	r22, r16
    36d8:	41 e0       	ldi	r20, 0x01	; 1
    36da:	0e 94 70 05 	call	0xae0	; 0xae0 <find_volume>
	if (res == FR_OK) {
    36de:	88 23       	and	r24, r24
    36e0:	09 f0       	breq	.+2      	; 0x36e4 <f_rename+0x58>
    36e2:	c0 c0       	rjmp	.+384    	; 0x3864 <f_rename+0x1d8>
		djn.fs = djo.fs;
    36e4:	8a a1       	ldd	r24, Y+34	; 0x22
    36e6:	9b a1       	ldd	r25, Y+35	; 0x23
    36e8:	99 af       	std	Y+57, r25	; 0x39
    36ea:	88 af       	std	Y+56, r24	; 0x38
		INIT_BUF(djo);
    36ec:	ce 01       	movw	r24, r28
    36ee:	01 96       	adiw	r24, 0x01	; 1
    36f0:	9f ab       	std	Y+55, r25	; 0x37
    36f2:	8e ab       	std	Y+54, r24	; 0x36
		res = follow_path(&djo, path_old);		/* Check old object */
    36f4:	f8 01       	movw	r30, r16
    36f6:	60 81       	ld	r22, Z
    36f8:	71 81       	ldd	r23, Z+1	; 0x01
    36fa:	c7 01       	movw	r24, r14
    36fc:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <follow_path>
		if (_FS_RPATH && res == FR_OK && (djo.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
#if _FS_LOCK
		if (res == FR_OK) res = chk_lock(&djo, 2);
#endif
		if (res == FR_OK) {						/* Old object is found */
    3700:	88 23       	and	r24, r24
    3702:	09 f0       	breq	.+2      	; 0x3706 <f_rename+0x7a>
    3704:	af c0       	rjmp	.+350    	; 0x3864 <f_rename+0x1d8>
			if (!djo.dir) {						/* Is root dir? */
    3706:	6c a9       	ldd	r22, Y+52	; 0x34
    3708:	7d a9       	ldd	r23, Y+53	; 0x35
    370a:	61 15       	cp	r22, r1
    370c:	71 05       	cpc	r23, r1
    370e:	09 f4       	brne	.+2      	; 0x3712 <f_rename+0x86>
    3710:	a4 c0       	rjmp	.+328    	; 0x385a <f_rename+0x1ce>
				res = FR_NO_FILE;
			} else {
				mem_cpy(buf, djo.dir+DIR_Attr, 21);		/* Save the object information except name */
    3712:	65 5f       	subi	r22, 0xF5	; 245
    3714:	7f 4f       	sbci	r23, 0xFF	; 255
    3716:	ce 01       	movw	r24, r28
    3718:	0d 96       	adiw	r24, 0x0d	; 13
    371a:	45 e1       	ldi	r20, 0x15	; 21
    371c:	50 e0       	ldi	r21, 0x00	; 0
    371e:	0e 94 da 03 	call	0x7b4	; 0x7b4 <mem_cpy>
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
    3722:	8e 01       	movw	r16, r28
    3724:	08 5c       	subi	r16, 0xC8	; 200
    3726:	1f 4f       	sbci	r17, 0xFF	; 255
    3728:	c8 01       	movw	r24, r16
    372a:	b7 01       	movw	r22, r14
    372c:	46 e1       	ldi	r20, 0x16	; 22
    372e:	50 e0       	ldi	r21, 0x00	; 0
    3730:	0e 94 da 03 	call	0x7b4	; 0x7b4 <mem_cpy>
				if (get_ldnumber(&path_new) >= 0)		/* Snip drive number off and ignore it */
    3734:	c6 01       	movw	r24, r12
    3736:	0e 94 4d 04 	call	0x89a	; 0x89a <get_ldnumber>
    373a:	97 fd       	sbrc	r25, 7
    373c:	90 c0       	rjmp	.+288    	; 0x385e <f_rename+0x1d2>
					res = follow_path(&djn, path_new);	/* and check if new object is exist */
    373e:	f6 01       	movw	r30, r12
    3740:	60 81       	ld	r22, Z
    3742:	71 81       	ldd	r23, Z+1	; 0x01
    3744:	c8 01       	movw	r24, r16
    3746:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <follow_path>
				else
					res = FR_INVALID_DRIVE;
				if (res == FR_OK) res = FR_EXIST;		/* The new object name is already existing */
    374a:	88 23       	and	r24, r24
    374c:	09 f4       	brne	.+2      	; 0x3750 <f_rename+0xc4>
    374e:	89 c0       	rjmp	.+274    	; 0x3862 <f_rename+0x1d6>
				if (res == FR_NO_FILE) { 				/* Is it a valid path and no name collision? */
    3750:	84 30       	cpi	r24, 0x04	; 4
    3752:	09 f0       	breq	.+2      	; 0x3756 <f_rename+0xca>
    3754:	87 c0       	rjmp	.+270    	; 0x3864 <f_rename+0x1d8>
/* Start critical section that any interruption can cause a cross-link */
					res = dir_register(&djn);			/* Register the new entry */
    3756:	c8 01       	movw	r24, r16
    3758:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <dir_register>
					if (res == FR_OK) {
    375c:	88 23       	and	r24, r24
    375e:	09 f0       	breq	.+2      	; 0x3762 <f_rename+0xd6>
    3760:	81 c0       	rjmp	.+258    	; 0x3864 <f_rename+0x1d8>
						dir = djn.dir;					/* Copy object information except name */
    3762:	fe 01       	movw	r30, r28
    3764:	e6 5b       	subi	r30, 0xB6	; 182
    3766:	ff 4f       	sbci	r31, 0xFF	; 255
    3768:	00 81       	ld	r16, Z
    376a:	11 81       	ldd	r17, Z+1	; 0x01
						mem_cpy(dir+13, buf+2, 19);
    376c:	c8 01       	movw	r24, r16
    376e:	0d 96       	adiw	r24, 0x0d	; 13
    3770:	be 01       	movw	r22, r28
    3772:	61 5f       	subi	r22, 0xF1	; 241
    3774:	7f 4f       	sbci	r23, 0xFF	; 255
    3776:	43 e1       	ldi	r20, 0x13	; 19
    3778:	50 e0       	ldi	r21, 0x00	; 0
    377a:	0e 94 da 03 	call	0x7b4	; 0x7b4 <mem_cpy>
						dir[DIR_Attr] = buf[0] | AM_ARC;
    377e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3780:	80 62       	ori	r24, 0x20	; 32
    3782:	f8 01       	movw	r30, r16
    3784:	83 87       	std	Z+11, r24	; 0x0b
						djo.fs->wflag = 1;
    3786:	ea a0       	ldd	r14, Y+34	; 0x22
    3788:	fb a0       	ldd	r15, Y+35	; 0x23
    378a:	81 e0       	ldi	r24, 0x01	; 1
    378c:	f7 01       	movw	r30, r14
    378e:	84 83       	std	Z+4, r24	; 0x04
						if (djo.sclust != djn.sclust && (dir[DIR_Attr] & AM_DIR)) {		/* Update .. entry in the directory if needed */
    3790:	28 a5       	ldd	r18, Y+40	; 0x28
    3792:	39 a5       	ldd	r19, Y+41	; 0x29
    3794:	4a a5       	ldd	r20, Y+42	; 0x2a
    3796:	5b a5       	ldd	r21, Y+43	; 0x2b
    3798:	fe 01       	movw	r30, r28
    379a:	fe 96       	adiw	r30, 0x3e	; 62
    379c:	80 81       	ld	r24, Z
    379e:	91 81       	ldd	r25, Z+1	; 0x01
    37a0:	a2 81       	ldd	r26, Z+2	; 0x02
    37a2:	b3 81       	ldd	r27, Z+3	; 0x03
    37a4:	28 17       	cp	r18, r24
    37a6:	39 07       	cpc	r19, r25
    37a8:	4a 07       	cpc	r20, r26
    37aa:	5b 07       	cpc	r21, r27
    37ac:	09 f4       	brne	.+2      	; 0x37b0 <f_rename+0x124>
    37ae:	4a c0       	rjmp	.+148    	; 0x3844 <f_rename+0x1b8>
    37b0:	f8 01       	movw	r30, r16
    37b2:	83 85       	ldd	r24, Z+11	; 0x0b
    37b4:	84 ff       	sbrs	r24, 4
    37b6:	46 c0       	rjmp	.+140    	; 0x3844 <f_rename+0x1b8>
							dw = clust2sect(djo.fs, ld_clust(djo.fs, dir));
    37b8:	f7 01       	movw	r30, r14
    37ba:	80 81       	ld	r24, Z
    37bc:	b8 01       	movw	r22, r16
    37be:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <ld_clust.clone.0>
    37c2:	ab 01       	movw	r20, r22
    37c4:	bc 01       	movw	r22, r24
    37c6:	c7 01       	movw	r24, r14
    37c8:	0e 94 91 08 	call	0x1122	; 0x1122 <clust2sect>
    37cc:	ab 01       	movw	r20, r22
    37ce:	bc 01       	movw	r22, r24
							if (!dw) {
    37d0:	41 15       	cp	r20, r1
    37d2:	51 05       	cpc	r21, r1
    37d4:	61 05       	cpc	r22, r1
    37d6:	71 05       	cpc	r23, r1
    37d8:	09 f4       	brne	.+2      	; 0x37dc <f_rename+0x150>
    37da:	54 c0       	rjmp	.+168    	; 0x3884 <f_rename+0x1f8>
								res = FR_INT_ERR;
							} else {
								res = move_window(djo.fs, dw);
    37dc:	c7 01       	movw	r24, r14
    37de:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <move_window>
								dir = djo.fs->win+SZ_DIR;	/* .. entry */
    37e2:	ea a1       	ldd	r30, Y+34	; 0x22
    37e4:	fb a1       	ldd	r31, Y+35	; 0x23
								if (res == FR_OK && dir[1] == '.') {
    37e6:	88 23       	and	r24, r24
    37e8:	e9 f5       	brne	.+122    	; 0x3864 <f_rename+0x1d8>
    37ea:	df 01       	movw	r26, r30
    37ec:	a1 5b       	subi	r26, 0xB1	; 177
    37ee:	bf 4f       	sbci	r27, 0xFF	; 255
    37f0:	8c 91       	ld	r24, X
    37f2:	8e 32       	cpi	r24, 0x2E	; 46
    37f4:	39 f5       	brne	.+78     	; 0x3844 <f_rename+0x1b8>
									dw = (djo.fs->fs_type == FS_FAT32 && djn.sclust == djo.fs->dirbase) ? 0 : djn.sclust;
    37f6:	80 81       	ld	r24, Z
    37f8:	83 30       	cpi	r24, 0x03	; 3
    37fa:	81 f4       	brne	.+32     	; 0x381c <f_rename+0x190>
    37fc:	de 01       	movw	r26, r28
    37fe:	de 96       	adiw	r26, 0x3e	; 62
    3800:	6d 91       	ld	r22, X+
    3802:	7d 91       	ld	r23, X+
    3804:	8d 91       	ld	r24, X+
    3806:	9c 91       	ld	r25, X
    3808:	13 97       	sbiw	r26, 0x03	; 3
    380a:	22 a1       	ldd	r18, Z+34	; 0x22
    380c:	33 a1       	ldd	r19, Z+35	; 0x23
    380e:	44 a1       	ldd	r20, Z+36	; 0x24
    3810:	55 a1       	ldd	r21, Z+37	; 0x25
    3812:	62 17       	cp	r22, r18
    3814:	73 07       	cpc	r23, r19
    3816:	84 07       	cpc	r24, r20
    3818:	95 07       	cpc	r25, r21
    381a:	41 f0       	breq	.+16     	; 0x382c <f_rename+0x1a0>
    381c:	de 01       	movw	r26, r28
    381e:	de 96       	adiw	r26, 0x3e	; 62
    3820:	4d 91       	ld	r20, X+
    3822:	5d 91       	ld	r21, X+
    3824:	6d 91       	ld	r22, X+
    3826:	7c 91       	ld	r23, X
    3828:	13 97       	sbiw	r26, 0x03	; 3
    382a:	03 c0       	rjmp	.+6      	; 0x3832 <f_rename+0x1a6>
    382c:	40 e0       	ldi	r20, 0x00	; 0
    382e:	50 e0       	ldi	r21, 0x00	; 0
    3830:	ba 01       	movw	r22, r20
									st_clust(dir, dw);
    3832:	cf 01       	movw	r24, r30
    3834:	82 5b       	subi	r24, 0xB2	; 178
    3836:	9f 4f       	sbci	r25, 0xFF	; 255
    3838:	0e 94 05 04 	call	0x80a	; 0x80a <st_clust>
									djo.fs->wflag = 1;
    383c:	ea a1       	ldd	r30, Y+34	; 0x22
    383e:	fb a1       	ldd	r31, Y+35	; 0x23
    3840:	81 e0       	ldi	r24, 0x01	; 1
    3842:	84 83       	std	Z+4, r24	; 0x04
								}
							}
						}
						if (res == FR_OK) {
							res = dir_remove(&djo);		/* Remove old entry */
    3844:	ce 01       	movw	r24, r28
    3846:	82 96       	adiw	r24, 0x22	; 34
    3848:	0e 94 37 0a 	call	0x146e	; 0x146e <dir_remove>
							if (res == FR_OK)
    384c:	88 23       	and	r24, r24
    384e:	51 f4       	brne	.+20     	; 0x3864 <f_rename+0x1d8>
								res = sync_fs(djo.fs);
    3850:	8a a1       	ldd	r24, Y+34	; 0x22
    3852:	9b a1       	ldd	r25, Y+35	; 0x23
    3854:	0e 94 0c 08 	call	0x1018	; 0x1018 <sync_fs>
    3858:	05 c0       	rjmp	.+10     	; 0x3864 <f_rename+0x1d8>
#if _FS_LOCK
		if (res == FR_OK) res = chk_lock(&djo, 2);
#endif
		if (res == FR_OK) {						/* Old object is found */
			if (!djo.dir) {						/* Is root dir? */
				res = FR_NO_FILE;
    385a:	84 e0       	ldi	r24, 0x04	; 4
    385c:	03 c0       	rjmp	.+6      	; 0x3864 <f_rename+0x1d8>
				mem_cpy(buf, djo.dir+DIR_Attr, 21);		/* Save the object information except name */
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
				if (get_ldnumber(&path_new) >= 0)		/* Snip drive number off and ignore it */
					res = follow_path(&djn, path_new);	/* and check if new object is exist */
				else
					res = FR_INVALID_DRIVE;
    385e:	8b e0       	ldi	r24, 0x0B	; 11
    3860:	01 c0       	rjmp	.+2      	; 0x3864 <f_rename+0x1d8>
				if (res == FR_OK) res = FR_EXIST;		/* The new object name is already existing */
    3862:	88 e0       	ldi	r24, 0x08	; 8
		}
		FREE_BUF();
	}

	LEAVE_FF(djo.fs, res);
}
    3864:	cf 5a       	subi	r28, 0xAF	; 175
    3866:	df 4f       	sbci	r29, 0xFF	; 255
    3868:	0f b6       	in	r0, 0x3f	; 63
    386a:	f8 94       	cli
    386c:	de bf       	out	0x3e, r29	; 62
    386e:	0f be       	out	0x3f, r0	; 63
    3870:	cd bf       	out	0x3d, r28	; 61
    3872:	cf 91       	pop	r28
    3874:	df 91       	pop	r29
    3876:	1f 91       	pop	r17
    3878:	0f 91       	pop	r16
    387a:	ff 90       	pop	r15
    387c:	ef 90       	pop	r14
    387e:	df 90       	pop	r13
    3880:	cf 90       	pop	r12
    3882:	08 95       	ret
						dir[DIR_Attr] = buf[0] | AM_ARC;
						djo.fs->wflag = 1;
						if (djo.sclust != djn.sclust && (dir[DIR_Attr] & AM_DIR)) {		/* Update .. entry in the directory if needed */
							dw = clust2sect(djo.fs, ld_clust(djo.fs, dir));
							if (!dw) {
								res = FR_INT_ERR;
    3884:	82 e0       	ldi	r24, 0x02	; 2
    3886:	ee cf       	rjmp	.-36     	; 0x3864 <f_rename+0x1d8>

00003888 <main>:
FATFS FatFs;		/* FatFs work area needed for each volume */
FIL Fil;			/* File object needed for each open file */


int main (void)
{
    3888:	1f 93       	push	r17
    388a:	df 93       	push	r29
    388c:	cf 93       	push	r28
    388e:	00 d0       	rcall	.+0      	; 0x3890 <main+0x8>
    3890:	cd b7       	in	r28, 0x3d	; 61
    3892:	de b7       	in	r29, 0x3e	; 62

PORTB=0x00;
    3894:	18 ba       	out	0x18, r1	; 24
DDRB=0xB0;
    3896:	80 eb       	ldi	r24, 0xB0	; 176
    3898:	87 bb       	out	0x17, r24	; 23

SPCR=0x5C;
    389a:	8c e5       	ldi	r24, 0x5C	; 92
    389c:	8d b9       	out	0x0d, r24	; 13
SPSR=0x00;
    389e:	1e b8       	out	0x0e, r1	; 14


	UINT bw;
DDRC |= 0xFF;
    38a0:	84 b3       	in	r24, 0x14	; 20
    38a2:	1f ef       	ldi	r17, 0xFF	; 255
    38a4:	14 bb       	out	0x14, r17	; 20
PORTC |= 0x01;
    38a6:	a8 9a       	sbi	0x15, 0	; 21
	f_mount(&FatFs, "", 0);		/* Give a work area to the default drive */
    38a8:	8f e8       	ldi	r24, 0x8F	; 143
    38aa:	90 e0       	ldi	r25, 0x00	; 0
    38ac:	60 e7       	ldi	r22, 0x70	; 112
    38ae:	70 e0       	ldi	r23, 0x00	; 0
    38b0:	40 e0       	ldi	r20, 0x00	; 0
    38b2:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <f_mount>
PORTC |= 0x02;
    38b6:	a9 9a       	sbi	0x15, 1	; 21
	if (f_open(&Fil, "newfile.txt", FA_WRITE | FA_CREATE_ALWAYS) == FR_OK) {	/* Create a file */
    38b8:	8d eb       	ldi	r24, 0xBD	; 189
    38ba:	92 e0       	ldi	r25, 0x02	; 2
    38bc:	61 e7       	ldi	r22, 0x71	; 113
    38be:	70 e0       	ldi	r23, 0x00	; 0
    38c0:	4a e0       	ldi	r20, 0x0A	; 10
    38c2:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <f_open>
    38c6:	88 23       	and	r24, r24
    38c8:	d9 f4       	brne	.+54     	; 0x3900 <main+0x78>
PORTC |= 0x04;
    38ca:	aa 9a       	sbi	0x15, 2	; 21
		f_write(&Fil, "It works!\r\n", 11, &bw);	/* Write data to the file */
    38cc:	8d eb       	ldi	r24, 0xBD	; 189
    38ce:	92 e0       	ldi	r25, 0x02	; 2
    38d0:	6d e7       	ldi	r22, 0x7D	; 125
    38d2:	70 e0       	ldi	r23, 0x00	; 0
    38d4:	4b e0       	ldi	r20, 0x0B	; 11
    38d6:	50 e0       	ldi	r21, 0x00	; 0
    38d8:	9e 01       	movw	r18, r28
    38da:	2f 5f       	subi	r18, 0xFF	; 255
    38dc:	3f 4f       	sbci	r19, 0xFF	; 255
    38de:	0e 94 3a 12 	call	0x2474	; 0x2474 <f_write>
PORTC |= 0x08;
    38e2:	ab 9a       	sbi	0x15, 3	; 21
		f_close(&Fil);								/* Close the file */
    38e4:	8d eb       	ldi	r24, 0xBD	; 189
    38e6:	92 e0       	ldi	r25, 0x02	; 2
    38e8:	0e 94 78 14 	call	0x28f0	; 0x28f0 <f_close>
PORTC |= 0x0A;
    38ec:	85 b3       	in	r24, 0x15	; 21
    38ee:	8a 60       	ori	r24, 0x0A	; 10
    38f0:	85 bb       	out	0x15, r24	; 21
		if (bw == 11) {		/* Lights green LED if data written well */
    38f2:	89 81       	ldd	r24, Y+1	; 0x01
    38f4:	9a 81       	ldd	r25, Y+2	; 0x02
    38f6:	8b 30       	cpi	r24, 0x0B	; 11
    38f8:	91 05       	cpc	r25, r1
    38fa:	11 f4       	brne	.+4      	; 0x3900 <main+0x78>
			 PORTC |= 0xFF;	/* Set PB4 high */
    38fc:	85 b3       	in	r24, 0x15	; 21
    38fe:	15 bb       	out	0x15, r17	; 21
    3900:	ff cf       	rjmp	.-2      	; 0x3900 <main+0x78>

00003902 <get_fattime>:
			| ((DWORD)7 << 21)				/* Month 7 */
			| ((DWORD)28 << 16)				/* Mday 28 */
			| ((DWORD)0 << 11)				/* Hour 0 */
			| ((DWORD)0 << 5)				/* Min 0 */
			| ((DWORD)0 >> 1);				/* Sec 0 */
}
    3902:	60 e0       	ldi	r22, 0x00	; 0
    3904:	70 e0       	ldi	r23, 0x00	; 0
    3906:	8c ef       	ldi	r24, 0xFC	; 252
    3908:	92 e4       	ldi	r25, 0x42	; 66
    390a:	08 95       	ret

0000390c <__mulsi3>:
    390c:	62 9f       	mul	r22, r18
    390e:	d0 01       	movw	r26, r0
    3910:	73 9f       	mul	r23, r19
    3912:	f0 01       	movw	r30, r0
    3914:	82 9f       	mul	r24, r18
    3916:	e0 0d       	add	r30, r0
    3918:	f1 1d       	adc	r31, r1
    391a:	64 9f       	mul	r22, r20
    391c:	e0 0d       	add	r30, r0
    391e:	f1 1d       	adc	r31, r1
    3920:	92 9f       	mul	r25, r18
    3922:	f0 0d       	add	r31, r0
    3924:	83 9f       	mul	r24, r19
    3926:	f0 0d       	add	r31, r0
    3928:	74 9f       	mul	r23, r20
    392a:	f0 0d       	add	r31, r0
    392c:	65 9f       	mul	r22, r21
    392e:	f0 0d       	add	r31, r0
    3930:	99 27       	eor	r25, r25
    3932:	72 9f       	mul	r23, r18
    3934:	b0 0d       	add	r27, r0
    3936:	e1 1d       	adc	r30, r1
    3938:	f9 1f       	adc	r31, r25
    393a:	63 9f       	mul	r22, r19
    393c:	b0 0d       	add	r27, r0
    393e:	e1 1d       	adc	r30, r1
    3940:	f9 1f       	adc	r31, r25
    3942:	bd 01       	movw	r22, r26
    3944:	cf 01       	movw	r24, r30
    3946:	11 24       	eor	r1, r1
    3948:	08 95       	ret

0000394a <__udivmodsi4>:
    394a:	a1 e2       	ldi	r26, 0x21	; 33
    394c:	1a 2e       	mov	r1, r26
    394e:	aa 1b       	sub	r26, r26
    3950:	bb 1b       	sub	r27, r27
    3952:	fd 01       	movw	r30, r26
    3954:	0d c0       	rjmp	.+26     	; 0x3970 <__udivmodsi4_ep>

00003956 <__udivmodsi4_loop>:
    3956:	aa 1f       	adc	r26, r26
    3958:	bb 1f       	adc	r27, r27
    395a:	ee 1f       	adc	r30, r30
    395c:	ff 1f       	adc	r31, r31
    395e:	a2 17       	cp	r26, r18
    3960:	b3 07       	cpc	r27, r19
    3962:	e4 07       	cpc	r30, r20
    3964:	f5 07       	cpc	r31, r21
    3966:	20 f0       	brcs	.+8      	; 0x3970 <__udivmodsi4_ep>
    3968:	a2 1b       	sub	r26, r18
    396a:	b3 0b       	sbc	r27, r19
    396c:	e4 0b       	sbc	r30, r20
    396e:	f5 0b       	sbc	r31, r21

00003970 <__udivmodsi4_ep>:
    3970:	66 1f       	adc	r22, r22
    3972:	77 1f       	adc	r23, r23
    3974:	88 1f       	adc	r24, r24
    3976:	99 1f       	adc	r25, r25
    3978:	1a 94       	dec	r1
    397a:	69 f7       	brne	.-38     	; 0x3956 <__udivmodsi4_loop>
    397c:	60 95       	com	r22
    397e:	70 95       	com	r23
    3980:	80 95       	com	r24
    3982:	90 95       	com	r25
    3984:	9b 01       	movw	r18, r22
    3986:	ac 01       	movw	r20, r24
    3988:	bd 01       	movw	r22, r26
    398a:	cf 01       	movw	r24, r30
    398c:	08 95       	ret

0000398e <_exit>:
    398e:	f8 94       	cli

00003990 <__stop_program>:
    3990:	ff cf       	rjmp	.-2      	; 0x3990 <__stop_program>
